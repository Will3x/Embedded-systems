
c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000002d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800126  00800126  00000392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da9  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000879  00000000  00000000  0000121d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ed  00000000  00000000  00001a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a4  00000000  00000000  000024db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000277f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 32       	cpi	r26, 0x2B	; 43
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  9e:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <dist_init>:
	ADMUX &= 0xF0;                    //Clear the older channel that was read
	ADMUX |= channel;                //Defines the new ADC channel to be read
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
	return ADCW;                    //Returns the ADC value of the chosen channel
}
  a6:	85 b7       	in	r24, 0x35	; 53
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	85 bf       	out	0x35, r24	; 53
  ac:	78 94       	sei
  ae:	08 95       	ret

000000b0 <__vector_1>:
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
  c2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <nummer>
  c6:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <nummer+0x1>
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	71 f4       	brne	.+28     	; 0xea <__vector_1+0x3a>
  ce:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  d2:	e4 e8       	ldi	r30, 0x84	; 132
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	91 81       	ldd	r25, Z+1	; 0x01
  da:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pulse+0x1>
  de:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pulse>
  e2:	11 82       	std	Z+1, r1	; 0x01
  e4:	10 82       	st	Z, r1
  e6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
  ea:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <nummer>
  ee:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <nummer+0x1>
  f2:	89 2b       	or	r24, r25
  f4:	59 f4       	brne	.+22     	; 0x10c <__vector_1+0x5c>
  f6:	e1 e8       	ldi	r30, 0x81	; 129
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	80 83       	st	Z, r24
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <nummer+0x1>
 108:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <nummer>
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <adc_init>:
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	87 60       	ori	r24, 0x07	; 7
 126:	80 83       	st	Z, r24
 128:	ac e7       	ldi	r26, 0x7C	; 124
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	8c 91       	ld	r24, X
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	8c 93       	st	X, r24
 132:	80 81       	ld	r24, Z
 134:	80 68       	ori	r24, 0x80	; 128
 136:	80 83       	st	Z, r24
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <USART_init>:

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 140:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 144:	87 e6       	ldi	r24, 0x67	; 103
 146:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 14a:	88 e1       	ldi	r24, 0x18	; 24
 14c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 156:	08 95       	ret

00000158 <USART_send>:
}

void USART_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
 158:	e0 ec       	ldi	r30, 0xC0	; 192
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	90 81       	ld	r25, Z
 15e:	95 ff       	sbrs	r25, 5
 160:	fd cf       	rjmp	.-6      	; 0x15c <USART_send+0x4>
	UDR0 = data;
 162:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 166:	08 95       	ret

00000168 <USART_putstring>:
	
}

void USART_putstring(char* StringPtr){
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 16e:	88 81       	ld	r24, Y
 170:	88 23       	and	r24, r24
 172:	31 f0       	breq	.+12     	; 0x180 <USART_putstring+0x18>
 174:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 176:	0e 94 ac 00 	call	0x158	; 0x158 <USART_send>
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
 17a:	89 91       	ld	r24, Y+
 17c:	81 11       	cpse	r24, r1
 17e:	fb cf       	rjmp	.-10     	; 0x176 <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
	
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <main>:
	if (nummer == 0){
		TCCR1B |= 1<<CS10; // start de counter van de microcontroller. prescaler 1
		nummer = 1;
	}
}
int main(void){
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	60 97       	sbiw	r28, 0x10	; 16
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
	dist_init();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <dist_init>
	adc_init();        //Setup the ADC
 19e:	0e 94 8f 00 	call	0x11e	; 0x11e <adc_init>
	USART_init();        //Setup the USART
 1a2:	0e 94 a0 00 	call	0x140	; 0x140 <USART_init>
	// disable U2X mode
	UCSR0A = 0;
 1a6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1aa:	88 e1       	ldi	r24, 0x18	; 24
 1ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 1b0:	8e e0       	ldi	r24, 0x0E	; 14
 1b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	int16_t count_a = 0;
	char show_a[16];
	DDRD = 0b11111011;
 1b6:	8b ef       	ldi	r24, 0xFB	; 251
 1b8:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	80 e7       	ldi	r24, 0x70	; 112
 1be:	92 e0       	ldi	r25, 0x02	; 2
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x3a>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x44>
 1ca:	00 00       	nop
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1cc:	0a e3       	ldi	r16, 0x3A	; 58
 1ce:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(50);
	
	// echo = INT0
	// TRIGGER = DP0
	while(1){
		PORTD |= (1<< PIND0);
 1d0:	58 9a       	sbi	0x0b, 0	; 11
 1d2:	8f e5       	ldi	r24, 0x5F	; 95
 1d4:	9a ee       	ldi	r25, 0xEA	; 234
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x50>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x56>
 1dc:	00 00       	nop
		_delay_ms(15); //dit geeft dus een puls van 15ms naar pind0
		PORTD &= ~(1 << PIND0);
 1de:	58 98       	cbi	0x0b, 0	; 11
		count_a = pulse/58;
 1e0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <pulse>
 1e4:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <pulse+0x1>
 1e8:	b8 01       	movw	r22, r16
 1ea:	0e 94 0d 01 	call	0x21a	; 0x21a <__divmodhi4>
 1ee:	cb 01       	movw	r24, r22
 1f0:	4a e0       	ldi	r20, 0x0A	; 10
 1f2:	be 01       	movw	r22, r28
 1f4:	6f 5f       	subi	r22, 0xFF	; 255
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255
 1f8:	0e 94 35 01 	call	0x26a	; 0x26a <__itoa_ncheck>
		itoa(count_a, show_a, 10);
		USART_putstring(show_a);
 1fc:	ce 01       	movw	r24, r28
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	0e 94 b4 00 	call	0x168	; 0x168 <USART_putstring>
		USART_putstring(" cm");
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 b4 00 	call	0x168	; 0x168 <USART_putstring>
		USART_send('\r');
 20c:	8d e0       	ldi	r24, 0x0D	; 13
 20e:	0e 94 ac 00 	call	0x158	; 0x158 <USART_send>
		USART_send('\n');
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	0e 94 ac 00 	call	0x158	; 0x158 <USART_send>
 218:	db cf       	rjmp	.-74     	; 0x1d0 <main+0x4a>

0000021a <__divmodhi4>:
 21a:	97 fb       	bst	r25, 7
 21c:	07 2e       	mov	r0, r23
 21e:	16 f4       	brtc	.+4      	; 0x224 <__divmodhi4+0xa>
 220:	00 94       	com	r0
 222:	07 d0       	rcall	.+14     	; 0x232 <__divmodhi4_neg1>
 224:	77 fd       	sbrc	r23, 7
 226:	09 d0       	rcall	.+18     	; 0x23a <__divmodhi4_neg2>
 228:	0e 94 21 01 	call	0x242	; 0x242 <__udivmodhi4>
 22c:	07 fc       	sbrc	r0, 7
 22e:	05 d0       	rcall	.+10     	; 0x23a <__divmodhi4_neg2>
 230:	3e f4       	brtc	.+14     	; 0x240 <__divmodhi4_exit>

00000232 <__divmodhi4_neg1>:
 232:	90 95       	com	r25
 234:	81 95       	neg	r24
 236:	9f 4f       	sbci	r25, 0xFF	; 255
 238:	08 95       	ret

0000023a <__divmodhi4_neg2>:
 23a:	70 95       	com	r23
 23c:	61 95       	neg	r22
 23e:	7f 4f       	sbci	r23, 0xFF	; 255

00000240 <__divmodhi4_exit>:
 240:	08 95       	ret

00000242 <__udivmodhi4>:
 242:	aa 1b       	sub	r26, r26
 244:	bb 1b       	sub	r27, r27
 246:	51 e1       	ldi	r21, 0x11	; 17
 248:	07 c0       	rjmp	.+14     	; 0x258 <__udivmodhi4_ep>

0000024a <__udivmodhi4_loop>:
 24a:	aa 1f       	adc	r26, r26
 24c:	bb 1f       	adc	r27, r27
 24e:	a6 17       	cp	r26, r22
 250:	b7 07       	cpc	r27, r23
 252:	10 f0       	brcs	.+4      	; 0x258 <__udivmodhi4_ep>
 254:	a6 1b       	sub	r26, r22
 256:	b7 0b       	sbc	r27, r23

00000258 <__udivmodhi4_ep>:
 258:	88 1f       	adc	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	5a 95       	dec	r21
 25e:	a9 f7       	brne	.-22     	; 0x24a <__udivmodhi4_loop>
 260:	80 95       	com	r24
 262:	90 95       	com	r25
 264:	bc 01       	movw	r22, r24
 266:	cd 01       	movw	r24, r26
 268:	08 95       	ret

0000026a <__itoa_ncheck>:
 26a:	bb 27       	eor	r27, r27
 26c:	4a 30       	cpi	r20, 0x0A	; 10
 26e:	31 f4       	brne	.+12     	; 0x27c <__itoa_ncheck+0x12>
 270:	99 23       	and	r25, r25
 272:	22 f4       	brpl	.+8      	; 0x27c <__itoa_ncheck+0x12>
 274:	bd e2       	ldi	r27, 0x2D	; 45
 276:	90 95       	com	r25
 278:	81 95       	neg	r24
 27a:	9f 4f       	sbci	r25, 0xFF	; 255
 27c:	0c 94 41 01 	jmp	0x282	; 0x282 <__utoa_common>

00000280 <__utoa_ncheck>:
 280:	bb 27       	eor	r27, r27

00000282 <__utoa_common>:
 282:	fb 01       	movw	r30, r22
 284:	55 27       	eor	r21, r21
 286:	aa 27       	eor	r26, r26
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	aa 1f       	adc	r26, r26
 28e:	a4 17       	cp	r26, r20
 290:	10 f0       	brcs	.+4      	; 0x296 <__utoa_common+0x14>
 292:	a4 1b       	sub	r26, r20
 294:	83 95       	inc	r24
 296:	50 51       	subi	r21, 0x10	; 16
 298:	b9 f7       	brne	.-18     	; 0x288 <__utoa_common+0x6>
 29a:	a0 5d       	subi	r26, 0xD0	; 208
 29c:	aa 33       	cpi	r26, 0x3A	; 58
 29e:	08 f0       	brcs	.+2      	; 0x2a2 <__utoa_common+0x20>
 2a0:	a9 5d       	subi	r26, 0xD9	; 217
 2a2:	a1 93       	st	Z+, r26
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	79 f7       	brne	.-34     	; 0x286 <__utoa_common+0x4>
 2a8:	b1 11       	cpse	r27, r1
 2aa:	b1 93       	st	Z+, r27
 2ac:	11 92       	st	Z+, r1
 2ae:	cb 01       	movw	r24, r22
 2b0:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <strrev>

000002b4 <strrev>:
 2b4:	dc 01       	movw	r26, r24
 2b6:	fc 01       	movw	r30, r24
 2b8:	67 2f       	mov	r22, r23
 2ba:	71 91       	ld	r23, Z+
 2bc:	77 23       	and	r23, r23
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <strrev+0x4>
 2c0:	32 97       	sbiw	r30, 0x02	; 2
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <strrev+0x18>
 2c4:	7c 91       	ld	r23, X
 2c6:	6d 93       	st	X+, r22
 2c8:	70 83       	st	Z, r23
 2ca:	62 91       	ld	r22, -Z
 2cc:	ae 17       	cp	r26, r30
 2ce:	bf 07       	cpc	r27, r31
 2d0:	c8 f3       	brcs	.-14     	; 0x2c4 <strrev+0x10>
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
