
c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000348  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800126  00800126  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001002  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fa  00000000  00000000  0000152e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070d  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  00002818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e8  00000000  00000000  00002d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003237  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 34       	cpi	r26, 0x4E	; 78
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  9e:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
  c0:	eb e2       	ldi	r30, 0x2B	; 43
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	2e e4       	ldi	r18, 0x4E	; 78
  c6:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
  c8:	80 81       	ld	r24, Z
  ca:	91 81       	ldd	r25, Z+1	; 0x01
  cc:	89 2b       	or	r24, r25
  ce:	91 f0       	breq	.+36     	; 0xf4 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
  d0:	82 81       	ldd	r24, Z+2	; 0x02
  d2:	93 81       	ldd	r25, Z+3	; 0x03
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	59 f4       	brne	.+22     	; 0xee <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
  d8:	86 81       	ldd	r24, Z+6	; 0x06
  da:	8f 5f       	subi	r24, 0xFF	; 255
  dc:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
  de:	84 81       	ldd	r24, Z+4	; 0x04
  e0:	95 81       	ldd	r25, Z+5	; 0x05
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	39 f0       	breq	.+14     	; 0xf4 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	93 83       	std	Z+3, r25	; 0x03
  ea:	82 83       	std	Z+2, r24	; 0x02
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	93 83       	std	Z+3, r25	; 0x03
  f2:	82 83       	std	Z+2, r24	; 0x02
  f4:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
  f6:	e2 17       	cp	r30, r18
  f8:	f3 07       	cpc	r31, r19
  fa:	31 f7       	brne	.-52     	; 0xc8 <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	bf 91       	pop	r27
 102:	af 91       	pop	r26
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <dist_init>:
	ADMUX &= 0xF0;                    //Clear the older channel that was read
	ADMUX |= channel;                //Defines the new ADC channel to be read
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
	return ADCW;                    //Returns the ADC value of the chosen channel
}
 116:	85 b7       	in	r24, 0x35	; 53
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	85 bf       	out	0x35, r24	; 53
 11c:	78 94       	sei
 11e:	08 95       	ret

00000120 <__vector_1>:
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
 132:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <nummer>
 136:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <nummer+0x1>
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	71 f4       	brne	.+28     	; 0x15a <__vector_1+0x3a>
 13e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 142:	e4 e8       	ldi	r30, 0x84	; 132
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	91 81       	ldd	r25, Z+1	; 0x01
 14a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pulse+0x1>
 14e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pulse>
 152:	11 82       	std	Z+1, r1	; 0x01
 154:	10 82       	st	Z, r1
 156:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
 15a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <nummer>
 15e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <nummer+0x1>
 162:	89 2b       	or	r24, r25
 164:	59 f4       	brne	.+22     	; 0x17c <__vector_1+0x5c>
 166:	e1 e8       	ldi	r30, 0x81	; 129
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	80 83       	st	Z, r24
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <nummer+0x1>
 178:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <nummer>
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <adc_init>:
 18e:	ea e7       	ldi	r30, 0x7A	; 122
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	87 60       	ori	r24, 0x07	; 7
 196:	80 83       	st	Z, r24
 198:	ac e7       	ldi	r26, 0x7C	; 124
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	8c 91       	ld	r24, X
 19e:	80 64       	ori	r24, 0x40	; 64
 1a0:	8c 93       	st	X, r24
 1a2:	80 81       	ld	r24, Z
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	80 83       	st	Z, r24
 1a8:	80 81       	ld	r24, Z
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	80 83       	st	Z, r24
 1ae:	08 95       	ret

000001b0 <USART_init>:

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 1b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 1b4:	87 e6       	ldi	r24, 0x67	; 103
 1b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1ba:	88 e1       	ldi	r24, 0x18	; 24
 1bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 1c0:	86 e0       	ldi	r24, 0x06	; 6
 1c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1c6:	08 95       	ret

000001c8 <USART_send>:
}

void USART_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
 1c8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	90 81       	ld	r25, Z
 1ce:	95 ff       	sbrs	r25, 5
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <USART_send+0x4>
	UDR0 = data;
 1d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1d6:	08 95       	ret

000001d8 <USART_putstring>:
	
}

void USART_putstring(char* StringPtr){
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 1de:	88 81       	ld	r24, Y
 1e0:	88 23       	and	r24, r24
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <USART_putstring+0x18>
 1e4:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 1e6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <USART_send>
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
 1ea:	89 91       	ld	r24, Y+
 1ec:	81 11       	cpse	r24, r1
 1ee:	fb cf       	rjmp	.-10     	; 0x1e6 <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
	
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <main>:
	if (nummer == 0){
		TCCR1B |= 1<<CS10; // start de counter van de microcontroller. prescaler 1
		nummer = 1;
	}
}
int main(void){
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	60 97       	sbiw	r28, 0x10	; 16
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
	dist_init();
 20a:	0e 94 8b 00 	call	0x116	; 0x116 <dist_init>
	adc_init();        //Setup the ADC
 20e:	0e 94 c7 00 	call	0x18e	; 0x18e <adc_init>
	USART_init();        //Setup the USART
 212:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_init>
	// disable U2X mode
	UCSR0A = 0;
 216:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 21a:	88 e1       	ldi	r24, 0x18	; 24
 21c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 220:	8e e0       	ldi	r24, 0x0E	; 14
 222:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	int16_t count_a = 0;
	char show_a[16];
	DDRD = 0b11111011;
 226:	8b ef       	ldi	r24, 0xFB	; 251
 228:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	80 e7       	ldi	r24, 0x70	; 112
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x3a>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x44>
 23a:	00 00       	nop
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 23c:	0a e3       	ldi	r16, 0x3A	; 58
 23e:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(50);
	
	// echo = INT0
	// TRIGGER = DP0
	while(1){
		PORTD |= (1<< PIND0);
 240:	58 9a       	sbi	0x0b, 0	; 11
 242:	8f e5       	ldi	r24, 0x5F	; 95
 244:	9a ee       	ldi	r25, 0xEA	; 234
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <main+0x50>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0x56>
 24c:	00 00       	nop
		_delay_ms(15); //dit geeft dus een puls van 15ms naar pind0
		PORTD &= ~(1 << PIND0);
 24e:	58 98       	cbi	0x0b, 0	; 11
		count_a = pulse/58;
 250:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <pulse>
 254:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <pulse+0x1>
 258:	b8 01       	movw	r22, r16
 25a:	0e 94 45 01 	call	0x28a	; 0x28a <__divmodhi4>
 25e:	cb 01       	movw	r24, r22
 260:	4a e0       	ldi	r20, 0x0A	; 10
 262:	be 01       	movw	r22, r28
 264:	6f 5f       	subi	r22, 0xFF	; 255
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	0e 94 6d 01 	call	0x2da	; 0x2da <__itoa_ncheck>
		itoa(count_a, show_a, 10);
		USART_putstring(show_a);
 26c:	ce 01       	movw	r24, r28
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_putstring>
		USART_putstring(" cm");
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_putstring>
		USART_send('\r');
 27c:	8d e0       	ldi	r24, 0x0D	; 13
 27e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <USART_send>
		USART_send('\n');
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <USART_send>
 288:	db cf       	rjmp	.-74     	; 0x240 <main+0x4a>

0000028a <__divmodhi4>:
 28a:	97 fb       	bst	r25, 7
 28c:	07 2e       	mov	r0, r23
 28e:	16 f4       	brtc	.+4      	; 0x294 <__divmodhi4+0xa>
 290:	00 94       	com	r0
 292:	07 d0       	rcall	.+14     	; 0x2a2 <__divmodhi4_neg1>
 294:	77 fd       	sbrc	r23, 7
 296:	09 d0       	rcall	.+18     	; 0x2aa <__divmodhi4_neg2>
 298:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__udivmodhi4>
 29c:	07 fc       	sbrc	r0, 7
 29e:	05 d0       	rcall	.+10     	; 0x2aa <__divmodhi4_neg2>
 2a0:	3e f4       	brtc	.+14     	; 0x2b0 <__divmodhi4_exit>

000002a2 <__divmodhi4_neg1>:
 2a2:	90 95       	com	r25
 2a4:	81 95       	neg	r24
 2a6:	9f 4f       	sbci	r25, 0xFF	; 255
 2a8:	08 95       	ret

000002aa <__divmodhi4_neg2>:
 2aa:	70 95       	com	r23
 2ac:	61 95       	neg	r22
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255

000002b0 <__divmodhi4_exit>:
 2b0:	08 95       	ret

000002b2 <__udivmodhi4>:
 2b2:	aa 1b       	sub	r26, r26
 2b4:	bb 1b       	sub	r27, r27
 2b6:	51 e1       	ldi	r21, 0x11	; 17
 2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <__udivmodhi4_ep>

000002ba <__udivmodhi4_loop>:
 2ba:	aa 1f       	adc	r26, r26
 2bc:	bb 1f       	adc	r27, r27
 2be:	a6 17       	cp	r26, r22
 2c0:	b7 07       	cpc	r27, r23
 2c2:	10 f0       	brcs	.+4      	; 0x2c8 <__udivmodhi4_ep>
 2c4:	a6 1b       	sub	r26, r22
 2c6:	b7 0b       	sbc	r27, r23

000002c8 <__udivmodhi4_ep>:
 2c8:	88 1f       	adc	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	5a 95       	dec	r21
 2ce:	a9 f7       	brne	.-22     	; 0x2ba <__udivmodhi4_loop>
 2d0:	80 95       	com	r24
 2d2:	90 95       	com	r25
 2d4:	bc 01       	movw	r22, r24
 2d6:	cd 01       	movw	r24, r26
 2d8:	08 95       	ret

000002da <__itoa_ncheck>:
 2da:	bb 27       	eor	r27, r27
 2dc:	4a 30       	cpi	r20, 0x0A	; 10
 2de:	31 f4       	brne	.+12     	; 0x2ec <__itoa_ncheck+0x12>
 2e0:	99 23       	and	r25, r25
 2e2:	22 f4       	brpl	.+8      	; 0x2ec <__itoa_ncheck+0x12>
 2e4:	bd e2       	ldi	r27, 0x2D	; 45
 2e6:	90 95       	com	r25
 2e8:	81 95       	neg	r24
 2ea:	9f 4f       	sbci	r25, 0xFF	; 255
 2ec:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__utoa_common>

000002f0 <__utoa_ncheck>:
 2f0:	bb 27       	eor	r27, r27

000002f2 <__utoa_common>:
 2f2:	fb 01       	movw	r30, r22
 2f4:	55 27       	eor	r21, r21
 2f6:	aa 27       	eor	r26, r26
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	aa 1f       	adc	r26, r26
 2fe:	a4 17       	cp	r26, r20
 300:	10 f0       	brcs	.+4      	; 0x306 <__utoa_common+0x14>
 302:	a4 1b       	sub	r26, r20
 304:	83 95       	inc	r24
 306:	50 51       	subi	r21, 0x10	; 16
 308:	b9 f7       	brne	.-18     	; 0x2f8 <__utoa_common+0x6>
 30a:	a0 5d       	subi	r26, 0xD0	; 208
 30c:	aa 33       	cpi	r26, 0x3A	; 58
 30e:	08 f0       	brcs	.+2      	; 0x312 <__utoa_common+0x20>
 310:	a9 5d       	subi	r26, 0xD9	; 217
 312:	a1 93       	st	Z+, r26
 314:	00 97       	sbiw	r24, 0x00	; 0
 316:	79 f7       	brne	.-34     	; 0x2f6 <__utoa_common+0x4>
 318:	b1 11       	cpse	r27, r1
 31a:	b1 93       	st	Z+, r27
 31c:	11 92       	st	Z+, r1
 31e:	cb 01       	movw	r24, r22
 320:	0c 94 92 01 	jmp	0x324	; 0x324 <strrev>

00000324 <strrev>:
 324:	dc 01       	movw	r26, r24
 326:	fc 01       	movw	r30, r24
 328:	67 2f       	mov	r22, r23
 32a:	71 91       	ld	r23, Z+
 32c:	77 23       	and	r23, r23
 32e:	e1 f7       	brne	.-8      	; 0x328 <strrev+0x4>
 330:	32 97       	sbiw	r30, 0x02	; 2
 332:	04 c0       	rjmp	.+8      	; 0x33c <strrev+0x18>
 334:	7c 91       	ld	r23, X
 336:	6d 93       	st	X+, r22
 338:	70 83       	st	Z, r23
 33a:	62 91       	ld	r22, -Z
 33c:	ae 17       	cp	r26, r30
 33e:	bf 07       	cpc	r27, r31
 340:	c8 f3       	brcs	.-14     	; 0x334 <strrev+0x10>
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
