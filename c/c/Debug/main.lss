
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000c6e  00000d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  0080012c  0080012c  00000d2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000183a  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d73  00000000  00000000  00002742  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d07  00000000  00000000  000034b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  000041bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000669  00000000  00000000  000044c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008da  00000000  00000000  00004b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005403  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 36       	cpi	r26, 0x64	; 100
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <main>
  9e:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <SCH_tasks_G>
  b4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	ee e2       	ldi	r30, 0x2E	; 46
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e2 5d       	subi	r30, 0xD2	; 210
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e2 5d       	subi	r30, 0xD2	; 210
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ce e2       	ldi	r28, 0x2E	; 46
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	ee e2       	ldi	r30, 0x2E	; 46
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	21 e5       	ldi	r18, 0x51	; 81
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_receive>:
#define F_CPU 16000000UL
#include <util/delay.h>

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1<<RXC0)));
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <USART_receive+0x4>
	return UDR0 - 48;
 222:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 226:	80 53       	subi	r24, 0x30	; 48
 228:	08 95       	ret

0000022a <USART_send>:

void USART_send(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 22a:	e0 ec       	ldi	r30, 0xC0	; 192
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	90 81       	ld	r25, Z
 230:	95 ff       	sbrs	r25, 5
 232:	fd cf       	rjmp	.-6      	; 0x22e <USART_send+0x4>
	UDR0 = data;
 234:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 238:	08 95       	ret

0000023a <USART_putstring>:
}

void USART_putstring(char* StringPtr)
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
 240:	88 81       	ld	r24, Y
 242:	88 23       	and	r24, r24
 244:	31 f0       	breq	.+12     	; 0x252 <USART_putstring+0x18>
 246:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 248:	0e 94 15 01 	call	0x22a	; 0x22a <USART_send>
	UDR0 = data;
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00){
 24c:	89 91       	ld	r24, Y+
 24e:	81 11       	cpse	r24, r1
 250:	fb cf       	rjmp	.-10     	; 0x248 <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <newLine>:

void newLine()
{
	USART_send('\r');
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	0e 94 15 01 	call	0x22a	; 0x22a <USART_send>
	USART_send('\n');
 25e:	8a e0       	ldi	r24, 0x0A	; 10
 260:	0e 94 15 01 	call	0x22a	; 0x22a <USART_send>
 264:	08 95       	ret

00000266 <read_adc>:
}

uint16_t read_adc(uint8_t channel)
{
	ADMUX &= 0xF0;                    //Clear the older channel that was read
 266:	ec e7       	ldi	r30, 0x7C	; 124
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	90 81       	ld	r25, Z
 26c:	90 7f       	andi	r25, 0xF0	; 240
 26e:	90 83       	st	Z, r25
	ADMUX |= channel;                 //Defines the new ADC channel to be read
 270:	90 81       	ld	r25, Z
 272:	89 2b       	or	r24, r25
 274:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);              //Starts a new conversion
 276:	ea e7       	ldi	r30, 0x7A	; 122
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));        //Wait until the conversion is done
 280:	80 81       	ld	r24, Z
 282:	86 fd       	sbrc	r24, 6
 284:	fd cf       	rjmp	.-6      	; 0x280 <read_adc+0x1a>
	return ADCW;                      //Returns the ADC value of the chosen channel
 286:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 28a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 28e:	08 95       	ret

00000290 <upDown>:
int unsigned combine3(unsigned x, unsigned y, unsigned z)
{
	unsigned pow1 = 10;
	unsigned pow2 = 100;
	return (z * pow2) + (y * pow1) + x;
}
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	81 e5       	ldi	r24, 0x51	; 81
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <atoi>
 2a0:	ec 01       	movw	r28, r24
 2a2:	8f e5       	ldi	r24, 0x5F	; 95
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <atoi>
 2aa:	8c 01       	movw	r16, r24
 2ac:	0e 94 16 04 	call	0x82c	; 0x82c <distanceStill>
 2b0:	8a e5       	ldi	r24, 0x5A	; 90
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 da 05 	call	0xbb4	; 0xbb4 <atoi>
 2b8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 2bc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 2c0:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <distance_up+0x1>
 2c4:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <distance_up>
 2c8:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <LDR_down>
 2cc:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <LDR_down+0x1>
 2d0:	c4 17       	cp	r28, r20
 2d2:	d5 07       	cpc	r29, r21
 2d4:	3c f4       	brge	.+14     	; 0x2e4 <upDown+0x54>
 2d6:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_down>
 2da:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_down+0x1>
 2de:	04 17       	cp	r16, r20
 2e0:	15 07       	cpc	r17, r21
 2e2:	3c f0       	brlt	.+14     	; 0x2f2 <upDown+0x62>
 2e4:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 2e8:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 2ec:	45 2b       	or	r20, r21
 2ee:	71 f0       	breq	.+28     	; 0x30c <upDown+0x7c>
 2f0:	6c c0       	rjmp	.+216    	; 0x3ca <upDown+0x13a>
 2f2:	a9 01       	movw	r20, r18
 2f4:	4f 5f       	subi	r20, 0xFF	; 255
 2f6:	5f 4f       	sbci	r21, 0xFF	; 255
 2f8:	48 17       	cp	r20, r24
 2fa:	59 07       	cpc	r21, r25
 2fc:	34 f5       	brge	.+76     	; 0x34a <upDown+0xba>
 2fe:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 302:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 306:	45 2b       	or	r20, r21
 308:	09 f4       	brne	.+2      	; 0x30c <upDown+0x7c>
 30a:	66 c0       	rjmp	.+204    	; 0x3d8 <upDown+0x148>
 30c:	2a 98       	cbi	0x05, 2	; 5
 30e:	28 9a       	sbi	0x05, 0	; 5
 310:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <distance_down>
 314:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <distance_down+0x1>
 318:	28 17       	cp	r18, r24
 31a:	39 07       	cpc	r19, r25
 31c:	0c f0       	brlt	.+2      	; 0x320 <upDown+0x90>
 31e:	7b c0       	rjmp	.+246    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 320:	29 9a       	sbi	0x05, 1	; 5
 322:	2f ef       	ldi	r18, 0xFF	; 255
 324:	81 ee       	ldi	r24, 0xE1	; 225
 326:	94 e0       	ldi	r25, 0x04	; 4
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <upDown+0x98>
 330:	00 c0       	rjmp	.+0      	; 0x332 <upDown+0xa2>
 332:	00 00       	nop
 334:	29 98       	cbi	0x05, 1	; 5
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	81 ee       	ldi	r24, 0xE1	; 225
 33a:	94 e0       	ldi	r25, 0x04	; 4
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <upDown+0xac>
 344:	00 c0       	rjmp	.+0      	; 0x346 <upDown+0xb6>
 346:	00 00       	nop
 348:	66 c0       	rjmp	.+204    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 34a:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <LDR_up>
 34e:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <LDR_up+0x1>
 352:	4c 17       	cp	r20, r28
 354:	5d 07       	cpc	r21, r29
 356:	3c f4       	brge	.+14     	; 0x366 <upDown+0xd6>
 358:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_up>
 35c:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_up+0x1>
 360:	40 17       	cp	r20, r16
 362:	51 07       	cpc	r21, r17
 364:	3c f0       	brlt	.+14     	; 0x374 <upDown+0xe4>
 366:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 36a:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 36e:	45 2b       	or	r20, r21
 370:	d9 f5       	brne	.+118    	; 0x3e8 <upDown+0x158>
 372:	0d c0       	rjmp	.+26     	; 0x38e <upDown+0xfe>
 374:	21 50       	subi	r18, 0x01	; 1
 376:	31 09       	sbc	r19, r1
 378:	82 17       	cp	r24, r18
 37a:	93 07       	cpc	r25, r19
 37c:	0c f0       	brlt	.+2      	; 0x380 <upDown+0xf0>
 37e:	4b c0       	rjmp	.+150    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 380:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <__data_end>
 384:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <__data_end+0x1>
 388:	23 2b       	or	r18, r19
 38a:	09 f4       	brne	.+2      	; 0x38e <upDown+0xfe>
 38c:	44 c0       	rjmp	.+136    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 38e:	28 98       	cbi	0x05, 0	; 5
 390:	2a 9a       	sbi	0x05, 2	; 5
 392:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <distance_up>
 396:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <distance_up+0x1>
 39a:	82 17       	cp	r24, r18
 39c:	93 07       	cpc	r25, r19
 39e:	dc f5       	brge	.+118    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3a0:	29 9a       	sbi	0x05, 1	; 5
 3a2:	2f ef       	ldi	r18, 0xFF	; 255
 3a4:	81 ee       	ldi	r24, 0xE1	; 225
 3a6:	94 e0       	ldi	r25, 0x04	; 4
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <upDown+0x118>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <upDown+0x122>
 3b2:	00 00       	nop
 3b4:	29 98       	cbi	0x05, 1	; 5
 3b6:	2f ef       	ldi	r18, 0xFF	; 255
 3b8:	81 ee       	ldi	r24, 0xE1	; 225
 3ba:	94 e0       	ldi	r25, 0x04	; 4
 3bc:	21 50       	subi	r18, 0x01	; 1
 3be:	80 40       	sbci	r24, 0x00	; 0
 3c0:	90 40       	sbci	r25, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <upDown+0x12c>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <upDown+0x136>
 3c6:	00 00       	nop
 3c8:	26 c0       	rjmp	.+76     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ca:	a9 01       	movw	r20, r18
 3cc:	4f 5f       	subi	r20, 0xFF	; 255
 3ce:	5f 4f       	sbci	r21, 0xFF	; 255
 3d0:	48 17       	cp	r20, r24
 3d2:	59 07       	cpc	r21, r25
 3d4:	7c f4       	brge	.+30     	; 0x3f4 <upDown+0x164>
 3d6:	9a cf       	rjmp	.-204    	; 0x30c <upDown+0x7c>
 3d8:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <LDR_up>
 3dc:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <LDR_up+0x1>
 3e0:	4c 17       	cp	r20, r28
 3e2:	5d 07       	cpc	r21, r29
 3e4:	a4 f6       	brge	.-88     	; 0x38e <upDown+0xfe>
 3e6:	0e c0       	rjmp	.+28     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e8:	21 50       	subi	r18, 0x01	; 1
 3ea:	31 09       	sbc	r19, r1
 3ec:	82 17       	cp	r24, r18
 3ee:	93 07       	cpc	r25, r19
 3f0:	74 f2       	brlt	.-100    	; 0x38e <upDown+0xfe>
 3f2:	11 c0       	rjmp	.+34     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f4:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <LDR_up>
 3f8:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <LDR_up+0x1>
 3fc:	4c 17       	cp	r20, r28
 3fe:	5d 07       	cpc	r21, r29
 400:	9c f7       	brge	.-26     	; 0x3e8 <upDown+0x158>
 402:	aa cf       	rjmp	.-172    	; 0x358 <upDown+0xc8>
 404:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_up>
 408:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_up+0x1>
 40c:	40 17       	cp	r20, r16
 40e:	51 07       	cpc	r21, r17
 410:	0c f0       	brlt	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	bd cf       	rjmp	.-134    	; 0x38e <upDown+0xfe>
 414:	af cf       	rjmp	.-162    	; 0x374 <upDown+0xe4>
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret

00000420 <__vector_18>:

ISR ( USART_RX_vect )
{
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	2f 93       	push	r18
 42c:	3f 93       	push	r19
 42e:	4f 93       	push	r20
 430:	5f 93       	push	r21
 432:	6f 93       	push	r22
 434:	7f 93       	push	r23
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	ef 93       	push	r30
 444:	ff 93       	push	r31
	unsigned char ReceivedByte;
	ReceivedByte = UDR0;						// Set ReceivedByte to the received byte from the controller (GUI)
 446:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	switch(ReceivedByte)
 44a:	83 33       	cpi	r24, 0x33	; 51
 44c:	39 f1       	breq	.+78     	; 0x49c <__vector_18+0x7c>
 44e:	28 f4       	brcc	.+10     	; 0x45a <__vector_18+0x3a>
 450:	81 33       	cpi	r24, 0x31	; 49
 452:	51 f0       	breq	.+20     	; 0x468 <__vector_18+0x48>
 454:	82 33       	cpi	r24, 0x32	; 50
 456:	a9 f0       	breq	.+42     	; 0x482 <__vector_18+0x62>
 458:	be c0       	rjmp	.+380    	; 0x5d6 <__vector_18+0x1b6>
 45a:	87 33       	cpi	r24, 0x37	; 55
 45c:	09 f4       	brne	.+2      	; 0x460 <__vector_18+0x40>
 45e:	83 c0       	rjmp	.+262    	; 0x566 <__vector_18+0x146>
 460:	88 33       	cpi	r24, 0x38	; 56
 462:	09 f4       	brne	.+2      	; 0x466 <__vector_18+0x46>
 464:	a7 c0       	rjmp	.+334    	; 0x5b4 <__vector_18+0x194>
 466:	b7 c0       	rjmp	.+366    	; 0x5d6 <__vector_18+0x1b6>
	{
		case '1':								// 1 = Shut the sunshade // Red
			manual = 1;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 470:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			distance_manual = 5;
 474:	85 e0       	ldi	r24, 0x05	; 5
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 47c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 480:	aa c0       	rjmp	.+340    	; 0x5d6 <__vector_18+0x1b6>
			
		case '2':								// 2 = Open the sunshade // Green
			manual = 1;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 48a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			distance_manual = 10;
 48e:	8a e0       	ldi	r24, 0x0A	; 10
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 496:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 49a:	9d c0       	rjmp	.+314    	; 0x5d6 <__vector_18+0x1b6>
			
		case '3':								// 3 = set
			manual = 0;
 49c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__data_end+0x1>
 4a0:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
			temp_down = combine((int) USART_receive(), (int) USART_receive());
 4a4:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 4a8:	c8 2f       	mov	r28, r24
 4aa:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 4ae:	2c 2f       	mov	r18, r28
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	a9 01       	movw	r20, r18
 4b4:	44 0f       	add	r20, r20
 4b6:	55 1f       	adc	r21, r21
 4b8:	22 0f       	add	r18, r18
 4ba:	33 1f       	adc	r19, r19
 4bc:	22 0f       	add	r18, r18
 4be:	33 1f       	adc	r19, r19
 4c0:	22 0f       	add	r18, r18
 4c2:	33 1f       	adc	r19, r19
 4c4:	24 0f       	add	r18, r20
 4c6:	35 1f       	adc	r19, r21
 4c8:	28 0f       	add	r18, r24
 4ca:	31 1d       	adc	r19, r1
 4cc:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <temp_down+0x1>
 4d0:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <temp_down>
			temp_up = combine((int) USART_receive(), (int) USART_receive());
 4d4:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 4d8:	c8 2f       	mov	r28, r24
 4da:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 4de:	2c 2f       	mov	r18, r28
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	a9 01       	movw	r20, r18
 4e4:	44 0f       	add	r20, r20
 4e6:	55 1f       	adc	r21, r21
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	22 0f       	add	r18, r18
 4ee:	33 1f       	adc	r19, r19
 4f0:	22 0f       	add	r18, r18
 4f2:	33 1f       	adc	r19, r19
 4f4:	24 0f       	add	r18, r20
 4f6:	35 1f       	adc	r19, r21
 4f8:	28 0f       	add	r18, r24
 4fa:	31 1d       	adc	r19, r1
 4fc:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <temp_up+0x1>
 500:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <temp_up>
			LDR_down = combine((int) USART_receive(), (int) USART_receive());
 504:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 508:	c8 2f       	mov	r28, r24
 50a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 50e:	2c 2f       	mov	r18, r28
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	a9 01       	movw	r20, r18
 514:	44 0f       	add	r20, r20
 516:	55 1f       	adc	r21, r21
 518:	22 0f       	add	r18, r18
 51a:	33 1f       	adc	r19, r19
 51c:	22 0f       	add	r18, r18
 51e:	33 1f       	adc	r19, r19
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	24 0f       	add	r18, r20
 526:	35 1f       	adc	r19, r21
 528:	28 0f       	add	r18, r24
 52a:	31 1d       	adc	r19, r1
 52c:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <LDR_down+0x1>
 530:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <LDR_down>
			LDR_up = combine((int) USART_receive(), (int) USART_receive());
 534:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 538:	c8 2f       	mov	r28, r24
 53a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 53e:	2c 2f       	mov	r18, r28
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	a9 01       	movw	r20, r18
 544:	44 0f       	add	r20, r20
 546:	55 1f       	adc	r21, r21
 548:	22 0f       	add	r18, r18
 54a:	33 1f       	adc	r19, r19
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	22 0f       	add	r18, r18
 552:	33 1f       	adc	r19, r19
 554:	24 0f       	add	r18, r20
 556:	35 1f       	adc	r19, r21
 558:	28 0f       	add	r18, r24
 55a:	31 1d       	adc	r19, r1
 55c:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <LDR_up+0x1>
 560:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <LDR_up>
			return;
 564:	38 c0       	rjmp	.+112    	; 0x5d6 <__vector_18+0x1b6>
			
		case '7':								// 7 = open/closing distance
			manual = 1;
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 56e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			int closeopen = combine3((int) USART_receive(), (int) USART_receive(), (int) USART_receive());
 572:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 576:	d8 2f       	mov	r29, r24
 578:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 57c:	c8 2f       	mov	r28, r24
 57e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
			distance_manual = closeopen;
 582:	2c 2f       	mov	r18, r28
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	a9 01       	movw	r20, r18
 588:	44 0f       	add	r20, r20
 58a:	55 1f       	adc	r21, r21
 58c:	22 0f       	add	r18, r18
 58e:	33 1f       	adc	r19, r19
 590:	22 0f       	add	r18, r18
 592:	33 1f       	adc	r19, r19
 594:	22 0f       	add	r18, r18
 596:	33 1f       	adc	r19, r19
 598:	24 0f       	add	r18, r20
 59a:	35 1f       	adc	r19, r21
 59c:	94 e6       	ldi	r25, 0x64	; 100
 59e:	d9 9f       	mul	r29, r25
 5a0:	20 0d       	add	r18, r0
 5a2:	31 1d       	adc	r19, r1
 5a4:	11 24       	eor	r1, r1
 5a6:	28 0f       	add	r18, r24
 5a8:	31 1d       	adc	r19, r1
 5aa:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 5ae:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
			return;
 5b2:	11 c0       	rjmp	.+34     	; 0x5d6 <__vector_18+0x1b6>
			
		case '8':								// 8 = set manual ON / OFF
			manual = (int) USART_receive();
 5b4:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 5be:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			if (manual == 1)
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	41 f4       	brne	.+16     	; 0x5d6 <__vector_18+0x1b6>
			{
				distance_manual = (int) atoi(distance_sensor);
 5c6:	8a e5       	ldi	r24, 0x5A	; 90
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	0e 94 da 05 	call	0xbb4	; 0xbb4 <atoi>
 5ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 5d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
		
		default:
			return;
	}
 5d6:	ff 91       	pop	r31
 5d8:	ef 91       	pop	r30
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	bf 91       	pop	r27
 5e0:	af 91       	pop	r26
 5e2:	9f 91       	pop	r25
 5e4:	8f 91       	pop	r24
 5e6:	7f 91       	pop	r23
 5e8:	6f 91       	pop	r22
 5ea:	5f 91       	pop	r21
 5ec:	4f 91       	pop	r20
 5ee:	3f 91       	pop	r19
 5f0:	2f 91       	pop	r18
 5f2:	0f 90       	pop	r0
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	0f 90       	pop	r0
 5f8:	1f 90       	pop	r1
 5fa:	18 95       	reti

000005fc <init_connectie>:
#define BAUDRATE 9600
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)

void init_connectie()
{
	UCSR0A = 0;							// disable U2X mode
 5fc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);	// Set frame format: 8data, 2stop bit 
 600:	8e e0       	ldi	r24, 0x0E	; 14
 602:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 606:	08 95       	ret

00000608 <init_USART>:
}

void init_USART()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 608:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 60c:	87 e6       	ldi	r24, 0x67	; 103
 60e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);		// Enable receiver and transmitter
 612:	e1 ec       	ldi	r30, 0xC1	; 193
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	88 e1       	ldi	r24, 0x18	; 24
 618:	80 83       	st	Z, r24
	UCSR0C = (3<<UCSZ00);
 61a:	86 e0       	ldi	r24, 0x06	; 6
 61c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << RXCIE0 );			// Enable the USART Receive Complete interrupt ( USART_RXC )
 620:	80 81       	ld	r24, Z
 622:	80 68       	ori	r24, 0x80	; 128
 624:	80 83       	st	Z, r24
	sei ();								// Enable the Global Interrupt Enable flag so that interrupts can be processed
 626:	78 94       	sei
 628:	08 95       	ret

0000062a <init_scheduler>:
}

void init_scheduler()
{
	SCH_Init_T1();
 62a:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temperature,1,100);
 62e:	44 e6       	ldi	r20, 0x64	; 100
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	61 e0       	ldi	r22, 0x01	; 1
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	86 e7       	ldi	r24, 0x76	; 118
 638:	93 e0       	ldi	r25, 0x03	; 3
 63a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(ldr,2,100);
 63e:	44 e6       	ldi	r20, 0x64	; 100
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	62 e0       	ldi	r22, 0x02	; 2
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	80 eb       	ldi	r24, 0xB0	; 176
 648:	93 e0       	ldi	r25, 0x03	; 3
 64a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(distance,3,100);
 64e:	44 e6       	ldi	r20, 0x64	; 100
 650:	50 e0       	ldi	r21, 0x00	; 0
 652:	63 e0       	ldi	r22, 0x03	; 3
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	84 ee       	ldi	r24, 0xE4	; 228
 658:	93 e0       	ldi	r25, 0x03	; 3
 65a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(newLine,6,100);
 65e:	44 e6       	ldi	r20, 0x64	; 100
 660:	50 e0       	ldi	r21, 0x00	; 0
 662:	66 e0       	ldi	r22, 0x06	; 6
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	8c e2       	ldi	r24, 0x2C	; 44
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(upDown,8,20);
 66e:	44 e1       	ldi	r20, 0x14	; 20
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	68 e0       	ldi	r22, 0x08	; 8
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	88 e4       	ldi	r24, 0x48	; 72
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 67e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 682:	08 95       	ret

00000684 <init_adc>:
}

void init_adc()
{
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    // 16Mhz/128 = 125Khz the ADC reference clock
 684:	ea e7       	ldi	r30, 0x7A	; 122
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	87 60       	ori	r24, 0x07	; 7
 68c:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);							 // Voltage reference from AVCC (5v)
 68e:	ac e7       	ldi	r26, 0x7C	; 124
 690:	b0 e0       	ldi	r27, 0x00	; 0
 692:	8c 91       	ld	r24, X
 694:	80 64       	ori	r24, 0x40	; 64
 696:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);							 // Turn on ADC
 698:	80 81       	ld	r24, Z
 69a:	80 68       	ori	r24, 0x80	; 128
 69c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							 // Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 69e:	80 81       	ld	r24, Z
 6a0:	80 64       	ori	r24, 0x40	; 64
 6a2:	80 83       	st	Z, r24
 6a4:	08 95       	ret

000006a6 <init_dist>:
}

void init_dist()
{
	DDRD |= _BV(PD3);			// Pin 3 Trigger Output
 6a6:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~_BV(PD2);			// Pin 2 Echo Input
 6a8:	52 98       	cbi	0x0a, 2	; 10
 6aa:	08 95       	ret

000006ac <init_LEDS>:
}

void init_LEDS()
{ 
	DDRB |= _BV(PB0);			// pin0 B = output
 6ac:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1);			// pin1 B = output
 6ae:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(PB2);			// pin2 B = output
 6b0:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << PB2);		// Green LED on
 6b2:	2a 9a       	sbi	0x05, 2	; 5
 6b4:	08 95       	ret

000006b6 <setup>:
#include "init.h"


void setup()
{
	init_connectie();
 6b6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <init_connectie>
	init_adc();				// Setup the ADC
 6ba:	0e 94 42 03 	call	0x684	; 0x684 <init_adc>
	init_USART();			// Setup the USART
 6be:	0e 94 04 03 	call	0x608	; 0x608 <init_USART>
	init_dist();			// Setup distance sensor
 6c2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <init_dist>
	init_scheduler();		// Setup scheduler
 6c6:	0e 94 15 03 	call	0x62a	; 0x62a <init_scheduler>
	init_LEDS();			// Setup LED
 6ca:	0e 94 56 03 	call	0x6ac	; 0x6ac <init_LEDS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ce:	2f ef       	ldi	r18, 0xFF	; 255
 6d0:	89 e6       	ldi	r24, 0x69	; 105
 6d2:	98 e1       	ldi	r25, 0x18	; 24
 6d4:	21 50       	subi	r18, 0x01	; 1
 6d6:	80 40       	sbci	r24, 0x00	; 0
 6d8:	90 40       	sbci	r25, 0x00	; 0
 6da:	e1 f7       	brne	.-8      	; 0x6d4 <setup+0x1e>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <setup+0x28>
 6de:	00 00       	nop
 6e0:	08 95       	ret

000006e2 <main>:
	_delay_ms(500);			// Half second delay to initialize everything
}

int main(void)
{
	setup();
 6e2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <setup>
	while(1) {
		SCH_Dispatch_Tasks();
 6e6:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <main+0x4>

000006ec <temperature>:
#include "sensors.h"
#include "serial.h"

void temperature()
{
	USART_putstring("Temp : ");
 6ec:	8e e0       	ldi	r24, 0x0E	; 14
 6ee:	91 e0       	ldi	r25, 0x01	; 1
 6f0:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	adc_value = read_adc(0);
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	0e 94 33 01 	call	0x266	; 0x266 <read_adc>
	adc_value = (((((double)adc_value / 1024) * 5) - 0.5) * 100); // Calculate temperature
 6fa:	bc 01       	movw	r22, r24
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 df 04 	call	0x9be	; 0x9be <__floatunsisf>
 704:	20 e0       	ldi	r18, 0x00	; 0
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	40 e8       	ldi	r20, 0x80	; 128
 70a:	5a e3       	ldi	r21, 0x3A	; 58
 70c:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	40 ea       	ldi	r20, 0xA0	; 160
 716:	50 e4       	ldi	r21, 0x40	; 64
 718:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	40 e0       	ldi	r20, 0x00	; 0
 722:	5f e3       	ldi	r21, 0x3F	; 63
 724:	0e 94 3c 04 	call	0x878	; 0x878 <__subsf3>
 728:	20 e0       	ldi	r18, 0x00	; 0
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	48 ec       	ldi	r20, 0xC8	; 200
 72e:	52 e4       	ldi	r21, 0x42	; 66
 730:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 734:	0e 94 b0 04 	call	0x960	; 0x960 <__fixunssfsi>
 738:	dc 01       	movw	r26, r24
 73a:	cb 01       	movw	r24, r22
 73c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <adc_value+0x1>
 740:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <adc_value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 744:	4a e0       	ldi	r20, 0x0A	; 10
 746:	6f e5       	ldi	r22, 0x5F	; 95
 748:	71 e0       	ldi	r23, 0x01	; 1
 74a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__itoa_ncheck>
	itoa(adc_value, temp_sensor, 10);							  //Convert the read value to an ascii string
	USART_putstring(temp_sensor);								  //Send the converted value to the terminal
 74e:	8f e5       	ldi	r24, 0x5F	; 95
 750:	91 e0       	ldi	r25, 0x01	; 1
 752:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	USART_putstring("  ");
 756:	86 e1       	ldi	r24, 0x16	; 22
 758:	91 e0       	ldi	r25, 0x01	; 1
 75a:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
 75e:	08 95       	ret

00000760 <ldr>:
}

void ldr()
{
	USART_putstring("LDR : ");
 760:	89 e1       	ldi	r24, 0x19	; 25
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	adc_value = read_adc(1);
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	0e 94 33 01 	call	0x266	; 0x266 <read_adc>
	adc_value = ((((double)adc_value)/1024)*100 *1.5);			  // Calculate the amount of light
 76e:	bc 01       	movw	r22, r24
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 df 04 	call	0x9be	; 0x9be <__floatunsisf>
 778:	20 e0       	ldi	r18, 0x00	; 0
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	40 e8       	ldi	r20, 0x80	; 128
 77e:	5a e3       	ldi	r21, 0x3A	; 58
 780:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 784:	20 e0       	ldi	r18, 0x00	; 0
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	48 ec       	ldi	r20, 0xC8	; 200
 78a:	52 e4       	ldi	r21, 0x42	; 66
 78c:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	40 ec       	ldi	r20, 0xC0	; 192
 796:	5f e3       	ldi	r21, 0x3F	; 63
 798:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 79c:	0e 94 b0 04 	call	0x960	; 0x960 <__fixunssfsi>
 7a0:	dc 01       	movw	r26, r24
 7a2:	cb 01       	movw	r24, r22
 7a4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <adc_value+0x1>
 7a8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <adc_value>
 7ac:	4a e0       	ldi	r20, 0x0A	; 10
 7ae:	61 e5       	ldi	r22, 0x51	; 81
 7b0:	71 e0       	ldi	r23, 0x01	; 1
 7b2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__itoa_ncheck>
	itoa(adc_value, LDR_sensor, 10);							  // Convert the read value to an ascii string
	USART_putstring(LDR_sensor);								  // Send the converted value to the terminal
 7b6:	81 e5       	ldi	r24, 0x51	; 81
 7b8:	91 e0       	ldi	r25, 0x01	; 1
 7ba:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	USART_putstring("  ");
 7be:	86 e1       	ldi	r24, 0x16	; 22
 7c0:	91 e0       	ldi	r25, 0x01	; 1
 7c2:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
 7c6:	08 95       	ret

000007c8 <distance>:
}

void distance()
{
	USART_putstring("distance : ");
 7c8:	80 e2       	ldi	r24, 0x20	; 32
 7ca:	91 e0       	ldi	r25, 0x01	; 1
 7cc:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	PORTD |= _BV(PD3);
 7d0:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7d2:	85 e3       	ldi	r24, 0x35	; 53
 7d4:	8a 95       	dec	r24
 7d6:	f1 f7       	brne	.-4      	; 0x7d4 <distance+0xc>
 7d8:	00 00       	nop
	_delay_us(10);
	PORTD &= ~_BV(PD3);							// Give pulse from 10ms
 7da:	5b 98       	cbi	0x0b, 3	; 11
	
	loop_until_bit_is_set(PIND, PD2);
 7dc:	4a 9b       	sbis	0x09, 2	; 9
 7de:	fe cf       	rjmp	.-4      	; 0x7dc <distance+0x14>
	TCNT1 = 0;
 7e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 7e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	loop_until_bit_is_clear(PIND, PD2);
 7e8:	4a 99       	sbic	0x09, 2	; 9
 7ea:	fe cf       	rjmp	.-4      	; 0x7e8 <distance+0x20>
	uint16_t count = TCNT1;
 7ec:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 7f0:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 df 04 	call	0x9be	; 0x9be <__floatunsisf>
 7fc:	20 e0       	ldi	r18, 0x00	; 0
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	40 e8       	ldi	r20, 0x80	; 128
 802:	5e e3       	ldi	r21, 0x3E	; 62
 804:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 808:	0e 94 a9 04 	call	0x952	; 0x952 <__fixsfsi>
 80c:	dc 01       	movw	r26, r24
 80e:	cb 01       	movw	r24, r22
 810:	4a e0       	ldi	r20, 0x0A	; 10
 812:	6a e5       	ldi	r22, 0x5A	; 90
 814:	71 e0       	ldi	r23, 0x01	; 1
 816:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__itoa_ncheck>
	float distance = ((float)count / 4);		// Calculate the distance

	itoa(distance, distance_sensor, 10);        // Convert the read value to an ascii string
	USART_putstring(distance_sensor);			// Send the converted value to the terminal
 81a:	8a e5       	ldi	r24, 0x5A	; 90
 81c:	91 e0       	ldi	r25, 0x01	; 1
 81e:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	USART_putstring("  ");
 822:	86 e1       	ldi	r24, 0x16	; 22
 824:	91 e0       	ldi	r25, 0x01	; 1
 826:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
 82a:	08 95       	ret

0000082c <distanceStill>:
}

void distanceStill()
{
	PORTD |= _BV(PD3);
 82c:	5b 9a       	sbi	0x0b, 3	; 11
 82e:	85 e3       	ldi	r24, 0x35	; 53
 830:	8a 95       	dec	r24
 832:	f1 f7       	brne	.-4      	; 0x830 <distanceStill+0x4>
 834:	00 00       	nop
	_delay_us(10);
	PORTD &= ~_BV(PD3);							// Give pulse from 10ms
 836:	5b 98       	cbi	0x0b, 3	; 11
	loop_until_bit_is_set(PIND, PD2);
 838:	4a 9b       	sbis	0x09, 2	; 9
 83a:	fe cf       	rjmp	.-4      	; 0x838 <distanceStill+0xc>
	TCNT1 = 0;
 83c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 840:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	loop_until_bit_is_clear(PIND, PD2);
 844:	4a 99       	sbic	0x09, 2	; 9
 846:	fe cf       	rjmp	.-4      	; 0x844 <distanceStill+0x18>
	uint16_t count = TCNT1;
 848:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 84c:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 94 df 04 	call	0x9be	; 0x9be <__floatunsisf>
 858:	20 e0       	ldi	r18, 0x00	; 0
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	40 e8       	ldi	r20, 0x80	; 128
 85e:	5e e3       	ldi	r21, 0x3E	; 62
 860:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 864:	0e 94 a9 04 	call	0x952	; 0x952 <__fixsfsi>
 868:	dc 01       	movw	r26, r24
 86a:	cb 01       	movw	r24, r22
 86c:	4a e0       	ldi	r20, 0x0A	; 10
 86e:	6a e5       	ldi	r22, 0x5A	; 90
 870:	71 e0       	ldi	r23, 0x01	; 1
 872:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__itoa_ncheck>
 876:	08 95       	ret

00000878 <__subsf3>:
 878:	50 58       	subi	r21, 0x80	; 128

0000087a <__addsf3>:
 87a:	bb 27       	eor	r27, r27
 87c:	aa 27       	eor	r26, r26
 87e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__addsf3x>
 882:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_round>
 886:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_pscA>
 88a:	38 f0       	brcs	.+14     	; 0x89a <__addsf3+0x20>
 88c:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_pscB>
 890:	20 f0       	brcs	.+8      	; 0x89a <__addsf3+0x20>
 892:	39 f4       	brne	.+14     	; 0x8a2 <__addsf3+0x28>
 894:	9f 3f       	cpi	r25, 0xFF	; 255
 896:	19 f4       	brne	.+6      	; 0x89e <__addsf3+0x24>
 898:	26 f4       	brtc	.+8      	; 0x8a2 <__addsf3+0x28>
 89a:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_nan>
 89e:	0e f4       	brtc	.+2      	; 0x8a2 <__addsf3+0x28>
 8a0:	e0 95       	com	r30
 8a2:	e7 fb       	bst	r30, 7
 8a4:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_inf>

000008a8 <__addsf3x>:
 8a8:	e9 2f       	mov	r30, r25
 8aa:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_split3>
 8ae:	58 f3       	brcs	.-42     	; 0x886 <__addsf3+0xc>
 8b0:	ba 17       	cp	r27, r26
 8b2:	62 07       	cpc	r22, r18
 8b4:	73 07       	cpc	r23, r19
 8b6:	84 07       	cpc	r24, r20
 8b8:	95 07       	cpc	r25, r21
 8ba:	20 f0       	brcs	.+8      	; 0x8c4 <__addsf3x+0x1c>
 8bc:	79 f4       	brne	.+30     	; 0x8dc <__addsf3x+0x34>
 8be:	a6 f5       	brtc	.+104    	; 0x928 <__stack+0x29>
 8c0:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_zero>
 8c4:	0e f4       	brtc	.+2      	; 0x8c8 <__addsf3x+0x20>
 8c6:	e0 95       	com	r30
 8c8:	0b 2e       	mov	r0, r27
 8ca:	ba 2f       	mov	r27, r26
 8cc:	a0 2d       	mov	r26, r0
 8ce:	0b 01       	movw	r0, r22
 8d0:	b9 01       	movw	r22, r18
 8d2:	90 01       	movw	r18, r0
 8d4:	0c 01       	movw	r0, r24
 8d6:	ca 01       	movw	r24, r20
 8d8:	a0 01       	movw	r20, r0
 8da:	11 24       	eor	r1, r1
 8dc:	ff 27       	eor	r31, r31
 8de:	59 1b       	sub	r21, r25
 8e0:	99 f0       	breq	.+38     	; 0x908 <__stack+0x9>
 8e2:	59 3f       	cpi	r21, 0xF9	; 249
 8e4:	50 f4       	brcc	.+20     	; 0x8fa <__addsf3x+0x52>
 8e6:	50 3e       	cpi	r21, 0xE0	; 224
 8e8:	68 f1       	brcs	.+90     	; 0x944 <__stack+0x45>
 8ea:	1a 16       	cp	r1, r26
 8ec:	f0 40       	sbci	r31, 0x00	; 0
 8ee:	a2 2f       	mov	r26, r18
 8f0:	23 2f       	mov	r18, r19
 8f2:	34 2f       	mov	r19, r20
 8f4:	44 27       	eor	r20, r20
 8f6:	58 5f       	subi	r21, 0xF8	; 248
 8f8:	f3 cf       	rjmp	.-26     	; 0x8e0 <__addsf3x+0x38>
 8fa:	46 95       	lsr	r20
 8fc:	37 95       	ror	r19
 8fe:	27 95       	ror	r18
 900:	a7 95       	ror	r26
 902:	f0 40       	sbci	r31, 0x00	; 0
 904:	53 95       	inc	r21
 906:	c9 f7       	brne	.-14     	; 0x8fa <__addsf3x+0x52>
 908:	7e f4       	brtc	.+30     	; 0x928 <__stack+0x29>
 90a:	1f 16       	cp	r1, r31
 90c:	ba 0b       	sbc	r27, r26
 90e:	62 0b       	sbc	r22, r18
 910:	73 0b       	sbc	r23, r19
 912:	84 0b       	sbc	r24, r20
 914:	ba f0       	brmi	.+46     	; 0x944 <__stack+0x45>
 916:	91 50       	subi	r25, 0x01	; 1
 918:	a1 f0       	breq	.+40     	; 0x942 <__stack+0x43>
 91a:	ff 0f       	add	r31, r31
 91c:	bb 1f       	adc	r27, r27
 91e:	66 1f       	adc	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	c2 f7       	brpl	.-16     	; 0x916 <__stack+0x17>
 926:	0e c0       	rjmp	.+28     	; 0x944 <__stack+0x45>
 928:	ba 0f       	add	r27, r26
 92a:	62 1f       	adc	r22, r18
 92c:	73 1f       	adc	r23, r19
 92e:	84 1f       	adc	r24, r20
 930:	48 f4       	brcc	.+18     	; 0x944 <__stack+0x45>
 932:	87 95       	ror	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f7 95       	ror	r31
 93c:	9e 3f       	cpi	r25, 0xFE	; 254
 93e:	08 f0       	brcs	.+2      	; 0x942 <__stack+0x43>
 940:	b0 cf       	rjmp	.-160    	; 0x8a2 <__addsf3+0x28>
 942:	93 95       	inc	r25
 944:	88 0f       	add	r24, r24
 946:	08 f0       	brcs	.+2      	; 0x94a <__stack+0x4b>
 948:	99 27       	eor	r25, r25
 94a:	ee 0f       	add	r30, r30
 94c:	97 95       	ror	r25
 94e:	87 95       	ror	r24
 950:	08 95       	ret

00000952 <__fixsfsi>:
 952:	0e 94 b0 04 	call	0x960	; 0x960 <__fixunssfsi>
 956:	68 94       	set
 958:	b1 11       	cpse	r27, r1
 95a:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_szero>
 95e:	08 95       	ret

00000960 <__fixunssfsi>:
 960:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_splitA>
 964:	88 f0       	brcs	.+34     	; 0x988 <__fixunssfsi+0x28>
 966:	9f 57       	subi	r25, 0x7F	; 127
 968:	98 f0       	brcs	.+38     	; 0x990 <__fixunssfsi+0x30>
 96a:	b9 2f       	mov	r27, r25
 96c:	99 27       	eor	r25, r25
 96e:	b7 51       	subi	r27, 0x17	; 23
 970:	b0 f0       	brcs	.+44     	; 0x99e <__fixunssfsi+0x3e>
 972:	e1 f0       	breq	.+56     	; 0x9ac <__fixunssfsi+0x4c>
 974:	66 0f       	add	r22, r22
 976:	77 1f       	adc	r23, r23
 978:	88 1f       	adc	r24, r24
 97a:	99 1f       	adc	r25, r25
 97c:	1a f0       	brmi	.+6      	; 0x984 <__fixunssfsi+0x24>
 97e:	ba 95       	dec	r27
 980:	c9 f7       	brne	.-14     	; 0x974 <__fixunssfsi+0x14>
 982:	14 c0       	rjmp	.+40     	; 0x9ac <__fixunssfsi+0x4c>
 984:	b1 30       	cpi	r27, 0x01	; 1
 986:	91 f0       	breq	.+36     	; 0x9ac <__fixunssfsi+0x4c>
 988:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_zero>
 98c:	b1 e0       	ldi	r27, 0x01	; 1
 98e:	08 95       	ret
 990:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_zero>
 994:	67 2f       	mov	r22, r23
 996:	78 2f       	mov	r23, r24
 998:	88 27       	eor	r24, r24
 99a:	b8 5f       	subi	r27, 0xF8	; 248
 99c:	39 f0       	breq	.+14     	; 0x9ac <__fixunssfsi+0x4c>
 99e:	b9 3f       	cpi	r27, 0xF9	; 249
 9a0:	cc f3       	brlt	.-14     	; 0x994 <__fixunssfsi+0x34>
 9a2:	86 95       	lsr	r24
 9a4:	77 95       	ror	r23
 9a6:	67 95       	ror	r22
 9a8:	b3 95       	inc	r27
 9aa:	d9 f7       	brne	.-10     	; 0x9a2 <__fixunssfsi+0x42>
 9ac:	3e f4       	brtc	.+14     	; 0x9bc <__fixunssfsi+0x5c>
 9ae:	90 95       	com	r25
 9b0:	80 95       	com	r24
 9b2:	70 95       	com	r23
 9b4:	61 95       	neg	r22
 9b6:	7f 4f       	sbci	r23, 0xFF	; 255
 9b8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ba:	9f 4f       	sbci	r25, 0xFF	; 255
 9bc:	08 95       	ret

000009be <__floatunsisf>:
 9be:	e8 94       	clt
 9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <__floatsisf+0x12>

000009c2 <__floatsisf>:
 9c2:	97 fb       	bst	r25, 7
 9c4:	3e f4       	brtc	.+14     	; 0x9d4 <__floatsisf+0x12>
 9c6:	90 95       	com	r25
 9c8:	80 95       	com	r24
 9ca:	70 95       	com	r23
 9cc:	61 95       	neg	r22
 9ce:	7f 4f       	sbci	r23, 0xFF	; 255
 9d0:	8f 4f       	sbci	r24, 0xFF	; 255
 9d2:	9f 4f       	sbci	r25, 0xFF	; 255
 9d4:	99 23       	and	r25, r25
 9d6:	a9 f0       	breq	.+42     	; 0xa02 <__floatsisf+0x40>
 9d8:	f9 2f       	mov	r31, r25
 9da:	96 e9       	ldi	r25, 0x96	; 150
 9dc:	bb 27       	eor	r27, r27
 9de:	93 95       	inc	r25
 9e0:	f6 95       	lsr	r31
 9e2:	87 95       	ror	r24
 9e4:	77 95       	ror	r23
 9e6:	67 95       	ror	r22
 9e8:	b7 95       	ror	r27
 9ea:	f1 11       	cpse	r31, r1
 9ec:	f8 cf       	rjmp	.-16     	; 0x9de <__floatsisf+0x1c>
 9ee:	fa f4       	brpl	.+62     	; 0xa2e <__floatsisf+0x6c>
 9f0:	bb 0f       	add	r27, r27
 9f2:	11 f4       	brne	.+4      	; 0x9f8 <__floatsisf+0x36>
 9f4:	60 ff       	sbrs	r22, 0
 9f6:	1b c0       	rjmp	.+54     	; 0xa2e <__floatsisf+0x6c>
 9f8:	6f 5f       	subi	r22, 0xFF	; 255
 9fa:	7f 4f       	sbci	r23, 0xFF	; 255
 9fc:	8f 4f       	sbci	r24, 0xFF	; 255
 9fe:	9f 4f       	sbci	r25, 0xFF	; 255
 a00:	16 c0       	rjmp	.+44     	; 0xa2e <__floatsisf+0x6c>
 a02:	88 23       	and	r24, r24
 a04:	11 f0       	breq	.+4      	; 0xa0a <__floatsisf+0x48>
 a06:	96 e9       	ldi	r25, 0x96	; 150
 a08:	11 c0       	rjmp	.+34     	; 0xa2c <__floatsisf+0x6a>
 a0a:	77 23       	and	r23, r23
 a0c:	21 f0       	breq	.+8      	; 0xa16 <__floatsisf+0x54>
 a0e:	9e e8       	ldi	r25, 0x8E	; 142
 a10:	87 2f       	mov	r24, r23
 a12:	76 2f       	mov	r23, r22
 a14:	05 c0       	rjmp	.+10     	; 0xa20 <__floatsisf+0x5e>
 a16:	66 23       	and	r22, r22
 a18:	71 f0       	breq	.+28     	; 0xa36 <__floatsisf+0x74>
 a1a:	96 e8       	ldi	r25, 0x86	; 134
 a1c:	86 2f       	mov	r24, r22
 a1e:	70 e0       	ldi	r23, 0x00	; 0
 a20:	60 e0       	ldi	r22, 0x00	; 0
 a22:	2a f0       	brmi	.+10     	; 0xa2e <__floatsisf+0x6c>
 a24:	9a 95       	dec	r25
 a26:	66 0f       	add	r22, r22
 a28:	77 1f       	adc	r23, r23
 a2a:	88 1f       	adc	r24, r24
 a2c:	da f7       	brpl	.-10     	; 0xa24 <__floatsisf+0x62>
 a2e:	88 0f       	add	r24, r24
 a30:	96 95       	lsr	r25
 a32:	87 95       	ror	r24
 a34:	97 f9       	bld	r25, 7
 a36:	08 95       	ret

00000a38 <__fp_inf>:
 a38:	97 f9       	bld	r25, 7
 a3a:	9f 67       	ori	r25, 0x7F	; 127
 a3c:	80 e8       	ldi	r24, 0x80	; 128
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	60 e0       	ldi	r22, 0x00	; 0
 a42:	08 95       	ret

00000a44 <__fp_nan>:
 a44:	9f ef       	ldi	r25, 0xFF	; 255
 a46:	80 ec       	ldi	r24, 0xC0	; 192
 a48:	08 95       	ret

00000a4a <__fp_pscA>:
 a4a:	00 24       	eor	r0, r0
 a4c:	0a 94       	dec	r0
 a4e:	16 16       	cp	r1, r22
 a50:	17 06       	cpc	r1, r23
 a52:	18 06       	cpc	r1, r24
 a54:	09 06       	cpc	r0, r25
 a56:	08 95       	ret

00000a58 <__fp_pscB>:
 a58:	00 24       	eor	r0, r0
 a5a:	0a 94       	dec	r0
 a5c:	12 16       	cp	r1, r18
 a5e:	13 06       	cpc	r1, r19
 a60:	14 06       	cpc	r1, r20
 a62:	05 06       	cpc	r0, r21
 a64:	08 95       	ret

00000a66 <__fp_round>:
 a66:	09 2e       	mov	r0, r25
 a68:	03 94       	inc	r0
 a6a:	00 0c       	add	r0, r0
 a6c:	11 f4       	brne	.+4      	; 0xa72 <__fp_round+0xc>
 a6e:	88 23       	and	r24, r24
 a70:	52 f0       	brmi	.+20     	; 0xa86 <__fp_round+0x20>
 a72:	bb 0f       	add	r27, r27
 a74:	40 f4       	brcc	.+16     	; 0xa86 <__fp_round+0x20>
 a76:	bf 2b       	or	r27, r31
 a78:	11 f4       	brne	.+4      	; 0xa7e <__fp_round+0x18>
 a7a:	60 ff       	sbrs	r22, 0
 a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__fp_round+0x20>
 a7e:	6f 5f       	subi	r22, 0xFF	; 255
 a80:	7f 4f       	sbci	r23, 0xFF	; 255
 a82:	8f 4f       	sbci	r24, 0xFF	; 255
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	08 95       	ret

00000a88 <__fp_split3>:
 a88:	57 fd       	sbrc	r21, 7
 a8a:	90 58       	subi	r25, 0x80	; 128
 a8c:	44 0f       	add	r20, r20
 a8e:	55 1f       	adc	r21, r21
 a90:	59 f0       	breq	.+22     	; 0xaa8 <__fp_splitA+0x10>
 a92:	5f 3f       	cpi	r21, 0xFF	; 255
 a94:	71 f0       	breq	.+28     	; 0xab2 <__fp_splitA+0x1a>
 a96:	47 95       	ror	r20

00000a98 <__fp_splitA>:
 a98:	88 0f       	add	r24, r24
 a9a:	97 fb       	bst	r25, 7
 a9c:	99 1f       	adc	r25, r25
 a9e:	61 f0       	breq	.+24     	; 0xab8 <__fp_splitA+0x20>
 aa0:	9f 3f       	cpi	r25, 0xFF	; 255
 aa2:	79 f0       	breq	.+30     	; 0xac2 <__fp_splitA+0x2a>
 aa4:	87 95       	ror	r24
 aa6:	08 95       	ret
 aa8:	12 16       	cp	r1, r18
 aaa:	13 06       	cpc	r1, r19
 aac:	14 06       	cpc	r1, r20
 aae:	55 1f       	adc	r21, r21
 ab0:	f2 cf       	rjmp	.-28     	; 0xa96 <__fp_split3+0xe>
 ab2:	46 95       	lsr	r20
 ab4:	f1 df       	rcall	.-30     	; 0xa98 <__fp_splitA>
 ab6:	08 c0       	rjmp	.+16     	; 0xac8 <__fp_splitA+0x30>
 ab8:	16 16       	cp	r1, r22
 aba:	17 06       	cpc	r1, r23
 abc:	18 06       	cpc	r1, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	f1 cf       	rjmp	.-30     	; 0xaa4 <__fp_splitA+0xc>
 ac2:	86 95       	lsr	r24
 ac4:	71 05       	cpc	r23, r1
 ac6:	61 05       	cpc	r22, r1
 ac8:	08 94       	sec
 aca:	08 95       	ret

00000acc <__fp_zero>:
 acc:	e8 94       	clt

00000ace <__fp_szero>:
 ace:	bb 27       	eor	r27, r27
 ad0:	66 27       	eor	r22, r22
 ad2:	77 27       	eor	r23, r23
 ad4:	cb 01       	movw	r24, r22
 ad6:	97 f9       	bld	r25, 7
 ad8:	08 95       	ret

00000ada <__mulsf3>:
 ada:	0e 94 80 05 	call	0xb00	; 0xb00 <__mulsf3x>
 ade:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_round>
 ae2:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_pscA>
 ae6:	38 f0       	brcs	.+14     	; 0xaf6 <__mulsf3+0x1c>
 ae8:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_pscB>
 aec:	20 f0       	brcs	.+8      	; 0xaf6 <__mulsf3+0x1c>
 aee:	95 23       	and	r25, r21
 af0:	11 f0       	breq	.+4      	; 0xaf6 <__mulsf3+0x1c>
 af2:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_inf>
 af6:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_nan>
 afa:	11 24       	eor	r1, r1
 afc:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_szero>

00000b00 <__mulsf3x>:
 b00:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_split3>
 b04:	70 f3       	brcs	.-36     	; 0xae2 <__mulsf3+0x8>

00000b06 <__mulsf3_pse>:
 b06:	95 9f       	mul	r25, r21
 b08:	c1 f3       	breq	.-16     	; 0xafa <__mulsf3+0x20>
 b0a:	95 0f       	add	r25, r21
 b0c:	50 e0       	ldi	r21, 0x00	; 0
 b0e:	55 1f       	adc	r21, r21
 b10:	62 9f       	mul	r22, r18
 b12:	f0 01       	movw	r30, r0
 b14:	72 9f       	mul	r23, r18
 b16:	bb 27       	eor	r27, r27
 b18:	f0 0d       	add	r31, r0
 b1a:	b1 1d       	adc	r27, r1
 b1c:	63 9f       	mul	r22, r19
 b1e:	aa 27       	eor	r26, r26
 b20:	f0 0d       	add	r31, r0
 b22:	b1 1d       	adc	r27, r1
 b24:	aa 1f       	adc	r26, r26
 b26:	64 9f       	mul	r22, r20
 b28:	66 27       	eor	r22, r22
 b2a:	b0 0d       	add	r27, r0
 b2c:	a1 1d       	adc	r26, r1
 b2e:	66 1f       	adc	r22, r22
 b30:	82 9f       	mul	r24, r18
 b32:	22 27       	eor	r18, r18
 b34:	b0 0d       	add	r27, r0
 b36:	a1 1d       	adc	r26, r1
 b38:	62 1f       	adc	r22, r18
 b3a:	73 9f       	mul	r23, r19
 b3c:	b0 0d       	add	r27, r0
 b3e:	a1 1d       	adc	r26, r1
 b40:	62 1f       	adc	r22, r18
 b42:	83 9f       	mul	r24, r19
 b44:	a0 0d       	add	r26, r0
 b46:	61 1d       	adc	r22, r1
 b48:	22 1f       	adc	r18, r18
 b4a:	74 9f       	mul	r23, r20
 b4c:	33 27       	eor	r19, r19
 b4e:	a0 0d       	add	r26, r0
 b50:	61 1d       	adc	r22, r1
 b52:	23 1f       	adc	r18, r19
 b54:	84 9f       	mul	r24, r20
 b56:	60 0d       	add	r22, r0
 b58:	21 1d       	adc	r18, r1
 b5a:	82 2f       	mov	r24, r18
 b5c:	76 2f       	mov	r23, r22
 b5e:	6a 2f       	mov	r22, r26
 b60:	11 24       	eor	r1, r1
 b62:	9f 57       	subi	r25, 0x7F	; 127
 b64:	50 40       	sbci	r21, 0x00	; 0
 b66:	9a f0       	brmi	.+38     	; 0xb8e <__mulsf3_pse+0x88>
 b68:	f1 f0       	breq	.+60     	; 0xba6 <__mulsf3_pse+0xa0>
 b6a:	88 23       	and	r24, r24
 b6c:	4a f0       	brmi	.+18     	; 0xb80 <__mulsf3_pse+0x7a>
 b6e:	ee 0f       	add	r30, r30
 b70:	ff 1f       	adc	r31, r31
 b72:	bb 1f       	adc	r27, r27
 b74:	66 1f       	adc	r22, r22
 b76:	77 1f       	adc	r23, r23
 b78:	88 1f       	adc	r24, r24
 b7a:	91 50       	subi	r25, 0x01	; 1
 b7c:	50 40       	sbci	r21, 0x00	; 0
 b7e:	a9 f7       	brne	.-22     	; 0xb6a <__mulsf3_pse+0x64>
 b80:	9e 3f       	cpi	r25, 0xFE	; 254
 b82:	51 05       	cpc	r21, r1
 b84:	80 f0       	brcs	.+32     	; 0xba6 <__mulsf3_pse+0xa0>
 b86:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_inf>
 b8a:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_szero>
 b8e:	5f 3f       	cpi	r21, 0xFF	; 255
 b90:	e4 f3       	brlt	.-8      	; 0xb8a <__mulsf3_pse+0x84>
 b92:	98 3e       	cpi	r25, 0xE8	; 232
 b94:	d4 f3       	brlt	.-12     	; 0xb8a <__mulsf3_pse+0x84>
 b96:	86 95       	lsr	r24
 b98:	77 95       	ror	r23
 b9a:	67 95       	ror	r22
 b9c:	b7 95       	ror	r27
 b9e:	f7 95       	ror	r31
 ba0:	e7 95       	ror	r30
 ba2:	9f 5f       	subi	r25, 0xFF	; 255
 ba4:	c1 f7       	brne	.-16     	; 0xb96 <__mulsf3_pse+0x90>
 ba6:	fe 2b       	or	r31, r30
 ba8:	88 0f       	add	r24, r24
 baa:	91 1d       	adc	r25, r1
 bac:	96 95       	lsr	r25
 bae:	87 95       	ror	r24
 bb0:	97 f9       	bld	r25, 7
 bb2:	08 95       	ret

00000bb4 <atoi>:
 bb4:	fc 01       	movw	r30, r24
 bb6:	88 27       	eor	r24, r24
 bb8:	99 27       	eor	r25, r25
 bba:	e8 94       	clt
 bbc:	21 91       	ld	r18, Z+
 bbe:	20 32       	cpi	r18, 0x20	; 32
 bc0:	e9 f3       	breq	.-6      	; 0xbbc <atoi+0x8>
 bc2:	29 30       	cpi	r18, 0x09	; 9
 bc4:	10 f0       	brcs	.+4      	; 0xbca <atoi+0x16>
 bc6:	2e 30       	cpi	r18, 0x0E	; 14
 bc8:	c8 f3       	brcs	.-14     	; 0xbbc <atoi+0x8>
 bca:	2b 32       	cpi	r18, 0x2B	; 43
 bcc:	41 f0       	breq	.+16     	; 0xbde <atoi+0x2a>
 bce:	2d 32       	cpi	r18, 0x2D	; 45
 bd0:	39 f4       	brne	.+14     	; 0xbe0 <atoi+0x2c>
 bd2:	68 94       	set
 bd4:	04 c0       	rjmp	.+8      	; 0xbde <atoi+0x2a>
 bd6:	0e 94 03 06 	call	0xc06	; 0xc06 <__mulhi_const_10>
 bda:	82 0f       	add	r24, r18
 bdc:	91 1d       	adc	r25, r1
 bde:	21 91       	ld	r18, Z+
 be0:	20 53       	subi	r18, 0x30	; 48
 be2:	2a 30       	cpi	r18, 0x0A	; 10
 be4:	c0 f3       	brcs	.-16     	; 0xbd6 <atoi+0x22>
 be6:	1e f4       	brtc	.+6      	; 0xbee <atoi+0x3a>
 be8:	90 95       	com	r25
 bea:	81 95       	neg	r24
 bec:	9f 4f       	sbci	r25, 0xFF	; 255
 bee:	08 95       	ret

00000bf0 <__itoa_ncheck>:
 bf0:	bb 27       	eor	r27, r27
 bf2:	4a 30       	cpi	r20, 0x0A	; 10
 bf4:	31 f4       	brne	.+12     	; 0xc02 <__itoa_ncheck+0x12>
 bf6:	99 23       	and	r25, r25
 bf8:	22 f4       	brpl	.+8      	; 0xc02 <__itoa_ncheck+0x12>
 bfa:	bd e2       	ldi	r27, 0x2D	; 45
 bfc:	90 95       	com	r25
 bfe:	81 95       	neg	r24
 c00:	9f 4f       	sbci	r25, 0xFF	; 255
 c02:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__utoa_common>

00000c06 <__mulhi_const_10>:
 c06:	7a e0       	ldi	r23, 0x0A	; 10
 c08:	97 9f       	mul	r25, r23
 c0a:	90 2d       	mov	r25, r0
 c0c:	87 9f       	mul	r24, r23
 c0e:	80 2d       	mov	r24, r0
 c10:	91 0d       	add	r25, r1
 c12:	11 24       	eor	r1, r1
 c14:	08 95       	ret

00000c16 <__utoa_ncheck>:
 c16:	bb 27       	eor	r27, r27

00000c18 <__utoa_common>:
 c18:	fb 01       	movw	r30, r22
 c1a:	55 27       	eor	r21, r21
 c1c:	aa 27       	eor	r26, r26
 c1e:	88 0f       	add	r24, r24
 c20:	99 1f       	adc	r25, r25
 c22:	aa 1f       	adc	r26, r26
 c24:	a4 17       	cp	r26, r20
 c26:	10 f0       	brcs	.+4      	; 0xc2c <__utoa_common+0x14>
 c28:	a4 1b       	sub	r26, r20
 c2a:	83 95       	inc	r24
 c2c:	50 51       	subi	r21, 0x10	; 16
 c2e:	b9 f7       	brne	.-18     	; 0xc1e <__utoa_common+0x6>
 c30:	a0 5d       	subi	r26, 0xD0	; 208
 c32:	aa 33       	cpi	r26, 0x3A	; 58
 c34:	08 f0       	brcs	.+2      	; 0xc38 <__utoa_common+0x20>
 c36:	a9 5d       	subi	r26, 0xD9	; 217
 c38:	a1 93       	st	Z+, r26
 c3a:	00 97       	sbiw	r24, 0x00	; 0
 c3c:	79 f7       	brne	.-34     	; 0xc1c <__utoa_common+0x4>
 c3e:	b1 11       	cpse	r27, r1
 c40:	b1 93       	st	Z+, r27
 c42:	11 92       	st	Z+, r1
 c44:	cb 01       	movw	r24, r22
 c46:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <strrev>

00000c4a <strrev>:
 c4a:	dc 01       	movw	r26, r24
 c4c:	fc 01       	movw	r30, r24
 c4e:	67 2f       	mov	r22, r23
 c50:	71 91       	ld	r23, Z+
 c52:	77 23       	and	r23, r23
 c54:	e1 f7       	brne	.-8      	; 0xc4e <strrev+0x4>
 c56:	32 97       	sbiw	r30, 0x02	; 2
 c58:	04 c0       	rjmp	.+8      	; 0xc62 <strrev+0x18>
 c5a:	7c 91       	ld	r23, X
 c5c:	6d 93       	st	X+, r22
 c5e:	70 83       	st	Z, r23
 c60:	62 91       	ld	r22, -Z
 c62:	ae 17       	cp	r26, r30
 c64:	bf 07       	cpc	r27, r31
 c66:	c8 f3       	brcs	.-14     	; 0xc5a <strrev+0x10>
 c68:	08 95       	ret

00000c6a <_exit>:
 c6a:	f8 94       	cli

00000c6c <__stop_program>:
 c6c:	ff cf       	rjmp	.-2      	; 0xc6c <__stop_program>
