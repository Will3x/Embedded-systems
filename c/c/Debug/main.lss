
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000abc  00000b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000abc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  0080013a  0080013a  00000b8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001549  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b11  00000000  00000000  0000228d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa1  00000000  00000000  00002d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00003840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065e  00000000  00000000  00003b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000854  00000000  00000000  0000418a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000049de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_11>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__vector_18>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	91 02       	muls	r25, r17
  6a:	9a 02       	muls	r25, r26
  6c:	a3 02       	muls	r26, r19
  6e:	ad 02       	muls	r26, r29
  70:	b7 02       	muls	r27, r23
  72:	c1 02       	muls	r28, r17
  74:	cb 02       	muls	r28, r27
  76:	df 02       	muls	r29, r31

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ec eb       	ldi	r30, 0xBC	; 188
  8c:	fa e0       	ldi	r31, 0x0A	; 10
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	aa e3       	ldi	r26, 0x3A	; 58
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	a2 37       	cpi	r26, 0x72	; 114
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 58 03 	call	0x6b0	; 0x6b0 <main>
  ae:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <SCH_tasks_G>
  c4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <SCH_tasks_G+0x1>
  c8:	89 2b       	or	r24, r25
  ca:	81 f0       	breq	.+32     	; 0xec <SCH_Add_Task+0x36>
  cc:	ec e3       	ldi	r30, 0x3C	; 60
  ce:	f1 e0       	ldi	r31, 0x01	; 1
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  d4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  d6:	e9 01       	movw	r28, r18
  d8:	a7 81       	ldd	r26, Z+7	; 0x07
  da:	b0 85       	ldd	r27, Z+8	; 0x08
  dc:	2f 5f       	subi	r18, 0xFF	; 255
  de:	3f 4f       	sbci	r19, 0xFF	; 255
  e0:	37 96       	adiw	r30, 0x07	; 7
  e2:	ab 2b       	or	r26, r27
  e4:	b9 f7       	brne	.-18     	; 0xd4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  e6:	85 30       	cpi	r24, 0x05	; 5
  e8:	21 f4       	brne	.+8      	; 0xf2 <SCH_Add_Task+0x3c>
  ea:	15 c0       	rjmp	.+42     	; 0x116 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  f0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  f2:	fe 01       	movw	r30, r28
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	ee 0f       	add	r30, r30
  fa:	ff 1f       	adc	r31, r31
  fc:	ee 0f       	add	r30, r30
  fe:	ff 1f       	adc	r31, r31
 100:	ec 1b       	sub	r30, r28
 102:	fd 0b       	sbc	r31, r29
 104:	e4 5c       	subi	r30, 0xC4	; 196
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	11 83       	std	Z+1, r17	; 0x01
 10a:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
 10c:	73 83       	std	Z+3, r23	; 0x03
 10e:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 110:	55 83       	std	Z+5, r21	; 0x05
 112:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 114:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 120:	27 e0       	ldi	r18, 0x07	; 7
 122:	82 9f       	mul	r24, r18
 124:	c0 01       	movw	r24, r0
 126:	11 24       	eor	r1, r1
 128:	fc 01       	movw	r30, r24
 12a:	e4 5c       	subi	r30, 0xC4	; 196
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	11 82       	std	Z+1, r1	; 0x01
 130:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 132:	13 82       	std	Z+3, r1	; 0x03
 134:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 136:	15 82       	std	Z+5, r1	; 0x05
 138:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 13a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 95       	ret

00000140 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	cc e3       	ldi	r28, 0x3C	; 60
 14c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 14e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	88 23       	and	r24, r24
 154:	79 f0       	breq	.+30     	; 0x174 <SCH_Dispatch_Tasks+0x34>
 156:	e8 81       	ld	r30, Y
 158:	f9 81       	ldd	r31, Y+1	; 0x01
 15a:	30 97       	sbiw	r30, 0x00	; 0
 15c:	59 f0       	breq	.+22     	; 0x174 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 15e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 160:	8e 81       	ldd	r24, Y+6	; 0x06
 162:	81 50       	subi	r24, 0x01	; 1
 164:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 166:	8c 81       	ldd	r24, Y+4	; 0x04
 168:	9d 81       	ldd	r25, Y+5	; 0x05
 16a:	89 2b       	or	r24, r25
 16c:	19 f4       	brne	.+6      	; 0x174 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 16e:	81 2f       	mov	r24, r17
 170:	0e 94 90 00 	call	0x120	; 0x120 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 174:	1f 5f       	subi	r17, 0xFF	; 255
 176:	27 96       	adiw	r28, 0x07	; 7
 178:	15 30       	cpi	r17, 0x05	; 5
 17a:	51 f7       	brne	.-44     	; 0x150 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	ff 90       	pop	r15
 184:	ef 90       	pop	r14
 186:	08 95       	ret

00000188 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 188:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 18a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 18c:	8c 2f       	mov	r24, r28
 18e:	0e 94 90 00 	call	0x120	; 0x120 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 192:	cf 5f       	subi	r28, 0xFF	; 255
 194:	c5 30       	cpi	r28, 0x05	; 5
 196:	d1 f7       	brne	.-12     	; 0x18c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 198:	81 e7       	ldi	r24, 0x71	; 113
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 1a4:	8c e0       	ldi	r24, 0x0C	; 12
 1a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1b4:	78 94       	sei
 1b6:	08 95       	ret

000001b8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	2f 93       	push	r18
 1c4:	3f 93       	push	r19
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
 1d2:	ec e3       	ldi	r30, 0x3C	; 60
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	2f e5       	ldi	r18, 0x5F	; 95
 1d8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1da:	80 81       	ld	r24, Z
 1dc:	91 81       	ldd	r25, Z+1	; 0x01
 1de:	89 2b       	or	r24, r25
 1e0:	91 f0       	breq	.+36     	; 0x206 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1e2:	82 81       	ldd	r24, Z+2	; 0x02
 1e4:	93 81       	ldd	r25, Z+3	; 0x03
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	59 f4       	brne	.+22     	; 0x200 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1ea:	86 81       	ldd	r24, Z+6	; 0x06
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1f0:	84 81       	ldd	r24, Z+4	; 0x04
 1f2:	95 81       	ldd	r25, Z+5	; 0x05
 1f4:	00 97       	sbiw	r24, 0x00	; 0
 1f6:	39 f0       	breq	.+14     	; 0x206 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	93 83       	std	Z+3, r25	; 0x03
 1fc:	82 83       	std	Z+2, r24	; 0x02
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	93 83       	std	Z+3, r25	; 0x03
 204:	82 83       	std	Z+2, r24	; 0x02
 206:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 208:	e2 17       	cp	r30, r18
 20a:	f3 07       	cpc	r31, r19
 20c:	31 f7       	brne	.-52     	; 0x1da <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <USART_receive>:
	afstand_up = 20;
	afstand_down = 5;
}

void check_input(unsigned char data){
	USART_putstring(" jeej functie! ");
 228:	e0 ec       	ldi	r30, 0xC0	; 192
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	88 23       	and	r24, r24
 230:	ec f7       	brge	.-6      	; 0x22c <USART_receive+0x4>
 232:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 236:	08 95       	ret

00000238 <USART_send>:
 238:	e0 ec       	ldi	r30, 0xC0	; 192
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	90 81       	ld	r25, Z
 23e:	95 ff       	sbrs	r25, 5
 240:	fd cf       	rjmp	.-6      	; 0x23c <USART_send+0x4>
 242:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 246:	08 95       	ret

00000248 <USART_putstring>:
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	ec 01       	movw	r28, r24
 24e:	88 81       	ld	r24, Y
 250:	88 23       	and	r24, r24
 252:	31 f0       	breq	.+12     	; 0x260 <USART_putstring+0x18>
 254:	21 96       	adiw	r28, 0x01	; 1
 256:	0e 94 1c 01 	call	0x238	; 0x238 <USART_send>
 25a:	89 91       	ld	r24, Y+
 25c:	81 11       	cpse	r24, r1
 25e:	fb cf       	rjmp	.-10     	; 0x256 <USART_putstring+0xe>
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <read_adc>:
 266:	ec e7       	ldi	r30, 0x7C	; 124
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	90 81       	ld	r25, Z
 26c:	90 7f       	andi	r25, 0xF0	; 240
 26e:	90 83       	st	Z, r25
 270:	90 81       	ld	r25, Z
 272:	89 2b       	or	r24, r25
 274:	80 83       	st	Z, r24
 276:	ea e7       	ldi	r30, 0x7A	; 122
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	80 83       	st	Z, r24
 280:	80 81       	ld	r24, Z
 282:	86 fd       	sbrc	r24, 6
 284:	fd cf       	rjmp	.-6      	; 0x280 <read_adc+0x1a>
 286:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 28a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 28e:	08 95       	ret

00000290 <temperatuur>:
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 24 01 	call	0x248	; 0x248 <USART_putstring>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 33 01 	call	0x266	; 0x266 <read_adc>
 29e:	bc 01       	movw	r22, r24
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 00 04 	call	0x800	; 0x800 <__floatunsisf>
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e8       	ldi	r20, 0x80	; 128
 2ae:	5a e3       	ldi	r21, 0x3A	; 58
 2b0:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 ea       	ldi	r20, 0xA0	; 160
 2ba:	50 e4       	ldi	r21, 0x40	; 64
 2bc:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3>
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	5f e3       	ldi	r21, 0x3F	; 63
 2c8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__subsf3>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	48 ec       	ldi	r20, 0xC8	; 200
 2d2:	52 e4       	ldi	r21, 0x42	; 66
 2d4:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3>
 2d8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 2dc:	dc 01       	movw	r26, r24
 2de:	cb 01       	movw	r24, r22
 2e0:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <adc_value+0x1>
 2e4:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <adc_value>
 2e8:	4a e0       	ldi	r20, 0x0A	; 10
 2ea:	6d e6       	ldi	r22, 0x6D	; 109
 2ec:	71 e0       	ldi	r23, 0x01	; 1
 2ee:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__itoa_ncheck>
 2f2:	8d e6       	ldi	r24, 0x6D	; 109
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 24 01 	call	0x248	; 0x248 <USART_putstring>
 2fa:	84 e1       	ldi	r24, 0x14	; 20
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 24 01 	call	0x248	; 0x248 <USART_putstring>
 302:	08 95       	ret

00000304 <ldr>:
 304:	87 e1       	ldi	r24, 0x17	; 23
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 24 01 	call	0x248	; 0x248 <USART_putstring>
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 33 01 	call	0x266	; 0x266 <read_adc>
 312:	bc 01       	movw	r22, r24
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 00 04 	call	0x800	; 0x800 <__floatunsisf>
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	40 e8       	ldi	r20, 0x80	; 128
 322:	5a e3       	ldi	r21, 0x3A	; 58
 324:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3>
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	48 ec       	ldi	r20, 0xC8	; 200
 32e:	52 e4       	ldi	r21, 0x42	; 66
 330:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3>
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	40 ec       	ldi	r20, 0xC0	; 192
 33a:	5f e3       	ldi	r21, 0x3F	; 63
 33c:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3>
 340:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 344:	dc 01       	movw	r26, r24
 346:	cb 01       	movw	r24, r22
 348:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <adc_value+0x1>
 34c:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <adc_value>
 350:	4a e0       	ldi	r20, 0x0A	; 10
 352:	68 e6       	ldi	r22, 0x68	; 104
 354:	71 e0       	ldi	r23, 0x01	; 1
 356:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__itoa_ncheck>
 35a:	88 e6       	ldi	r24, 0x68	; 104
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 24 01 	call	0x248	; 0x248 <USART_putstring>
 362:	84 e1       	ldi	r24, 0x14	; 20
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 24 01 	call	0x248	; 0x248 <USART_putstring>
 36a:	08 95       	ret

0000036c <afstand>:
 36c:	8e e1       	ldi	r24, 0x1E	; 30
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 24 01 	call	0x248	; 0x248 <USART_putstring>
 374:	5b 9a       	sbi	0x0b, 3	; 11
 376:	85 e3       	ldi	r24, 0x35	; 53
 378:	8a 95       	dec	r24
 37a:	f1 f7       	brne	.-4      	; 0x378 <afstand+0xc>
 37c:	00 00       	nop
 37e:	5b 98       	cbi	0x0b, 3	; 11
 380:	4a 9b       	sbis	0x09, 2	; 9
 382:	fe cf       	rjmp	.-4      	; 0x380 <afstand+0x14>
 384:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 388:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 38c:	4a 99       	sbic	0x09, 2	; 9
 38e:	fe cf       	rjmp	.-4      	; 0x38c <afstand+0x20>
 390:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 394:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 00 04 	call	0x800	; 0x800 <__floatunsisf>
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	40 e8       	ldi	r20, 0x80	; 128
 3a6:	5e e3       	ldi	r21, 0x3E	; 62
 3a8:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3>
 3ac:	0e 94 ca 03 	call	0x794	; 0x794 <__fixsfsi>
 3b0:	dc 01       	movw	r26, r24
 3b2:	cb 01       	movw	r24, r22
 3b4:	4a e0       	ldi	r20, 0x0A	; 10
 3b6:	61 e6       	ldi	r22, 0x61	; 97
 3b8:	71 e0       	ldi	r23, 0x01	; 1
 3ba:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__itoa_ncheck>
 3be:	81 e6       	ldi	r24, 0x61	; 97
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 24 01 	call	0x248	; 0x248 <USART_putstring>
 3c6:	84 e1       	ldi	r24, 0x14	; 20
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 24 01 	call	0x248	; 0x248 <USART_putstring>
 3ce:	08 95       	ret

000003d0 <afstandStil>:
 3d0:	5b 9a       	sbi	0x0b, 3	; 11
 3d2:	85 e3       	ldi	r24, 0x35	; 53
 3d4:	8a 95       	dec	r24
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <afstandStil+0x4>
 3d8:	00 00       	nop
 3da:	5b 98       	cbi	0x0b, 3	; 11
 3dc:	4a 9b       	sbis	0x09, 2	; 9
 3de:	fe cf       	rjmp	.-4      	; 0x3dc <afstandStil+0xc>
 3e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3e8:	4a 99       	sbic	0x09, 2	; 9
 3ea:	fe cf       	rjmp	.-4      	; 0x3e8 <afstandStil+0x18>
 3ec:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3f0:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 00 04 	call	0x800	; 0x800 <__floatunsisf>
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	40 e8       	ldi	r20, 0x80	; 128
 402:	5e e3       	ldi	r21, 0x3E	; 62
 404:	0e 94 8e 04 	call	0x91c	; 0x91c <__mulsf3>
 408:	0e 94 ca 03 	call	0x794	; 0x794 <__fixsfsi>
 40c:	dc 01       	movw	r26, r24
 40e:	cb 01       	movw	r24, r22
 410:	4a e0       	ldi	r20, 0x0A	; 10
 412:	61 e6       	ldi	r22, 0x61	; 97
 414:	71 e0       	ldi	r23, 0x01	; 1
 416:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__itoa_ncheck>
 41a:	08 95       	ret

0000041c <goDown>:
 41c:	81 e6       	ldi	r24, 0x61	; 97
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 01 05 	call	0xa02	; 0xa02 <atoi>
 424:	2a 98       	cbi	0x05, 2	; 5
 426:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 42a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 42e:	28 17       	cp	r18, r24
 430:	39 07       	cpc	r19, r25
 432:	bc f4       	brge	.+46     	; 0x462 <goDown+0x46>
 434:	28 9a       	sbi	0x05, 0	; 5
 436:	2f ef       	ldi	r18, 0xFF	; 255
 438:	81 ee       	ldi	r24, 0xE1	; 225
 43a:	94 e0       	ldi	r25, 0x04	; 4
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <goDown+0x20>
 444:	00 c0       	rjmp	.+0      	; 0x446 <goDown+0x2a>
 446:	00 00       	nop
 448:	29 9a       	sbi	0x05, 1	; 5
 44a:	2f ef       	ldi	r18, 0xFF	; 255
 44c:	81 ee       	ldi	r24, 0xE1	; 225
 44e:	94 e0       	ldi	r25, 0x04	; 4
 450:	21 50       	subi	r18, 0x01	; 1
 452:	80 40       	sbci	r24, 0x00	; 0
 454:	90 40       	sbci	r25, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <goDown+0x34>
 458:	00 c0       	rjmp	.+0      	; 0x45a <goDown+0x3e>
 45a:	00 00       	nop
 45c:	29 98       	cbi	0x05, 1	; 5
 45e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <afstandStil>
 462:	28 9a       	sbi	0x05, 0	; 5
 464:	08 95       	ret

00000466 <goUp>:
 466:	81 e6       	ldi	r24, 0x61	; 97
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 01 05 	call	0xa02	; 0xa02 <atoi>
 46e:	28 98       	cbi	0x05, 0	; 5
 470:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <afstand_up>
 474:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <afstand_up+0x1>
 478:	82 17       	cp	r24, r18
 47a:	93 07       	cpc	r25, r19
 47c:	bc f4       	brge	.+46     	; 0x4ac <goUp+0x46>
 47e:	2a 9a       	sbi	0x05, 2	; 5
 480:	2f ef       	ldi	r18, 0xFF	; 255
 482:	81 ee       	ldi	r24, 0xE1	; 225
 484:	94 e0       	ldi	r25, 0x04	; 4
 486:	21 50       	subi	r18, 0x01	; 1
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	90 40       	sbci	r25, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <goUp+0x20>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <goUp+0x2a>
 490:	00 00       	nop
 492:	29 9a       	sbi	0x05, 1	; 5
 494:	2f ef       	ldi	r18, 0xFF	; 255
 496:	81 ee       	ldi	r24, 0xE1	; 225
 498:	94 e0       	ldi	r25, 0x04	; 4
 49a:	21 50       	subi	r18, 0x01	; 1
 49c:	80 40       	sbci	r24, 0x00	; 0
 49e:	90 40       	sbci	r25, 0x00	; 0
 4a0:	e1 f7       	brne	.-8      	; 0x49a <goUp+0x34>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <goUp+0x3e>
 4a4:	00 00       	nop
 4a6:	29 98       	cbi	0x05, 1	; 5
 4a8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <afstandStil>
 4ac:	2a 9a       	sbi	0x05, 2	; 5
 4ae:	08 95       	ret

000004b0 <manual_uit>:
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 4b8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
 4bc:	84 e1       	ldi	r24, 0x14	; 20
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <afstand_up+0x1>
 4c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <afstand_up>
 4c8:	85 e0       	ldi	r24, 0x05	; 5
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 4d4:	08 95       	ret

000004d6 <newRegel>:
	// USART_receive();
	
}

void newRegel(){
	USART_send('\r');
 4d6:	8d e0       	ldi	r24, 0x0D	; 13
 4d8:	0e 94 1c 01 	call	0x238	; 0x238 <USART_send>
	USART_send('\n');
 4dc:	8a e0       	ldi	r24, 0x0A	; 10
 4de:	0e 94 1c 01 	call	0x238	; 0x238 <USART_send>
 4e2:	08 95       	ret

000004e4 <__vector_18>:
}

ISR ( USART_RX_vect ){
 4e4:	1f 92       	push	r1
 4e6:	0f 92       	push	r0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	0f 92       	push	r0
 4ec:	11 24       	eor	r1, r1
 4ee:	2f 93       	push	r18
 4f0:	3f 93       	push	r19
 4f2:	4f 93       	push	r20
 4f4:	5f 93       	push	r21
 4f6:	6f 93       	push	r22
 4f8:	7f 93       	push	r23
 4fa:	8f 93       	push	r24
 4fc:	9f 93       	push	r25
 4fe:	af 93       	push	r26
 500:	bf 93       	push	r27
 502:	ef 93       	push	r30
 504:	ff 93       	push	r31
	unsigned char ReceivedByte;
	ReceivedByte = UDR0 ; // Fetch the received byte value into the variable " ByteReceived "
 506:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	switch(ReceivedByte){
 50a:	8e 2f       	mov	r24, r30
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	fc 01       	movw	r30, r24
 510:	f1 97       	sbiw	r30, 0x31	; 49
 512:	e8 30       	cpi	r30, 0x08	; 8
 514:	f1 05       	cpc	r31, r1
 516:	08 f0       	brcs	.+2      	; 0x51a <__vector_18+0x36>
 518:	58 c0       	rjmp	.+176    	; 0x5ca <__vector_18+0xe6>
 51a:	ec 5c       	subi	r30, 0xCC	; 204
 51c:	ff 4f       	sbci	r31, 0xFF	; 255
 51e:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__tablejump2__>
		// 1 = rolluik uitrollen
		case '1':
			manual = 1;
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 52a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			goUp();
 52e:	0e 94 33 02 	call	0x466	; 0x466 <goUp>
			return;
 532:	4b c0       	rjmp	.+150    	; 0x5ca <__vector_18+0xe6>
			
		// 2 = rolluik oprollen
		case '2':
			manual = 1;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 53c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			goDown();
 540:	0e 94 0e 02 	call	0x41c	; 0x41c <goDown>
			return;
 544:	42 c0       	rjmp	.+132    	; 0x5ca <__vector_18+0xe6>
			
		// 3 = uitrol temp grens
		case '3':
			manual_uit();
 546:	0e 94 58 02 	call	0x4b0	; 0x4b0 <manual_uit>
			temp_down = USART_receive();
 54a:	0e 94 14 01 	call	0x228	; 0x228 <USART_receive>
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <temp_down+0x1>
 554:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <temp_down>
			return;
 558:	38 c0       	rjmp	.+112    	; 0x5ca <__vector_18+0xe6>
			
		// 4 = uitrol licht grens
		case '4':
			manual_uit();
 55a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <manual_uit>
			licht_down = USART_receive();
 55e:	0e 94 14 01 	call	0x228	; 0x228 <USART_receive>
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <licht_down+0x1>
 568:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <licht_down>
			return;
 56c:	2e c0       	rjmp	.+92     	; 0x5ca <__vector_18+0xe6>
			
		// 5 = oprol temp grens
		case '5':
			manual_uit();
 56e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <manual_uit>
			temp_up = USART_receive();
 572:	0e 94 14 01 	call	0x228	; 0x228 <USART_receive>
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temp_up+0x1>
 57c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temp_up>
			return;
 580:	24 c0       	rjmp	.+72     	; 0x5ca <__vector_18+0xe6>
			
		// 6 = oprol licht grens
		case '6':
			manual_uit();
 582:	0e 94 58 02 	call	0x4b0	; 0x4b0 <manual_uit>
			licht_up = USART_receive();
 586:	0e 94 14 01 	call	0x228	; 0x228 <USART_receive>
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <licht_up+0x1>
 590:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <licht_up>
			return;
 594:	1a c0       	rjmp	.+52     	; 0x5ca <__vector_18+0xe6>
			
		// 7 = uit-/oprol afstand
		case '7':
			manual = 1;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 59e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			int uitoprol = USART_receive();
 5a2:	0e 94 14 01 	call	0x228	; 0x228 <USART_receive>
 5a6:	90 e0       	ldi	r25, 0x00	; 0
			afstand_up = uitoprol;
 5a8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <afstand_up+0x1>
 5ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <afstand_up>
			afstand_down = uitoprol;
 5b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 5b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			goDown();
 5b8:	0e 94 0e 02 	call	0x41c	; 0x41c <goDown>
			return;
 5bc:	06 c0       	rjmp	.+12     	; 0x5ca <__vector_18+0xe6>
			
		// 8 = set manual
		case '8':
			manual = 1;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 5c6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			return;
			
		default:
		return;
	}
 5ca:	ff 91       	pop	r31
 5cc:	ef 91       	pop	r30
 5ce:	bf 91       	pop	r27
 5d0:	af 91       	pop	r26
 5d2:	9f 91       	pop	r25
 5d4:	8f 91       	pop	r24
 5d6:	7f 91       	pop	r23
 5d8:	6f 91       	pop	r22
 5da:	5f 91       	pop	r21
 5dc:	4f 91       	pop	r20
 5de:	3f 91       	pop	r19
 5e0:	2f 91       	pop	r18
 5e2:	0f 90       	pop	r0
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	0f 90       	pop	r0
 5e8:	1f 90       	pop	r1
 5ea:	18 95       	reti

000005ec <init_connectie>:
void init_scheduler();
void init_lampjes();

void init_connectie(){
	// disable U2X mode
	UCSR0A = 0;
 5ec:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// Set frame format: 8data, 2stop bit 
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 5f0:	8e e0       	ldi	r24, 0x0E	; 14
 5f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 5f6:	08 95       	ret

000005f8 <init_USART>:
}

void init_USART(){
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 5f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 5fc:	87 e6       	ldi	r24, 0x67	; 103
 5fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 602:	e1 ec       	ldi	r30, 0xC1	; 193
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	88 e1       	ldi	r24, 0x18	; 24
 608:	80 83       	st	Z, r24
	
	UCSR0C = (3<<UCSZ00);
 60a:	86 e0       	ldi	r24, 0x06	; 6
 60c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	UCSR0B |= (1 << RXCIE0 ); // Enable the USART Recieve Complete interrupt ( USART_RXC )
 610:	80 81       	ld	r24, Z
 612:	80 68       	ori	r24, 0x80	; 128
 614:	80 83       	st	Z, r24
	sei (); // Enable the Global Interrupt Enable flag so that interrupts can be processed
 616:	78 94       	sei
 618:	08 95       	ret

0000061a <init_scheduler>:
}

void init_scheduler()
{
	SCH_Init_T1();
 61a:	0e 94 c4 00 	call	0x188	; 0x188 <SCH_Init_T1>
	//SCH_Add_Task(check_input,0,1); // kan weg straks, interrupt neemt deze op zich
	SCH_Add_Task(temperatuur,1,100);
 61e:	44 e6       	ldi	r20, 0x64	; 100
 620:	50 e0       	ldi	r21, 0x00	; 0
 622:	61 e0       	ldi	r22, 0x01	; 1
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	88 e4       	ldi	r24, 0x48	; 72
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	0e 94 5b 00 	call	0xb6	; 0xb6 <SCH_Add_Task>
	SCH_Add_Task(ldr,2,100);
 62e:	44 e6       	ldi	r20, 0x64	; 100
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	62 e0       	ldi	r22, 0x02	; 2
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	82 e8       	ldi	r24, 0x82	; 130
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	0e 94 5b 00 	call	0xb6	; 0xb6 <SCH_Add_Task>
	SCH_Add_Task(afstand,3,100);
 63e:	44 e6       	ldi	r20, 0x64	; 100
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	63 e0       	ldi	r22, 0x03	; 3
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	86 eb       	ldi	r24, 0xB6	; 182
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	0e 94 5b 00 	call	0xb6	; 0xb6 <SCH_Add_Task>
	//SCH_Add_Task(upDown,4,10);
	SCH_Add_Task(newRegel,6,100);
 64e:	44 e6       	ldi	r20, 0x64	; 100
 650:	50 e0       	ldi	r21, 0x00	; 0
 652:	66 e0       	ldi	r22, 0x06	; 6
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	8b e6       	ldi	r24, 0x6B	; 107
 658:	92 e0       	ldi	r25, 0x02	; 2
 65a:	0e 94 5b 00 	call	0xb6	; 0xb6 <SCH_Add_Task>
	
	SCH_Start();
 65e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SCH_Start>
 662:	08 95       	ret

00000664 <init_adc>:
}

void init_adc(){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
 664:	ea e7       	ldi	r30, 0x7A	; 122
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	80 81       	ld	r24, Z
 66a:	87 60       	ori	r24, 0x07	; 7
 66c:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
 66e:	ac e7       	ldi	r26, 0x7C	; 124
 670:	b0 e0       	ldi	r27, 0x00	; 0
 672:	8c 91       	ld	r24, X
 674:	80 64       	ori	r24, 0x40	; 64
 676:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
 678:	80 81       	ld	r24, Z
 67a:	80 68       	ori	r24, 0x80	; 128
 67c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 67e:	80 81       	ld	r24, Z
 680:	80 64       	ori	r24, 0x40	; 64
 682:	80 83       	st	Z, r24
 684:	08 95       	ret

00000686 <init_dist>:
}

void init_dist(){
	DDRD |= _BV(PD3); // Pin 3 Trigger Output
 686:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~_BV(PD2); // Pin 2 Echo Input
 688:	52 98       	cbi	0x0a, 2	; 10
 68a:	08 95       	ret

0000068c <init_lampjes>:
}

void init_lampjes(){
	DDRB |= _BV(PB0);	// pin0 B = output
 68c:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1);	// pin1 B = output
 68e:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(PB2);	// pin2 B = output
 690:	22 9a       	sbi	0x04, 2	; 4
	
	PORTB = 0; // lampjes uitzetten
 692:	15 b8       	out	0x05, r1	; 5
 694:	08 95       	ret

00000696 <setup>:
		SCH_Dispatch_Tasks();
	}
}

void setup(){
	init_connectie();
 696:	0e 94 f6 02 	call	0x5ec	; 0x5ec <init_connectie>
	init_adc();			// Setup the ADC
 69a:	0e 94 32 03 	call	0x664	; 0x664 <init_adc>
	init_USART();			// Setup the USART
 69e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <init_USART>
	init_dist();
 6a2:	0e 94 43 03 	call	0x686	; 0x686 <init_dist>
	init_scheduler();
 6a6:	0e 94 0d 03 	call	0x61a	; 0x61a <init_scheduler>
	init_lampjes();
 6aa:	0e 94 46 03 	call	0x68c	; 0x68c <init_lampjes>
 6ae:	08 95       	ret

000006b0 <main>:

int main(void);
void setup();

int main(void){
	setup();
 6b0:	0e 94 4b 03 	call	0x696	; 0x696 <setup>
	while(1) {
		SCH_Dispatch_Tasks();
 6b4:	0e 94 a0 00 	call	0x140	; 0x140 <SCH_Dispatch_Tasks>
 6b8:	fd cf       	rjmp	.-6      	; 0x6b4 <main+0x4>

000006ba <__subsf3>:
 6ba:	50 58       	subi	r21, 0x80	; 128

000006bc <__addsf3>:
 6bc:	bb 27       	eor	r27, r27
 6be:	aa 27       	eor	r26, r26
 6c0:	0e 94 75 03 	call	0x6ea	; 0x6ea <__addsf3x>
 6c4:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_round>
 6c8:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_pscA>
 6cc:	38 f0       	brcs	.+14     	; 0x6dc <__addsf3+0x20>
 6ce:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_pscB>
 6d2:	20 f0       	brcs	.+8      	; 0x6dc <__addsf3+0x20>
 6d4:	39 f4       	brne	.+14     	; 0x6e4 <__addsf3+0x28>
 6d6:	9f 3f       	cpi	r25, 0xFF	; 255
 6d8:	19 f4       	brne	.+6      	; 0x6e0 <__addsf3+0x24>
 6da:	26 f4       	brtc	.+8      	; 0x6e4 <__addsf3+0x28>
 6dc:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_nan>
 6e0:	0e f4       	brtc	.+2      	; 0x6e4 <__addsf3+0x28>
 6e2:	e0 95       	com	r30
 6e4:	e7 fb       	bst	r30, 7
 6e6:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>

000006ea <__addsf3x>:
 6ea:	e9 2f       	mov	r30, r25
 6ec:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fp_split3>
 6f0:	58 f3       	brcs	.-42     	; 0x6c8 <__addsf3+0xc>
 6f2:	ba 17       	cp	r27, r26
 6f4:	62 07       	cpc	r22, r18
 6f6:	73 07       	cpc	r23, r19
 6f8:	84 07       	cpc	r24, r20
 6fa:	95 07       	cpc	r25, r21
 6fc:	20 f0       	brcs	.+8      	; 0x706 <__addsf3x+0x1c>
 6fe:	79 f4       	brne	.+30     	; 0x71e <__addsf3x+0x34>
 700:	a6 f5       	brtc	.+104    	; 0x76a <__addsf3x+0x80>
 702:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_zero>
 706:	0e f4       	brtc	.+2      	; 0x70a <__addsf3x+0x20>
 708:	e0 95       	com	r30
 70a:	0b 2e       	mov	r0, r27
 70c:	ba 2f       	mov	r27, r26
 70e:	a0 2d       	mov	r26, r0
 710:	0b 01       	movw	r0, r22
 712:	b9 01       	movw	r22, r18
 714:	90 01       	movw	r18, r0
 716:	0c 01       	movw	r0, r24
 718:	ca 01       	movw	r24, r20
 71a:	a0 01       	movw	r20, r0
 71c:	11 24       	eor	r1, r1
 71e:	ff 27       	eor	r31, r31
 720:	59 1b       	sub	r21, r25
 722:	99 f0       	breq	.+38     	; 0x74a <__addsf3x+0x60>
 724:	59 3f       	cpi	r21, 0xF9	; 249
 726:	50 f4       	brcc	.+20     	; 0x73c <__addsf3x+0x52>
 728:	50 3e       	cpi	r21, 0xE0	; 224
 72a:	68 f1       	brcs	.+90     	; 0x786 <__addsf3x+0x9c>
 72c:	1a 16       	cp	r1, r26
 72e:	f0 40       	sbci	r31, 0x00	; 0
 730:	a2 2f       	mov	r26, r18
 732:	23 2f       	mov	r18, r19
 734:	34 2f       	mov	r19, r20
 736:	44 27       	eor	r20, r20
 738:	58 5f       	subi	r21, 0xF8	; 248
 73a:	f3 cf       	rjmp	.-26     	; 0x722 <__addsf3x+0x38>
 73c:	46 95       	lsr	r20
 73e:	37 95       	ror	r19
 740:	27 95       	ror	r18
 742:	a7 95       	ror	r26
 744:	f0 40       	sbci	r31, 0x00	; 0
 746:	53 95       	inc	r21
 748:	c9 f7       	brne	.-14     	; 0x73c <__addsf3x+0x52>
 74a:	7e f4       	brtc	.+30     	; 0x76a <__addsf3x+0x80>
 74c:	1f 16       	cp	r1, r31
 74e:	ba 0b       	sbc	r27, r26
 750:	62 0b       	sbc	r22, r18
 752:	73 0b       	sbc	r23, r19
 754:	84 0b       	sbc	r24, r20
 756:	ba f0       	brmi	.+46     	; 0x786 <__addsf3x+0x9c>
 758:	91 50       	subi	r25, 0x01	; 1
 75a:	a1 f0       	breq	.+40     	; 0x784 <__addsf3x+0x9a>
 75c:	ff 0f       	add	r31, r31
 75e:	bb 1f       	adc	r27, r27
 760:	66 1f       	adc	r22, r22
 762:	77 1f       	adc	r23, r23
 764:	88 1f       	adc	r24, r24
 766:	c2 f7       	brpl	.-16     	; 0x758 <__addsf3x+0x6e>
 768:	0e c0       	rjmp	.+28     	; 0x786 <__addsf3x+0x9c>
 76a:	ba 0f       	add	r27, r26
 76c:	62 1f       	adc	r22, r18
 76e:	73 1f       	adc	r23, r19
 770:	84 1f       	adc	r24, r20
 772:	48 f4       	brcc	.+18     	; 0x786 <__addsf3x+0x9c>
 774:	87 95       	ror	r24
 776:	77 95       	ror	r23
 778:	67 95       	ror	r22
 77a:	b7 95       	ror	r27
 77c:	f7 95       	ror	r31
 77e:	9e 3f       	cpi	r25, 0xFE	; 254
 780:	08 f0       	brcs	.+2      	; 0x784 <__addsf3x+0x9a>
 782:	b0 cf       	rjmp	.-160    	; 0x6e4 <__addsf3+0x28>
 784:	93 95       	inc	r25
 786:	88 0f       	add	r24, r24
 788:	08 f0       	brcs	.+2      	; 0x78c <__addsf3x+0xa2>
 78a:	99 27       	eor	r25, r25
 78c:	ee 0f       	add	r30, r30
 78e:	97 95       	ror	r25
 790:	87 95       	ror	r24
 792:	08 95       	ret

00000794 <__fixsfsi>:
 794:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 798:	68 94       	set
 79a:	b1 11       	cpse	r27, r1
 79c:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_szero>
 7a0:	08 95       	ret

000007a2 <__fixunssfsi>:
 7a2:	0e 94 6d 04 	call	0x8da	; 0x8da <__fp_splitA>
 7a6:	88 f0       	brcs	.+34     	; 0x7ca <__fixunssfsi+0x28>
 7a8:	9f 57       	subi	r25, 0x7F	; 127
 7aa:	98 f0       	brcs	.+38     	; 0x7d2 <__fixunssfsi+0x30>
 7ac:	b9 2f       	mov	r27, r25
 7ae:	99 27       	eor	r25, r25
 7b0:	b7 51       	subi	r27, 0x17	; 23
 7b2:	b0 f0       	brcs	.+44     	; 0x7e0 <__fixunssfsi+0x3e>
 7b4:	e1 f0       	breq	.+56     	; 0x7ee <__fixunssfsi+0x4c>
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	1a f0       	brmi	.+6      	; 0x7c6 <__fixunssfsi+0x24>
 7c0:	ba 95       	dec	r27
 7c2:	c9 f7       	brne	.-14     	; 0x7b6 <__fixunssfsi+0x14>
 7c4:	14 c0       	rjmp	.+40     	; 0x7ee <__fixunssfsi+0x4c>
 7c6:	b1 30       	cpi	r27, 0x01	; 1
 7c8:	91 f0       	breq	.+36     	; 0x7ee <__fixunssfsi+0x4c>
 7ca:	0e 94 87 04 	call	0x90e	; 0x90e <__fp_zero>
 7ce:	b1 e0       	ldi	r27, 0x01	; 1
 7d0:	08 95       	ret
 7d2:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_zero>
 7d6:	67 2f       	mov	r22, r23
 7d8:	78 2f       	mov	r23, r24
 7da:	88 27       	eor	r24, r24
 7dc:	b8 5f       	subi	r27, 0xF8	; 248
 7de:	39 f0       	breq	.+14     	; 0x7ee <__fixunssfsi+0x4c>
 7e0:	b9 3f       	cpi	r27, 0xF9	; 249
 7e2:	cc f3       	brlt	.-14     	; 0x7d6 <__fixunssfsi+0x34>
 7e4:	86 95       	lsr	r24
 7e6:	77 95       	ror	r23
 7e8:	67 95       	ror	r22
 7ea:	b3 95       	inc	r27
 7ec:	d9 f7       	brne	.-10     	; 0x7e4 <__fixunssfsi+0x42>
 7ee:	3e f4       	brtc	.+14     	; 0x7fe <__fixunssfsi+0x5c>
 7f0:	90 95       	com	r25
 7f2:	80 95       	com	r24
 7f4:	70 95       	com	r23
 7f6:	61 95       	neg	r22
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255
 7fa:	8f 4f       	sbci	r24, 0xFF	; 255
 7fc:	9f 4f       	sbci	r25, 0xFF	; 255
 7fe:	08 95       	ret

00000800 <__floatunsisf>:
 800:	e8 94       	clt
 802:	09 c0       	rjmp	.+18     	; 0x816 <__floatsisf+0x12>

00000804 <__floatsisf>:
 804:	97 fb       	bst	r25, 7
 806:	3e f4       	brtc	.+14     	; 0x816 <__floatsisf+0x12>
 808:	90 95       	com	r25
 80a:	80 95       	com	r24
 80c:	70 95       	com	r23
 80e:	61 95       	neg	r22
 810:	7f 4f       	sbci	r23, 0xFF	; 255
 812:	8f 4f       	sbci	r24, 0xFF	; 255
 814:	9f 4f       	sbci	r25, 0xFF	; 255
 816:	99 23       	and	r25, r25
 818:	a9 f0       	breq	.+42     	; 0x844 <__floatsisf+0x40>
 81a:	f9 2f       	mov	r31, r25
 81c:	96 e9       	ldi	r25, 0x96	; 150
 81e:	bb 27       	eor	r27, r27
 820:	93 95       	inc	r25
 822:	f6 95       	lsr	r31
 824:	87 95       	ror	r24
 826:	77 95       	ror	r23
 828:	67 95       	ror	r22
 82a:	b7 95       	ror	r27
 82c:	f1 11       	cpse	r31, r1
 82e:	f8 cf       	rjmp	.-16     	; 0x820 <__floatsisf+0x1c>
 830:	fa f4       	brpl	.+62     	; 0x870 <__floatsisf+0x6c>
 832:	bb 0f       	add	r27, r27
 834:	11 f4       	brne	.+4      	; 0x83a <__floatsisf+0x36>
 836:	60 ff       	sbrs	r22, 0
 838:	1b c0       	rjmp	.+54     	; 0x870 <__floatsisf+0x6c>
 83a:	6f 5f       	subi	r22, 0xFF	; 255
 83c:	7f 4f       	sbci	r23, 0xFF	; 255
 83e:	8f 4f       	sbci	r24, 0xFF	; 255
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	16 c0       	rjmp	.+44     	; 0x870 <__floatsisf+0x6c>
 844:	88 23       	and	r24, r24
 846:	11 f0       	breq	.+4      	; 0x84c <__floatsisf+0x48>
 848:	96 e9       	ldi	r25, 0x96	; 150
 84a:	11 c0       	rjmp	.+34     	; 0x86e <__floatsisf+0x6a>
 84c:	77 23       	and	r23, r23
 84e:	21 f0       	breq	.+8      	; 0x858 <__floatsisf+0x54>
 850:	9e e8       	ldi	r25, 0x8E	; 142
 852:	87 2f       	mov	r24, r23
 854:	76 2f       	mov	r23, r22
 856:	05 c0       	rjmp	.+10     	; 0x862 <__floatsisf+0x5e>
 858:	66 23       	and	r22, r22
 85a:	71 f0       	breq	.+28     	; 0x878 <__floatsisf+0x74>
 85c:	96 e8       	ldi	r25, 0x86	; 134
 85e:	86 2f       	mov	r24, r22
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	2a f0       	brmi	.+10     	; 0x870 <__floatsisf+0x6c>
 866:	9a 95       	dec	r25
 868:	66 0f       	add	r22, r22
 86a:	77 1f       	adc	r23, r23
 86c:	88 1f       	adc	r24, r24
 86e:	da f7       	brpl	.-10     	; 0x866 <__floatsisf+0x62>
 870:	88 0f       	add	r24, r24
 872:	96 95       	lsr	r25
 874:	87 95       	ror	r24
 876:	97 f9       	bld	r25, 7
 878:	08 95       	ret

0000087a <__fp_inf>:
 87a:	97 f9       	bld	r25, 7
 87c:	9f 67       	ori	r25, 0x7F	; 127
 87e:	80 e8       	ldi	r24, 0x80	; 128
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	08 95       	ret

00000886 <__fp_nan>:
 886:	9f ef       	ldi	r25, 0xFF	; 255
 888:	80 ec       	ldi	r24, 0xC0	; 192
 88a:	08 95       	ret

0000088c <__fp_pscA>:
 88c:	00 24       	eor	r0, r0
 88e:	0a 94       	dec	r0
 890:	16 16       	cp	r1, r22
 892:	17 06       	cpc	r1, r23
 894:	18 06       	cpc	r1, r24
 896:	09 06       	cpc	r0, r25
 898:	08 95       	ret

0000089a <__fp_pscB>:
 89a:	00 24       	eor	r0, r0
 89c:	0a 94       	dec	r0
 89e:	12 16       	cp	r1, r18
 8a0:	13 06       	cpc	r1, r19
 8a2:	14 06       	cpc	r1, r20
 8a4:	05 06       	cpc	r0, r21
 8a6:	08 95       	ret

000008a8 <__fp_round>:
 8a8:	09 2e       	mov	r0, r25
 8aa:	03 94       	inc	r0
 8ac:	00 0c       	add	r0, r0
 8ae:	11 f4       	brne	.+4      	; 0x8b4 <__fp_round+0xc>
 8b0:	88 23       	and	r24, r24
 8b2:	52 f0       	brmi	.+20     	; 0x8c8 <__fp_round+0x20>
 8b4:	bb 0f       	add	r27, r27
 8b6:	40 f4       	brcc	.+16     	; 0x8c8 <__fp_round+0x20>
 8b8:	bf 2b       	or	r27, r31
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <__fp_round+0x18>
 8bc:	60 ff       	sbrs	r22, 0
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <__fp_round+0x20>
 8c0:	6f 5f       	subi	r22, 0xFF	; 255
 8c2:	7f 4f       	sbci	r23, 0xFF	; 255
 8c4:	8f 4f       	sbci	r24, 0xFF	; 255
 8c6:	9f 4f       	sbci	r25, 0xFF	; 255
 8c8:	08 95       	ret

000008ca <__fp_split3>:
 8ca:	57 fd       	sbrc	r21, 7
 8cc:	90 58       	subi	r25, 0x80	; 128
 8ce:	44 0f       	add	r20, r20
 8d0:	55 1f       	adc	r21, r21
 8d2:	59 f0       	breq	.+22     	; 0x8ea <__fp_splitA+0x10>
 8d4:	5f 3f       	cpi	r21, 0xFF	; 255
 8d6:	71 f0       	breq	.+28     	; 0x8f4 <__fp_splitA+0x1a>
 8d8:	47 95       	ror	r20

000008da <__fp_splitA>:
 8da:	88 0f       	add	r24, r24
 8dc:	97 fb       	bst	r25, 7
 8de:	99 1f       	adc	r25, r25
 8e0:	61 f0       	breq	.+24     	; 0x8fa <__fp_splitA+0x20>
 8e2:	9f 3f       	cpi	r25, 0xFF	; 255
 8e4:	79 f0       	breq	.+30     	; 0x904 <__stack+0x5>
 8e6:	87 95       	ror	r24
 8e8:	08 95       	ret
 8ea:	12 16       	cp	r1, r18
 8ec:	13 06       	cpc	r1, r19
 8ee:	14 06       	cpc	r1, r20
 8f0:	55 1f       	adc	r21, r21
 8f2:	f2 cf       	rjmp	.-28     	; 0x8d8 <__fp_split3+0xe>
 8f4:	46 95       	lsr	r20
 8f6:	f1 df       	rcall	.-30     	; 0x8da <__fp_splitA>
 8f8:	08 c0       	rjmp	.+16     	; 0x90a <__stack+0xb>
 8fa:	16 16       	cp	r1, r22
 8fc:	17 06       	cpc	r1, r23
 8fe:	18 06       	cpc	r1, r24
 900:	99 1f       	adc	r25, r25
 902:	f1 cf       	rjmp	.-30     	; 0x8e6 <__fp_splitA+0xc>
 904:	86 95       	lsr	r24
 906:	71 05       	cpc	r23, r1
 908:	61 05       	cpc	r22, r1
 90a:	08 94       	sec
 90c:	08 95       	ret

0000090e <__fp_zero>:
 90e:	e8 94       	clt

00000910 <__fp_szero>:
 910:	bb 27       	eor	r27, r27
 912:	66 27       	eor	r22, r22
 914:	77 27       	eor	r23, r23
 916:	cb 01       	movw	r24, r22
 918:	97 f9       	bld	r25, 7
 91a:	08 95       	ret

0000091c <__mulsf3>:
 91c:	0e 94 a1 04 	call	0x942	; 0x942 <__mulsf3x>
 920:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_round>
 924:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_pscA>
 928:	38 f0       	brcs	.+14     	; 0x938 <__mulsf3+0x1c>
 92a:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_pscB>
 92e:	20 f0       	brcs	.+8      	; 0x938 <__mulsf3+0x1c>
 930:	95 23       	and	r25, r21
 932:	11 f0       	breq	.+4      	; 0x938 <__mulsf3+0x1c>
 934:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>
 938:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_nan>
 93c:	11 24       	eor	r1, r1
 93e:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_szero>

00000942 <__mulsf3x>:
 942:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fp_split3>
 946:	70 f3       	brcs	.-36     	; 0x924 <__mulsf3+0x8>

00000948 <__mulsf3_pse>:
 948:	95 9f       	mul	r25, r21
 94a:	c1 f3       	breq	.-16     	; 0x93c <__mulsf3+0x20>
 94c:	95 0f       	add	r25, r21
 94e:	50 e0       	ldi	r21, 0x00	; 0
 950:	55 1f       	adc	r21, r21
 952:	62 9f       	mul	r22, r18
 954:	f0 01       	movw	r30, r0
 956:	72 9f       	mul	r23, r18
 958:	bb 27       	eor	r27, r27
 95a:	f0 0d       	add	r31, r0
 95c:	b1 1d       	adc	r27, r1
 95e:	63 9f       	mul	r22, r19
 960:	aa 27       	eor	r26, r26
 962:	f0 0d       	add	r31, r0
 964:	b1 1d       	adc	r27, r1
 966:	aa 1f       	adc	r26, r26
 968:	64 9f       	mul	r22, r20
 96a:	66 27       	eor	r22, r22
 96c:	b0 0d       	add	r27, r0
 96e:	a1 1d       	adc	r26, r1
 970:	66 1f       	adc	r22, r22
 972:	82 9f       	mul	r24, r18
 974:	22 27       	eor	r18, r18
 976:	b0 0d       	add	r27, r0
 978:	a1 1d       	adc	r26, r1
 97a:	62 1f       	adc	r22, r18
 97c:	73 9f       	mul	r23, r19
 97e:	b0 0d       	add	r27, r0
 980:	a1 1d       	adc	r26, r1
 982:	62 1f       	adc	r22, r18
 984:	83 9f       	mul	r24, r19
 986:	a0 0d       	add	r26, r0
 988:	61 1d       	adc	r22, r1
 98a:	22 1f       	adc	r18, r18
 98c:	74 9f       	mul	r23, r20
 98e:	33 27       	eor	r19, r19
 990:	a0 0d       	add	r26, r0
 992:	61 1d       	adc	r22, r1
 994:	23 1f       	adc	r18, r19
 996:	84 9f       	mul	r24, r20
 998:	60 0d       	add	r22, r0
 99a:	21 1d       	adc	r18, r1
 99c:	82 2f       	mov	r24, r18
 99e:	76 2f       	mov	r23, r22
 9a0:	6a 2f       	mov	r22, r26
 9a2:	11 24       	eor	r1, r1
 9a4:	9f 57       	subi	r25, 0x7F	; 127
 9a6:	50 40       	sbci	r21, 0x00	; 0
 9a8:	9a f0       	brmi	.+38     	; 0x9d0 <__mulsf3_pse+0x88>
 9aa:	f1 f0       	breq	.+60     	; 0x9e8 <__mulsf3_pse+0xa0>
 9ac:	88 23       	and	r24, r24
 9ae:	4a f0       	brmi	.+18     	; 0x9c2 <__mulsf3_pse+0x7a>
 9b0:	ee 0f       	add	r30, r30
 9b2:	ff 1f       	adc	r31, r31
 9b4:	bb 1f       	adc	r27, r27
 9b6:	66 1f       	adc	r22, r22
 9b8:	77 1f       	adc	r23, r23
 9ba:	88 1f       	adc	r24, r24
 9bc:	91 50       	subi	r25, 0x01	; 1
 9be:	50 40       	sbci	r21, 0x00	; 0
 9c0:	a9 f7       	brne	.-22     	; 0x9ac <__mulsf3_pse+0x64>
 9c2:	9e 3f       	cpi	r25, 0xFE	; 254
 9c4:	51 05       	cpc	r21, r1
 9c6:	80 f0       	brcs	.+32     	; 0x9e8 <__mulsf3_pse+0xa0>
 9c8:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>
 9cc:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_szero>
 9d0:	5f 3f       	cpi	r21, 0xFF	; 255
 9d2:	e4 f3       	brlt	.-8      	; 0x9cc <__mulsf3_pse+0x84>
 9d4:	98 3e       	cpi	r25, 0xE8	; 232
 9d6:	d4 f3       	brlt	.-12     	; 0x9cc <__mulsf3_pse+0x84>
 9d8:	86 95       	lsr	r24
 9da:	77 95       	ror	r23
 9dc:	67 95       	ror	r22
 9de:	b7 95       	ror	r27
 9e0:	f7 95       	ror	r31
 9e2:	e7 95       	ror	r30
 9e4:	9f 5f       	subi	r25, 0xFF	; 255
 9e6:	c1 f7       	brne	.-16     	; 0x9d8 <__mulsf3_pse+0x90>
 9e8:	fe 2b       	or	r31, r30
 9ea:	88 0f       	add	r24, r24
 9ec:	91 1d       	adc	r25, r1
 9ee:	96 95       	lsr	r25
 9f0:	87 95       	ror	r24
 9f2:	97 f9       	bld	r25, 7
 9f4:	08 95       	ret

000009f6 <__tablejump2__>:
 9f6:	ee 0f       	add	r30, r30
 9f8:	ff 1f       	adc	r31, r31
 9fa:	05 90       	lpm	r0, Z+
 9fc:	f4 91       	lpm	r31, Z
 9fe:	e0 2d       	mov	r30, r0
 a00:	09 94       	ijmp

00000a02 <atoi>:
 a02:	fc 01       	movw	r30, r24
 a04:	88 27       	eor	r24, r24
 a06:	99 27       	eor	r25, r25
 a08:	e8 94       	clt
 a0a:	21 91       	ld	r18, Z+
 a0c:	20 32       	cpi	r18, 0x20	; 32
 a0e:	e9 f3       	breq	.-6      	; 0xa0a <atoi+0x8>
 a10:	29 30       	cpi	r18, 0x09	; 9
 a12:	10 f0       	brcs	.+4      	; 0xa18 <atoi+0x16>
 a14:	2e 30       	cpi	r18, 0x0E	; 14
 a16:	c8 f3       	brcs	.-14     	; 0xa0a <atoi+0x8>
 a18:	2b 32       	cpi	r18, 0x2B	; 43
 a1a:	41 f0       	breq	.+16     	; 0xa2c <atoi+0x2a>
 a1c:	2d 32       	cpi	r18, 0x2D	; 45
 a1e:	39 f4       	brne	.+14     	; 0xa2e <atoi+0x2c>
 a20:	68 94       	set
 a22:	04 c0       	rjmp	.+8      	; 0xa2c <atoi+0x2a>
 a24:	0e 94 2a 05 	call	0xa54	; 0xa54 <__mulhi_const_10>
 a28:	82 0f       	add	r24, r18
 a2a:	91 1d       	adc	r25, r1
 a2c:	21 91       	ld	r18, Z+
 a2e:	20 53       	subi	r18, 0x30	; 48
 a30:	2a 30       	cpi	r18, 0x0A	; 10
 a32:	c0 f3       	brcs	.-16     	; 0xa24 <atoi+0x22>
 a34:	1e f4       	brtc	.+6      	; 0xa3c <atoi+0x3a>
 a36:	90 95       	com	r25
 a38:	81 95       	neg	r24
 a3a:	9f 4f       	sbci	r25, 0xFF	; 255
 a3c:	08 95       	ret

00000a3e <__itoa_ncheck>:
 a3e:	bb 27       	eor	r27, r27
 a40:	4a 30       	cpi	r20, 0x0A	; 10
 a42:	31 f4       	brne	.+12     	; 0xa50 <__itoa_ncheck+0x12>
 a44:	99 23       	and	r25, r25
 a46:	22 f4       	brpl	.+8      	; 0xa50 <__itoa_ncheck+0x12>
 a48:	bd e2       	ldi	r27, 0x2D	; 45
 a4a:	90 95       	com	r25
 a4c:	81 95       	neg	r24
 a4e:	9f 4f       	sbci	r25, 0xFF	; 255
 a50:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__utoa_common>

00000a54 <__mulhi_const_10>:
 a54:	7a e0       	ldi	r23, 0x0A	; 10
 a56:	97 9f       	mul	r25, r23
 a58:	90 2d       	mov	r25, r0
 a5a:	87 9f       	mul	r24, r23
 a5c:	80 2d       	mov	r24, r0
 a5e:	91 0d       	add	r25, r1
 a60:	11 24       	eor	r1, r1
 a62:	08 95       	ret

00000a64 <__utoa_ncheck>:
 a64:	bb 27       	eor	r27, r27

00000a66 <__utoa_common>:
 a66:	fb 01       	movw	r30, r22
 a68:	55 27       	eor	r21, r21
 a6a:	aa 27       	eor	r26, r26
 a6c:	88 0f       	add	r24, r24
 a6e:	99 1f       	adc	r25, r25
 a70:	aa 1f       	adc	r26, r26
 a72:	a4 17       	cp	r26, r20
 a74:	10 f0       	brcs	.+4      	; 0xa7a <__utoa_common+0x14>
 a76:	a4 1b       	sub	r26, r20
 a78:	83 95       	inc	r24
 a7a:	50 51       	subi	r21, 0x10	; 16
 a7c:	b9 f7       	brne	.-18     	; 0xa6c <__utoa_common+0x6>
 a7e:	a0 5d       	subi	r26, 0xD0	; 208
 a80:	aa 33       	cpi	r26, 0x3A	; 58
 a82:	08 f0       	brcs	.+2      	; 0xa86 <__utoa_common+0x20>
 a84:	a9 5d       	subi	r26, 0xD9	; 217
 a86:	a1 93       	st	Z+, r26
 a88:	00 97       	sbiw	r24, 0x00	; 0
 a8a:	79 f7       	brne	.-34     	; 0xa6a <__utoa_common+0x4>
 a8c:	b1 11       	cpse	r27, r1
 a8e:	b1 93       	st	Z+, r27
 a90:	11 92       	st	Z+, r1
 a92:	cb 01       	movw	r24, r22
 a94:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <strrev>

00000a98 <strrev>:
 a98:	dc 01       	movw	r26, r24
 a9a:	fc 01       	movw	r30, r24
 a9c:	67 2f       	mov	r22, r23
 a9e:	71 91       	ld	r23, Z+
 aa0:	77 23       	and	r23, r23
 aa2:	e1 f7       	brne	.-8      	; 0xa9c <strrev+0x4>
 aa4:	32 97       	sbiw	r30, 0x02	; 2
 aa6:	04 c0       	rjmp	.+8      	; 0xab0 <strrev+0x18>
 aa8:	7c 91       	ld	r23, X
 aaa:	6d 93       	st	X+, r22
 aac:	70 83       	st	Z, r23
 aae:	62 91       	ld	r22, -Z
 ab0:	ae 17       	cp	r26, r30
 ab2:	bf 07       	cpc	r27, r31
 ab4:	c8 f3       	brcs	.-14     	; 0xaa8 <strrev+0x10>
 ab6:	08 95       	ret

00000ab8 <_exit>:
 ab8:	f8 94       	cli

00000aba <__stop_program>:
 aba:	ff cf       	rjmp	.-2      	; 0xaba <__stop_program>
