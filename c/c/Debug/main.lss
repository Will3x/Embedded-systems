
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000e62  00000ef6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  0080013a  0080013a  00000f30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000203c  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4f  00000000  00000000  0000312c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de1  00000000  00000000  00003c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00004a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000666  00000000  00000000  00004d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015ce  00000000  00000000  000053be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000698c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 37       	cpi	r26, 0x72	; 114
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 31 05 	call	0xa62	; 0xa62 <main>
  9e:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <SCH_tasks_G>
  b4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	ec e3       	ldi	r30, 0x3C	; 60
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e4 5c       	subi	r30, 0xC4	; 196
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e4 5c       	subi	r30, 0xC4	; 196
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cc e3       	ldi	r28, 0x3C	; 60
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	ec e3       	ldi	r30, 0x3C	; 60
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	2f e5       	ldi	r18, 0x5F	; 95
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_receive>:
	USART_send('\n');
}

int unsigned combine(unsigned x, unsigned y){
	return x * 10 + y;
}
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <USART_receive+0x4>
 222:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 226:	08 95       	ret

00000228 <USART_send>:
 228:	e0 ec       	ldi	r30, 0xC0	; 192
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	90 81       	ld	r25, Z
 22e:	95 ff       	sbrs	r25, 5
 230:	fd cf       	rjmp	.-6      	; 0x22c <USART_send+0x4>
 232:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 236:	08 95       	ret

00000238 <USART_putstring>:
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <USART_putstring+0x18>
 244:	21 96       	adiw	r28, 0x01	; 1
 246:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 24a:	89 91       	ld	r24, Y+
 24c:	81 11       	cpse	r24, r1
 24e:	fb cf       	rjmp	.-10     	; 0x246 <USART_putstring+0xe>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <read_adc>:
 256:	ec e7       	ldi	r30, 0x7C	; 124
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	90 81       	ld	r25, Z
 25c:	90 7f       	andi	r25, 0xF0	; 240
 25e:	90 83       	st	Z, r25
 260:	90 81       	ld	r25, Z
 262:	89 2b       	or	r24, r25
 264:	80 83       	st	Z, r24
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	80 83       	st	Z, r24
 270:	80 81       	ld	r24, Z
 272:	86 fd       	sbrc	r24, 6
 274:	fd cf       	rjmp	.-6      	; 0x270 <read_adc+0x1a>
 276:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 27a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 27e:	08 95       	ret

00000280 <temperatuur>:
 280:	8c e0       	ldi	r24, 0x0C	; 12
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 2b 01 	call	0x256	; 0x256 <read_adc>
 28e:	bc 01       	movw	r22, r24
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__floatunsisf>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e8       	ldi	r20, 0x80	; 128
 29e:	5a e3       	ldi	r21, 0x3A	; 58
 2a0:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 ea       	ldi	r20, 0xA0	; 160
 2aa:	50 e4       	ldi	r21, 0x40	; 64
 2ac:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	5f e3       	ldi	r21, 0x3F	; 63
 2b8:	0e 94 36 05 	call	0xa6c	; 0xa6c <__subsf3>
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	48 ec       	ldi	r20, 0xC8	; 200
 2c2:	52 e4       	ldi	r21, 0x42	; 66
 2c4:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
 2c8:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fixunssfsi>
 2cc:	dc 01       	movw	r26, r24
 2ce:	cb 01       	movw	r24, r22
 2d0:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <adc_value+0x1>
 2d4:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <adc_value>
 2d8:	4a e0       	ldi	r20, 0x0A	; 10
 2da:	6d e6       	ldi	r22, 0x6D	; 109
 2dc:	71 e0       	ldi	r23, 0x01	; 1
 2de:	0e 94 f2 06 	call	0xde4	; 0xde4 <__itoa_ncheck>
 2e2:	8d e6       	ldi	r24, 0x6D	; 109
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 2ea:	84 e1       	ldi	r24, 0x14	; 20
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 2f2:	08 95       	ret

000002f4 <ldr>:
 2f4:	87 e1       	ldi	r24, 0x17	; 23
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 2b 01 	call	0x256	; 0x256 <read_adc>
 302:	bc 01       	movw	r22, r24
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__floatunsisf>
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	40 e8       	ldi	r20, 0x80	; 128
 312:	5a e3       	ldi	r21, 0x3A	; 58
 314:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	48 ec       	ldi	r20, 0xC8	; 200
 31e:	52 e4       	ldi	r21, 0x42	; 66
 320:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 ec       	ldi	r20, 0xC0	; 192
 32a:	5f e3       	ldi	r21, 0x3F	; 63
 32c:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
 330:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fixunssfsi>
 334:	dc 01       	movw	r26, r24
 336:	cb 01       	movw	r24, r22
 338:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <adc_value+0x1>
 33c:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <adc_value>
 340:	4a e0       	ldi	r20, 0x0A	; 10
 342:	68 e6       	ldi	r22, 0x68	; 104
 344:	71 e0       	ldi	r23, 0x01	; 1
 346:	0e 94 f2 06 	call	0xde4	; 0xde4 <__itoa_ncheck>
 34a:	88 e6       	ldi	r24, 0x68	; 104
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 352:	84 e1       	ldi	r24, 0x14	; 20
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 35a:	08 95       	ret

0000035c <afstand>:
 35c:	8e e1       	ldi	r24, 0x1E	; 30
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 364:	5b 9a       	sbi	0x0b, 3	; 11
 366:	85 e3       	ldi	r24, 0x35	; 53
 368:	8a 95       	dec	r24
 36a:	f1 f7       	brne	.-4      	; 0x368 <afstand+0xc>
 36c:	00 00       	nop
 36e:	5b 98       	cbi	0x0b, 3	; 11
 370:	4a 9b       	sbis	0x09, 2	; 9
 372:	fe cf       	rjmp	.-4      	; 0x370 <afstand+0x14>
 374:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 378:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 37c:	4a 99       	sbic	0x09, 2	; 9
 37e:	fe cf       	rjmp	.-4      	; 0x37c <afstand+0x20>
 380:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 384:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__floatunsisf>
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	40 e8       	ldi	r20, 0x80	; 128
 396:	5e e3       	ldi	r21, 0x3E	; 62
 398:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
 39c:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fixsfsi>
 3a0:	dc 01       	movw	r26, r24
 3a2:	cb 01       	movw	r24, r22
 3a4:	4a e0       	ldi	r20, 0x0A	; 10
 3a6:	61 e6       	ldi	r22, 0x61	; 97
 3a8:	71 e0       	ldi	r23, 0x01	; 1
 3aa:	0e 94 f2 06 	call	0xde4	; 0xde4 <__itoa_ncheck>
 3ae:	81 e6       	ldi	r24, 0x61	; 97
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 3b6:	84 e1       	ldi	r24, 0x14	; 20
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 3be:	08 95       	ret

000003c0 <afstandStil>:
 3c0:	5b 9a       	sbi	0x0b, 3	; 11
 3c2:	85 e3       	ldi	r24, 0x35	; 53
 3c4:	8a 95       	dec	r24
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <afstandStil+0x4>
 3c8:	00 00       	nop
 3ca:	5b 98       	cbi	0x0b, 3	; 11
 3cc:	4a 9b       	sbis	0x09, 2	; 9
 3ce:	fe cf       	rjmp	.-4      	; 0x3cc <afstandStil+0xc>
 3d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3d8:	4a 99       	sbic	0x09, 2	; 9
 3da:	fe cf       	rjmp	.-4      	; 0x3d8 <afstandStil+0x18>
 3dc:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3e0:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__floatunsisf>
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	40 e8       	ldi	r20, 0x80	; 128
 3f2:	5e e3       	ldi	r21, 0x3E	; 62
 3f4:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
 3f8:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fixsfsi>
 3fc:	dc 01       	movw	r26, r24
 3fe:	cb 01       	movw	r24, r22
 400:	4a e0       	ldi	r20, 0x0A	; 10
 402:	61 e6       	ldi	r22, 0x61	; 97
 404:	71 e0       	ldi	r23, 0x01	; 1
 406:	0e 94 f2 06 	call	0xde4	; 0xde4 <__itoa_ncheck>
 40a:	08 95       	ret

0000040c <goDown>:
 40c:	81 e6       	ldi	r24, 0x61	; 97
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 d4 06 	call	0xda8	; 0xda8 <atoi>
 414:	2a 98       	cbi	0x05, 2	; 5
 416:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 41a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 41e:	28 17       	cp	r18, r24
 420:	39 07       	cpc	r19, r25
 422:	bc f4       	brge	.+46     	; 0x452 <goDown+0x46>
 424:	28 9a       	sbi	0x05, 0	; 5
 426:	2f ef       	ldi	r18, 0xFF	; 255
 428:	81 ee       	ldi	r24, 0xE1	; 225
 42a:	94 e0       	ldi	r25, 0x04	; 4
 42c:	21 50       	subi	r18, 0x01	; 1
 42e:	80 40       	sbci	r24, 0x00	; 0
 430:	90 40       	sbci	r25, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <goDown+0x20>
 434:	00 c0       	rjmp	.+0      	; 0x436 <goDown+0x2a>
 436:	00 00       	nop
 438:	29 9a       	sbi	0x05, 1	; 5
 43a:	2f ef       	ldi	r18, 0xFF	; 255
 43c:	81 ee       	ldi	r24, 0xE1	; 225
 43e:	94 e0       	ldi	r25, 0x04	; 4
 440:	21 50       	subi	r18, 0x01	; 1
 442:	80 40       	sbci	r24, 0x00	; 0
 444:	90 40       	sbci	r25, 0x00	; 0
 446:	e1 f7       	brne	.-8      	; 0x440 <goDown+0x34>
 448:	00 c0       	rjmp	.+0      	; 0x44a <goDown+0x3e>
 44a:	00 00       	nop
 44c:	29 98       	cbi	0x05, 1	; 5
 44e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <afstandStil>
 452:	28 9a       	sbi	0x05, 0	; 5
 454:	08 95       	ret

00000456 <goUp>:
 456:	81 e6       	ldi	r24, 0x61	; 97
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	0e 94 d4 06 	call	0xda8	; 0xda8 <atoi>
 45e:	28 98       	cbi	0x05, 0	; 5
 460:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <afstand_up>
 464:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <afstand_up+0x1>
 468:	82 17       	cp	r24, r18
 46a:	93 07       	cpc	r25, r19
 46c:	bc f4       	brge	.+46     	; 0x49c <goUp+0x46>
 46e:	2a 9a       	sbi	0x05, 2	; 5
 470:	2f ef       	ldi	r18, 0xFF	; 255
 472:	81 ee       	ldi	r24, 0xE1	; 225
 474:	94 e0       	ldi	r25, 0x04	; 4
 476:	21 50       	subi	r18, 0x01	; 1
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <goUp+0x20>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <goUp+0x2a>
 480:	00 00       	nop
 482:	29 9a       	sbi	0x05, 1	; 5
 484:	2f ef       	ldi	r18, 0xFF	; 255
 486:	81 ee       	ldi	r24, 0xE1	; 225
 488:	94 e0       	ldi	r25, 0x04	; 4
 48a:	21 50       	subi	r18, 0x01	; 1
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	90 40       	sbci	r25, 0x00	; 0
 490:	e1 f7       	brne	.-8      	; 0x48a <goUp+0x34>
 492:	00 c0       	rjmp	.+0      	; 0x494 <goUp+0x3e>
 494:	00 00       	nop
 496:	29 98       	cbi	0x05, 1	; 5
 498:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <afstandStil>
 49c:	2a 9a       	sbi	0x05, 2	; 5
 49e:	08 95       	ret

000004a0 <manual_uit>:
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 4a8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
 4ac:	84 e1       	ldi	r24, 0x14	; 20
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <afstand_up+0x1>
 4b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <afstand_up>
 4b8:	85 e0       	ldi	r24, 0x05	; 5
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 4c4:	08 95       	ret

000004c6 <newRegel>:
 4c6:	8d e0       	ldi	r24, 0x0D	; 13
 4c8:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 4cc:	8a e0       	ldi	r24, 0x0A	; 10
 4ce:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 4d2:	08 95       	ret

000004d4 <__vector_18>:
ISR ( USART_RX_vect ){
 4d4:	1f 92       	push	r1
 4d6:	0f 92       	push	r0
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	0f 92       	push	r0
 4dc:	11 24       	eor	r1, r1
 4de:	2f 93       	push	r18
 4e0:	3f 93       	push	r19
 4e2:	4f 93       	push	r20
 4e4:	5f 93       	push	r21
 4e6:	6f 93       	push	r22
 4e8:	7f 93       	push	r23
 4ea:	8f 93       	push	r24
 4ec:	9f 93       	push	r25
 4ee:	af 93       	push	r26
 4f0:	bf 93       	push	r27
 4f2:	ef 93       	push	r30
 4f4:	ff 93       	push	r31
	unsigned char ReceivedByte;
	ReceivedByte = UDR0 ; // Fetch the received byte value into the variable " ByteReceived "
 4f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	switch(ReceivedByte){
 4fa:	83 33       	cpi	r24, 0x33	; 51
 4fc:	f9 f0       	breq	.+62     	; 0x53c <__vector_18+0x68>
 4fe:	28 f4       	brcc	.+10     	; 0x50a <__vector_18+0x36>
 500:	81 33       	cpi	r24, 0x31	; 49
 502:	51 f0       	breq	.+20     	; 0x518 <__vector_18+0x44>
 504:	82 33       	cpi	r24, 0x32	; 50
 506:	89 f0       	breq	.+34     	; 0x52a <__vector_18+0x56>
 508:	39 c2       	rjmp	.+1138   	; 0x97c <__stack+0x7d>
 50a:	87 33       	cpi	r24, 0x37	; 55
 50c:	09 f4       	brne	.+2      	; 0x510 <__vector_18+0x3c>
 50e:	1c c2       	rjmp	.+1080   	; 0x948 <__stack+0x49>
 510:	88 33       	cpi	r24, 0x38	; 56
 512:	09 f4       	brne	.+2      	; 0x516 <__vector_18+0x42>
 514:	2d c2       	rjmp	.+1114   	; 0x970 <__stack+0x71>
 516:	32 c2       	rjmp	.+1124   	; 0x97c <__stack+0x7d>
		// 1 = rolluik UITrollen // Rood
		case '1':
			manual = 1;
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 520:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			goDown();
 524:	0e 94 06 02 	call	0x40c	; 0x40c <goDown>
			return;
 528:	29 c2       	rjmp	.+1106   	; 0x97c <__stack+0x7d>
			
		// 2 = rolluik OProllen // Groen
		case '2':
			manual = 1;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 532:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			goUp();
 536:	0e 94 2b 02 	call	0x456	; 0x456 <goUp>
			return;
 53a:	20 c2       	rjmp	.+1088   	; 0x97c <__stack+0x7d>
			
		// 3 = set
		case '3':
			manual_uit();
 53c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <manual_uit>
			temp_down = (int)USART_receive();
 540:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temp_down+0x1>
 54a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temp_down>
			temp_up = (int)USART_receive();
 54e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <temp_up+0x1>
 558:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <temp_up>
			licht_down = (int)USART_receive();
 55c:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <licht_down+0x1>
 566:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <licht_down>
			licht_up = (int)USART_receive();
 56a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <licht_up+0x1>
 574:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <licht_up>
			
			if (temp_up == 48){
 578:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <temp_up>
 57c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <temp_up+0x1>
 580:	c0 97       	sbiw	r24, 0x30	; 48
 582:	09 f0       	breq	.+2      	; 0x586 <__vector_18+0xb2>
 584:	fb c1       	rjmp	.+1014   	; 0x97c <__stack+0x7d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 586:	2f ef       	ldi	r18, 0xFF	; 255
 588:	81 ee       	ldi	r24, 0xE1	; 225
 58a:	94 e0       	ldi	r25, 0x04	; 4
 58c:	21 50       	subi	r18, 0x01	; 1
 58e:	80 40       	sbci	r24, 0x00	; 0
 590:	90 40       	sbci	r25, 0x00	; 0
 592:	e1 f7       	brne	.-8      	; 0x58c <__vector_18+0xb8>
 594:	00 c0       	rjmp	.+0      	; 0x596 <__vector_18+0xc2>
 596:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 598:	29 9a       	sbi	0x05, 1	; 5
 59a:	2f ef       	ldi	r18, 0xFF	; 255
 59c:	81 ee       	ldi	r24, 0xE1	; 225
 59e:	94 e0       	ldi	r25, 0x04	; 4
 5a0:	21 50       	subi	r18, 0x01	; 1
 5a2:	80 40       	sbci	r24, 0x00	; 0
 5a4:	90 40       	sbci	r25, 0x00	; 0
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <__vector_18+0xcc>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <__vector_18+0xd6>
 5aa:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 5ac:	29 98       	cbi	0x05, 1	; 5
 5ae:	2f ef       	ldi	r18, 0xFF	; 255
 5b0:	81 ee       	ldi	r24, 0xE1	; 225
 5b2:	94 e0       	ldi	r25, 0x04	; 4
 5b4:	21 50       	subi	r18, 0x01	; 1
 5b6:	80 40       	sbci	r24, 0x00	; 0
 5b8:	90 40       	sbci	r25, 0x00	; 0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <__vector_18+0xe0>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <__vector_18+0xea>
 5be:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 5c0:	29 9a       	sbi	0x05, 1	; 5
 5c2:	2f ef       	ldi	r18, 0xFF	; 255
 5c4:	81 ee       	ldi	r24, 0xE1	; 225
 5c6:	94 e0       	ldi	r25, 0x04	; 4
 5c8:	21 50       	subi	r18, 0x01	; 1
 5ca:	80 40       	sbci	r24, 0x00	; 0
 5cc:	90 40       	sbci	r25, 0x00	; 0
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <__vector_18+0xf4>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <__vector_18+0xfe>
 5d2:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 5d4:	29 98       	cbi	0x05, 1	; 5
 5d6:	2f ef       	ldi	r18, 0xFF	; 255
 5d8:	81 ee       	ldi	r24, 0xE1	; 225
 5da:	94 e0       	ldi	r25, 0x04	; 4
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	90 40       	sbci	r25, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <__vector_18+0x108>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <__vector_18+0x112>
 5e6:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 5e8:	29 9a       	sbi	0x05, 1	; 5
 5ea:	2f ef       	ldi	r18, 0xFF	; 255
 5ec:	81 ee       	ldi	r24, 0xE1	; 225
 5ee:	94 e0       	ldi	r25, 0x04	; 4
 5f0:	21 50       	subi	r18, 0x01	; 1
 5f2:	80 40       	sbci	r24, 0x00	; 0
 5f4:	90 40       	sbci	r25, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <__vector_18+0x11c>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <__vector_18+0x126>
 5fa:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 5fc:	29 98       	cbi	0x05, 1	; 5
 5fe:	2f ef       	ldi	r18, 0xFF	; 255
 600:	81 ee       	ldi	r24, 0xE1	; 225
 602:	94 e0       	ldi	r25, 0x04	; 4
 604:	21 50       	subi	r18, 0x01	; 1
 606:	80 40       	sbci	r24, 0x00	; 0
 608:	90 40       	sbci	r25, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <__vector_18+0x130>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <__vector_18+0x13a>
 60e:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 610:	29 9a       	sbi	0x05, 1	; 5
 612:	2f ef       	ldi	r18, 0xFF	; 255
 614:	81 ee       	ldi	r24, 0xE1	; 225
 616:	94 e0       	ldi	r25, 0x04	; 4
 618:	21 50       	subi	r18, 0x01	; 1
 61a:	80 40       	sbci	r24, 0x00	; 0
 61c:	90 40       	sbci	r25, 0x00	; 0
 61e:	e1 f7       	brne	.-8      	; 0x618 <__vector_18+0x144>
 620:	00 c0       	rjmp	.+0      	; 0x622 <__vector_18+0x14e>
 622:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 624:	29 98       	cbi	0x05, 1	; 5
 626:	2f ef       	ldi	r18, 0xFF	; 255
 628:	81 ee       	ldi	r24, 0xE1	; 225
 62a:	94 e0       	ldi	r25, 0x04	; 4
 62c:	21 50       	subi	r18, 0x01	; 1
 62e:	80 40       	sbci	r24, 0x00	; 0
 630:	90 40       	sbci	r25, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <__vector_18+0x158>
 634:	00 c0       	rjmp	.+0      	; 0x636 <__vector_18+0x162>
 636:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 638:	29 9a       	sbi	0x05, 1	; 5
 63a:	2f ef       	ldi	r18, 0xFF	; 255
 63c:	81 ee       	ldi	r24, 0xE1	; 225
 63e:	94 e0       	ldi	r25, 0x04	; 4
 640:	21 50       	subi	r18, 0x01	; 1
 642:	80 40       	sbci	r24, 0x00	; 0
 644:	90 40       	sbci	r25, 0x00	; 0
 646:	e1 f7       	brne	.-8      	; 0x640 <__vector_18+0x16c>
 648:	00 c0       	rjmp	.+0      	; 0x64a <__vector_18+0x176>
 64a:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 64c:	29 98       	cbi	0x05, 1	; 5
 64e:	2f ef       	ldi	r18, 0xFF	; 255
 650:	81 ee       	ldi	r24, 0xE1	; 225
 652:	94 e0       	ldi	r25, 0x04	; 4
 654:	21 50       	subi	r18, 0x01	; 1
 656:	80 40       	sbci	r24, 0x00	; 0
 658:	90 40       	sbci	r25, 0x00	; 0
 65a:	e1 f7       	brne	.-8      	; 0x654 <__vector_18+0x180>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <__vector_18+0x18a>
 65e:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 660:	29 9a       	sbi	0x05, 1	; 5
 662:	2f ef       	ldi	r18, 0xFF	; 255
 664:	81 ee       	ldi	r24, 0xE1	; 225
 666:	94 e0       	ldi	r25, 0x04	; 4
 668:	21 50       	subi	r18, 0x01	; 1
 66a:	80 40       	sbci	r24, 0x00	; 0
 66c:	90 40       	sbci	r25, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <__vector_18+0x194>
 670:	00 c0       	rjmp	.+0      	; 0x672 <__vector_18+0x19e>
 672:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 674:	29 98       	cbi	0x05, 1	; 5
 676:	2f ef       	ldi	r18, 0xFF	; 255
 678:	81 ee       	ldi	r24, 0xE1	; 225
 67a:	94 e0       	ldi	r25, 0x04	; 4
 67c:	21 50       	subi	r18, 0x01	; 1
 67e:	80 40       	sbci	r24, 0x00	; 0
 680:	90 40       	sbci	r25, 0x00	; 0
 682:	e1 f7       	brne	.-8      	; 0x67c <__vector_18+0x1a8>
 684:	00 c0       	rjmp	.+0      	; 0x686 <__vector_18+0x1b2>
 686:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 688:	29 9a       	sbi	0x05, 1	; 5
 68a:	2f ef       	ldi	r18, 0xFF	; 255
 68c:	81 ee       	ldi	r24, 0xE1	; 225
 68e:	94 e0       	ldi	r25, 0x04	; 4
 690:	21 50       	subi	r18, 0x01	; 1
 692:	80 40       	sbci	r24, 0x00	; 0
 694:	90 40       	sbci	r25, 0x00	; 0
 696:	e1 f7       	brne	.-8      	; 0x690 <__vector_18+0x1bc>
 698:	00 c0       	rjmp	.+0      	; 0x69a <__vector_18+0x1c6>
 69a:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 69c:	29 98       	cbi	0x05, 1	; 5
 69e:	2f ef       	ldi	r18, 0xFF	; 255
 6a0:	81 ee       	ldi	r24, 0xE1	; 225
 6a2:	94 e0       	ldi	r25, 0x04	; 4
 6a4:	21 50       	subi	r18, 0x01	; 1
 6a6:	80 40       	sbci	r24, 0x00	; 0
 6a8:	90 40       	sbci	r25, 0x00	; 0
 6aa:	e1 f7       	brne	.-8      	; 0x6a4 <__vector_18+0x1d0>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <__vector_18+0x1da>
 6ae:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 6b0:	29 9a       	sbi	0x05, 1	; 5
 6b2:	2f ef       	ldi	r18, 0xFF	; 255
 6b4:	81 ee       	ldi	r24, 0xE1	; 225
 6b6:	94 e0       	ldi	r25, 0x04	; 4
 6b8:	21 50       	subi	r18, 0x01	; 1
 6ba:	80 40       	sbci	r24, 0x00	; 0
 6bc:	90 40       	sbci	r25, 0x00	; 0
 6be:	e1 f7       	brne	.-8      	; 0x6b8 <__vector_18+0x1e4>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <__vector_18+0x1ee>
 6c2:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 6c4:	29 98       	cbi	0x05, 1	; 5
 6c6:	2f ef       	ldi	r18, 0xFF	; 255
 6c8:	81 ee       	ldi	r24, 0xE1	; 225
 6ca:	94 e0       	ldi	r25, 0x04	; 4
 6cc:	21 50       	subi	r18, 0x01	; 1
 6ce:	80 40       	sbci	r24, 0x00	; 0
 6d0:	90 40       	sbci	r25, 0x00	; 0
 6d2:	e1 f7       	brne	.-8      	; 0x6cc <__vector_18+0x1f8>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <__vector_18+0x202>
 6d6:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 6d8:	29 9a       	sbi	0x05, 1	; 5
 6da:	2f ef       	ldi	r18, 0xFF	; 255
 6dc:	81 ee       	ldi	r24, 0xE1	; 225
 6de:	94 e0       	ldi	r25, 0x04	; 4
 6e0:	21 50       	subi	r18, 0x01	; 1
 6e2:	80 40       	sbci	r24, 0x00	; 0
 6e4:	90 40       	sbci	r25, 0x00	; 0
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <__vector_18+0x20c>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <__vector_18+0x216>
 6ea:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 6ec:	29 98       	cbi	0x05, 1	; 5
 6ee:	2f ef       	ldi	r18, 0xFF	; 255
 6f0:	81 ee       	ldi	r24, 0xE1	; 225
 6f2:	94 e0       	ldi	r25, 0x04	; 4
 6f4:	21 50       	subi	r18, 0x01	; 1
 6f6:	80 40       	sbci	r24, 0x00	; 0
 6f8:	90 40       	sbci	r25, 0x00	; 0
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <__vector_18+0x220>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <__vector_18+0x22a>
 6fe:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 700:	29 9a       	sbi	0x05, 1	; 5
 702:	2f ef       	ldi	r18, 0xFF	; 255
 704:	81 ee       	ldi	r24, 0xE1	; 225
 706:	94 e0       	ldi	r25, 0x04	; 4
 708:	21 50       	subi	r18, 0x01	; 1
 70a:	80 40       	sbci	r24, 0x00	; 0
 70c:	90 40       	sbci	r25, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <__vector_18+0x234>
 710:	00 c0       	rjmp	.+0      	; 0x712 <__vector_18+0x23e>
 712:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 714:	29 98       	cbi	0x05, 1	; 5
 716:	2f ef       	ldi	r18, 0xFF	; 255
 718:	81 ee       	ldi	r24, 0xE1	; 225
 71a:	94 e0       	ldi	r25, 0x04	; 4
 71c:	21 50       	subi	r18, 0x01	; 1
 71e:	80 40       	sbci	r24, 0x00	; 0
 720:	90 40       	sbci	r25, 0x00	; 0
 722:	e1 f7       	brne	.-8      	; 0x71c <__vector_18+0x248>
 724:	00 c0       	rjmp	.+0      	; 0x726 <__vector_18+0x252>
 726:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 728:	29 9a       	sbi	0x05, 1	; 5
 72a:	2f ef       	ldi	r18, 0xFF	; 255
 72c:	81 ee       	ldi	r24, 0xE1	; 225
 72e:	94 e0       	ldi	r25, 0x04	; 4
 730:	21 50       	subi	r18, 0x01	; 1
 732:	80 40       	sbci	r24, 0x00	; 0
 734:	90 40       	sbci	r25, 0x00	; 0
 736:	e1 f7       	brne	.-8      	; 0x730 <__vector_18+0x25c>
 738:	00 c0       	rjmp	.+0      	; 0x73a <__vector_18+0x266>
 73a:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 73c:	29 98       	cbi	0x05, 1	; 5
 73e:	2f ef       	ldi	r18, 0xFF	; 255
 740:	81 ee       	ldi	r24, 0xE1	; 225
 742:	94 e0       	ldi	r25, 0x04	; 4
 744:	21 50       	subi	r18, 0x01	; 1
 746:	80 40       	sbci	r24, 0x00	; 0
 748:	90 40       	sbci	r25, 0x00	; 0
 74a:	e1 f7       	brne	.-8      	; 0x744 <__vector_18+0x270>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <__vector_18+0x27a>
 74e:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 750:	29 9a       	sbi	0x05, 1	; 5
 752:	2f ef       	ldi	r18, 0xFF	; 255
 754:	81 ee       	ldi	r24, 0xE1	; 225
 756:	94 e0       	ldi	r25, 0x04	; 4
 758:	21 50       	subi	r18, 0x01	; 1
 75a:	80 40       	sbci	r24, 0x00	; 0
 75c:	90 40       	sbci	r25, 0x00	; 0
 75e:	e1 f7       	brne	.-8      	; 0x758 <__vector_18+0x284>
 760:	00 c0       	rjmp	.+0      	; 0x762 <__vector_18+0x28e>
 762:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 764:	29 98       	cbi	0x05, 1	; 5
 766:	2f ef       	ldi	r18, 0xFF	; 255
 768:	81 ee       	ldi	r24, 0xE1	; 225
 76a:	94 e0       	ldi	r25, 0x04	; 4
 76c:	21 50       	subi	r18, 0x01	; 1
 76e:	80 40       	sbci	r24, 0x00	; 0
 770:	90 40       	sbci	r25, 0x00	; 0
 772:	e1 f7       	brne	.-8      	; 0x76c <__vector_18+0x298>
 774:	00 c0       	rjmp	.+0      	; 0x776 <__vector_18+0x2a2>
 776:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 778:	29 9a       	sbi	0x05, 1	; 5
 77a:	2f ef       	ldi	r18, 0xFF	; 255
 77c:	81 ee       	ldi	r24, 0xE1	; 225
 77e:	94 e0       	ldi	r25, 0x04	; 4
 780:	21 50       	subi	r18, 0x01	; 1
 782:	80 40       	sbci	r24, 0x00	; 0
 784:	90 40       	sbci	r25, 0x00	; 0
 786:	e1 f7       	brne	.-8      	; 0x780 <__vector_18+0x2ac>
 788:	00 c0       	rjmp	.+0      	; 0x78a <__vector_18+0x2b6>
 78a:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 78c:	29 98       	cbi	0x05, 1	; 5
 78e:	2f ef       	ldi	r18, 0xFF	; 255
 790:	81 ee       	ldi	r24, 0xE1	; 225
 792:	94 e0       	ldi	r25, 0x04	; 4
 794:	21 50       	subi	r18, 0x01	; 1
 796:	80 40       	sbci	r24, 0x00	; 0
 798:	90 40       	sbci	r25, 0x00	; 0
 79a:	e1 f7       	brne	.-8      	; 0x794 <__vector_18+0x2c0>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <__vector_18+0x2ca>
 79e:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 7a0:	29 9a       	sbi	0x05, 1	; 5
 7a2:	2f ef       	ldi	r18, 0xFF	; 255
 7a4:	81 ee       	ldi	r24, 0xE1	; 225
 7a6:	94 e0       	ldi	r25, 0x04	; 4
 7a8:	21 50       	subi	r18, 0x01	; 1
 7aa:	80 40       	sbci	r24, 0x00	; 0
 7ac:	90 40       	sbci	r25, 0x00	; 0
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <__vector_18+0x2d4>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <__vector_18+0x2de>
 7b2:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 7b4:	29 98       	cbi	0x05, 1	; 5
 7b6:	2f ef       	ldi	r18, 0xFF	; 255
 7b8:	81 ee       	ldi	r24, 0xE1	; 225
 7ba:	94 e0       	ldi	r25, 0x04	; 4
 7bc:	21 50       	subi	r18, 0x01	; 1
 7be:	80 40       	sbci	r24, 0x00	; 0
 7c0:	90 40       	sbci	r25, 0x00	; 0
 7c2:	e1 f7       	brne	.-8      	; 0x7bc <__vector_18+0x2e8>
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <__vector_18+0x2f2>
 7c6:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 7c8:	29 9a       	sbi	0x05, 1	; 5
 7ca:	2f ef       	ldi	r18, 0xFF	; 255
 7cc:	81 ee       	ldi	r24, 0xE1	; 225
 7ce:	94 e0       	ldi	r25, 0x04	; 4
 7d0:	21 50       	subi	r18, 0x01	; 1
 7d2:	80 40       	sbci	r24, 0x00	; 0
 7d4:	90 40       	sbci	r25, 0x00	; 0
 7d6:	e1 f7       	brne	.-8      	; 0x7d0 <__vector_18+0x2fc>
 7d8:	00 c0       	rjmp	.+0      	; 0x7da <__vector_18+0x306>
 7da:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 7dc:	29 98       	cbi	0x05, 1	; 5
 7de:	2f ef       	ldi	r18, 0xFF	; 255
 7e0:	81 ee       	ldi	r24, 0xE1	; 225
 7e2:	94 e0       	ldi	r25, 0x04	; 4
 7e4:	21 50       	subi	r18, 0x01	; 1
 7e6:	80 40       	sbci	r24, 0x00	; 0
 7e8:	90 40       	sbci	r25, 0x00	; 0
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <__vector_18+0x310>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <__vector_18+0x31a>
 7ee:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 7f0:	29 9a       	sbi	0x05, 1	; 5
 7f2:	2f ef       	ldi	r18, 0xFF	; 255
 7f4:	81 ee       	ldi	r24, 0xE1	; 225
 7f6:	94 e0       	ldi	r25, 0x04	; 4
 7f8:	21 50       	subi	r18, 0x01	; 1
 7fa:	80 40       	sbci	r24, 0x00	; 0
 7fc:	90 40       	sbci	r25, 0x00	; 0
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <__vector_18+0x324>
 800:	00 c0       	rjmp	.+0      	; 0x802 <__vector_18+0x32e>
 802:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 804:	29 98       	cbi	0x05, 1	; 5
 806:	2f ef       	ldi	r18, 0xFF	; 255
 808:	81 ee       	ldi	r24, 0xE1	; 225
 80a:	94 e0       	ldi	r25, 0x04	; 4
 80c:	21 50       	subi	r18, 0x01	; 1
 80e:	80 40       	sbci	r24, 0x00	; 0
 810:	90 40       	sbci	r25, 0x00	; 0
 812:	e1 f7       	brne	.-8      	; 0x80c <__vector_18+0x338>
 814:	00 c0       	rjmp	.+0      	; 0x816 <__vector_18+0x342>
 816:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 818:	29 9a       	sbi	0x05, 1	; 5
 81a:	2f ef       	ldi	r18, 0xFF	; 255
 81c:	81 ee       	ldi	r24, 0xE1	; 225
 81e:	94 e0       	ldi	r25, 0x04	; 4
 820:	21 50       	subi	r18, 0x01	; 1
 822:	80 40       	sbci	r24, 0x00	; 0
 824:	90 40       	sbci	r25, 0x00	; 0
 826:	e1 f7       	brne	.-8      	; 0x820 <__vector_18+0x34c>
 828:	00 c0       	rjmp	.+0      	; 0x82a <__vector_18+0x356>
 82a:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 82c:	29 98       	cbi	0x05, 1	; 5
 82e:	2f ef       	ldi	r18, 0xFF	; 255
 830:	81 ee       	ldi	r24, 0xE1	; 225
 832:	94 e0       	ldi	r25, 0x04	; 4
 834:	21 50       	subi	r18, 0x01	; 1
 836:	80 40       	sbci	r24, 0x00	; 0
 838:	90 40       	sbci	r25, 0x00	; 0
 83a:	e1 f7       	brne	.-8      	; 0x834 <__vector_18+0x360>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <__vector_18+0x36a>
 83e:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 840:	29 9a       	sbi	0x05, 1	; 5
 842:	2f ef       	ldi	r18, 0xFF	; 255
 844:	81 ee       	ldi	r24, 0xE1	; 225
 846:	94 e0       	ldi	r25, 0x04	; 4
 848:	21 50       	subi	r18, 0x01	; 1
 84a:	80 40       	sbci	r24, 0x00	; 0
 84c:	90 40       	sbci	r25, 0x00	; 0
 84e:	e1 f7       	brne	.-8      	; 0x848 <__vector_18+0x374>
 850:	00 c0       	rjmp	.+0      	; 0x852 <__vector_18+0x37e>
 852:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 854:	29 98       	cbi	0x05, 1	; 5
 856:	2f ef       	ldi	r18, 0xFF	; 255
 858:	81 ee       	ldi	r24, 0xE1	; 225
 85a:	94 e0       	ldi	r25, 0x04	; 4
 85c:	21 50       	subi	r18, 0x01	; 1
 85e:	80 40       	sbci	r24, 0x00	; 0
 860:	90 40       	sbci	r25, 0x00	; 0
 862:	e1 f7       	brne	.-8      	; 0x85c <__vector_18+0x388>
 864:	00 c0       	rjmp	.+0      	; 0x866 <__vector_18+0x392>
 866:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 868:	29 9a       	sbi	0x05, 1	; 5
 86a:	2f ef       	ldi	r18, 0xFF	; 255
 86c:	81 ee       	ldi	r24, 0xE1	; 225
 86e:	94 e0       	ldi	r25, 0x04	; 4
 870:	21 50       	subi	r18, 0x01	; 1
 872:	80 40       	sbci	r24, 0x00	; 0
 874:	90 40       	sbci	r25, 0x00	; 0
 876:	e1 f7       	brne	.-8      	; 0x870 <__vector_18+0x39c>
 878:	00 c0       	rjmp	.+0      	; 0x87a <__vector_18+0x3a6>
 87a:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 87c:	29 98       	cbi	0x05, 1	; 5
 87e:	2f ef       	ldi	r18, 0xFF	; 255
 880:	81 ee       	ldi	r24, 0xE1	; 225
 882:	94 e0       	ldi	r25, 0x04	; 4
 884:	21 50       	subi	r18, 0x01	; 1
 886:	80 40       	sbci	r24, 0x00	; 0
 888:	90 40       	sbci	r25, 0x00	; 0
 88a:	e1 f7       	brne	.-8      	; 0x884 <__vector_18+0x3b0>
 88c:	00 c0       	rjmp	.+0      	; 0x88e <__vector_18+0x3ba>
 88e:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 890:	29 9a       	sbi	0x05, 1	; 5
 892:	2f ef       	ldi	r18, 0xFF	; 255
 894:	81 ee       	ldi	r24, 0xE1	; 225
 896:	94 e0       	ldi	r25, 0x04	; 4
 898:	21 50       	subi	r18, 0x01	; 1
 89a:	80 40       	sbci	r24, 0x00	; 0
 89c:	90 40       	sbci	r25, 0x00	; 0
 89e:	e1 f7       	brne	.-8      	; 0x898 <__vector_18+0x3c4>
 8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <__vector_18+0x3ce>
 8a2:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 8a4:	29 98       	cbi	0x05, 1	; 5
 8a6:	2f ef       	ldi	r18, 0xFF	; 255
 8a8:	81 ee       	ldi	r24, 0xE1	; 225
 8aa:	94 e0       	ldi	r25, 0x04	; 4
 8ac:	21 50       	subi	r18, 0x01	; 1
 8ae:	80 40       	sbci	r24, 0x00	; 0
 8b0:	90 40       	sbci	r25, 0x00	; 0
 8b2:	e1 f7       	brne	.-8      	; 0x8ac <__vector_18+0x3d8>
 8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <__vector_18+0x3e2>
 8b6:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 8b8:	29 9a       	sbi	0x05, 1	; 5
 8ba:	2f ef       	ldi	r18, 0xFF	; 255
 8bc:	81 ee       	ldi	r24, 0xE1	; 225
 8be:	94 e0       	ldi	r25, 0x04	; 4
 8c0:	21 50       	subi	r18, 0x01	; 1
 8c2:	80 40       	sbci	r24, 0x00	; 0
 8c4:	90 40       	sbci	r25, 0x00	; 0
 8c6:	e1 f7       	brne	.-8      	; 0x8c0 <__vector_18+0x3ec>
 8c8:	00 c0       	rjmp	.+0      	; 0x8ca <__vector_18+0x3f6>
 8ca:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 8cc:	29 98       	cbi	0x05, 1	; 5
 8ce:	2f ef       	ldi	r18, 0xFF	; 255
 8d0:	81 ee       	ldi	r24, 0xE1	; 225
 8d2:	94 e0       	ldi	r25, 0x04	; 4
 8d4:	21 50       	subi	r18, 0x01	; 1
 8d6:	80 40       	sbci	r24, 0x00	; 0
 8d8:	90 40       	sbci	r25, 0x00	; 0
 8da:	e1 f7       	brne	.-8      	; 0x8d4 <__vector_18+0x400>
 8dc:	00 c0       	rjmp	.+0      	; 0x8de <__vector_18+0x40a>
 8de:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 8e0:	29 9a       	sbi	0x05, 1	; 5
 8e2:	2f ef       	ldi	r18, 0xFF	; 255
 8e4:	81 ee       	ldi	r24, 0xE1	; 225
 8e6:	94 e0       	ldi	r25, 0x04	; 4
 8e8:	21 50       	subi	r18, 0x01	; 1
 8ea:	80 40       	sbci	r24, 0x00	; 0
 8ec:	90 40       	sbci	r25, 0x00	; 0
 8ee:	e1 f7       	brne	.-8      	; 0x8e8 <__vector_18+0x414>
 8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <__vector_18+0x41e>
 8f2:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 8f4:	29 98       	cbi	0x05, 1	; 5
 8f6:	2f ef       	ldi	r18, 0xFF	; 255
 8f8:	81 ee       	ldi	r24, 0xE1	; 225
 8fa:	94 e0       	ldi	r25, 0x04	; 4
 8fc:	21 50       	subi	r18, 0x01	; 1
 8fe:	80 40       	sbci	r24, 0x00	; 0
 900:	90 40       	sbci	r25, 0x00	; 0
 902:	e1 f7       	brne	.-8      	; 0x8fc <__vector_18+0x428>
 904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0x7>
 906:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 908:	29 9a       	sbi	0x05, 1	; 5
 90a:	2f ef       	ldi	r18, 0xFF	; 255
 90c:	81 ee       	ldi	r24, 0xE1	; 225
 90e:	94 e0       	ldi	r25, 0x04	; 4
 910:	21 50       	subi	r18, 0x01	; 1
 912:	80 40       	sbci	r24, 0x00	; 0
 914:	90 40       	sbci	r25, 0x00	; 0
 916:	e1 f7       	brne	.-8      	; 0x910 <__stack+0x11>
 918:	00 c0       	rjmp	.+0      	; 0x91a <__stack+0x1b>
 91a:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 91c:	29 98       	cbi	0x05, 1	; 5
 91e:	2f ef       	ldi	r18, 0xFF	; 255
 920:	81 ee       	ldi	r24, 0xE1	; 225
 922:	94 e0       	ldi	r25, 0x04	; 4
 924:	21 50       	subi	r18, 0x01	; 1
 926:	80 40       	sbci	r24, 0x00	; 0
 928:	90 40       	sbci	r25, 0x00	; 0
 92a:	e1 f7       	brne	.-8      	; 0x924 <__stack+0x25>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <__stack+0x2f>
 92e:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 930:	29 9a       	sbi	0x05, 1	; 5
 932:	2f ef       	ldi	r18, 0xFF	; 255
 934:	81 ee       	ldi	r24, 0xE1	; 225
 936:	94 e0       	ldi	r25, 0x04	; 4
 938:	21 50       	subi	r18, 0x01	; 1
 93a:	80 40       	sbci	r24, 0x00	; 0
 93c:	90 40       	sbci	r25, 0x00	; 0
 93e:	e1 f7       	brne	.-8      	; 0x938 <__stack+0x39>
 940:	00 c0       	rjmp	.+0      	; 0x942 <__stack+0x43>
 942:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 944:	29 98       	cbi	0x05, 1	; 5
 946:	1a c0       	rjmp	.+52     	; 0x97c <__stack+0x7d>
			}
			return;
			
		// 7 = uit-/oprol afstand
		case '7':
			manual = 1;
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 950:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			int uitoprol = USART_receive();
 954:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 958:	90 e0       	ldi	r25, 0x00	; 0
			afstand_up = uitoprol;
 95a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <afstand_up+0x1>
 95e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <afstand_up>
			afstand_down = uitoprol;
 962:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 966:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			goDown();
 96a:	0e 94 06 02 	call	0x40c	; 0x40c <goDown>
			return;
 96e:	06 c0       	rjmp	.+12     	; 0x97c <__stack+0x7d>
			
		// 8 = set manual
		case '8':
			manual = 1;
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 978:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			return;
			
		default:
			return;
	}
 97c:	ff 91       	pop	r31
 97e:	ef 91       	pop	r30
 980:	bf 91       	pop	r27
 982:	af 91       	pop	r26
 984:	9f 91       	pop	r25
 986:	8f 91       	pop	r24
 988:	7f 91       	pop	r23
 98a:	6f 91       	pop	r22
 98c:	5f 91       	pop	r21
 98e:	4f 91       	pop	r20
 990:	3f 91       	pop	r19
 992:	2f 91       	pop	r18
 994:	0f 90       	pop	r0
 996:	0f be       	out	0x3f, r0	; 63
 998:	0f 90       	pop	r0
 99a:	1f 90       	pop	r1
 99c:	18 95       	reti

0000099e <init_connectie>:
void init_scheduler();
void init_lampjes();

void init_connectie(){
	// disable U2X mode
	UCSR0A = 0;
 99e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// Set frame format: 8data, 2stop bit 
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 9a2:	8e e0       	ldi	r24, 0x0E	; 14
 9a4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 9a8:	08 95       	ret

000009aa <init_USART>:
}

void init_USART(){
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 9aa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 9ae:	87 e6       	ldi	r24, 0x67	; 103
 9b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 9b4:	e1 ec       	ldi	r30, 0xC1	; 193
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	88 e1       	ldi	r24, 0x18	; 24
 9ba:	80 83       	st	Z, r24
	
	UCSR0C = (3<<UCSZ00);
 9bc:	86 e0       	ldi	r24, 0x06	; 6
 9be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	UCSR0B |= (1 << RXCIE0 ); // Enable the USART Recieve Complete interrupt ( USART_RXC )
 9c2:	80 81       	ld	r24, Z
 9c4:	80 68       	ori	r24, 0x80	; 128
 9c6:	80 83       	st	Z, r24
	sei (); // Enable the Global Interrupt Enable flag so that interrupts can be processed
 9c8:	78 94       	sei
 9ca:	08 95       	ret

000009cc <init_scheduler>:
}

void init_scheduler()
{
	SCH_Init_T1();
 9cc:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	//SCH_Add_Task(check_input,0,1); // kan weg straks, interrupt neemt deze op zich
	SCH_Add_Task(temperatuur,1,100);
 9d0:	44 e6       	ldi	r20, 0x64	; 100
 9d2:	50 e0       	ldi	r21, 0x00	; 0
 9d4:	61 e0       	ldi	r22, 0x01	; 1
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	80 e4       	ldi	r24, 0x40	; 64
 9da:	91 e0       	ldi	r25, 0x01	; 1
 9dc:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(ldr,2,100);
 9e0:	44 e6       	ldi	r20, 0x64	; 100
 9e2:	50 e0       	ldi	r21, 0x00	; 0
 9e4:	62 e0       	ldi	r22, 0x02	; 2
 9e6:	70 e0       	ldi	r23, 0x00	; 0
 9e8:	8a e7       	ldi	r24, 0x7A	; 122
 9ea:	91 e0       	ldi	r25, 0x01	; 1
 9ec:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(afstand,3,100);
 9f0:	44 e6       	ldi	r20, 0x64	; 100
 9f2:	50 e0       	ldi	r21, 0x00	; 0
 9f4:	63 e0       	ldi	r22, 0x03	; 3
 9f6:	70 e0       	ldi	r23, 0x00	; 0
 9f8:	8e ea       	ldi	r24, 0xAE	; 174
 9fa:	91 e0       	ldi	r25, 0x01	; 1
 9fc:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	//SCH_Add_Task(upDown,4,10);
	SCH_Add_Task(newRegel,6,100);
 a00:	44 e6       	ldi	r20, 0x64	; 100
 a02:	50 e0       	ldi	r21, 0x00	; 0
 a04:	66 e0       	ldi	r22, 0x06	; 6
 a06:	70 e0       	ldi	r23, 0x00	; 0
 a08:	83 e6       	ldi	r24, 0x63	; 99
 a0a:	92 e0       	ldi	r25, 0x02	; 2
 a0c:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Start();
 a10:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 a14:	08 95       	ret

00000a16 <init_adc>:
}

void init_adc(){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
 a16:	ea e7       	ldi	r30, 0x7A	; 122
 a18:	f0 e0       	ldi	r31, 0x00	; 0
 a1a:	80 81       	ld	r24, Z
 a1c:	87 60       	ori	r24, 0x07	; 7
 a1e:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
 a20:	ac e7       	ldi	r26, 0x7C	; 124
 a22:	b0 e0       	ldi	r27, 0x00	; 0
 a24:	8c 91       	ld	r24, X
 a26:	80 64       	ori	r24, 0x40	; 64
 a28:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
 a2a:	80 81       	ld	r24, Z
 a2c:	80 68       	ori	r24, 0x80	; 128
 a2e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 a30:	80 81       	ld	r24, Z
 a32:	80 64       	ori	r24, 0x40	; 64
 a34:	80 83       	st	Z, r24
 a36:	08 95       	ret

00000a38 <init_dist>:
}

void init_dist(){
	DDRD |= _BV(PD3); // Pin 3 Trigger Output
 a38:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~_BV(PD2); // Pin 2 Echo Input
 a3a:	52 98       	cbi	0x0a, 2	; 10
 a3c:	08 95       	ret

00000a3e <init_lampjes>:
}

void init_lampjes(){
	DDRB |= _BV(PB0);	// pin0 B = output
 a3e:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1);	// pin1 B = output
 a40:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(PB2);	// pin2 B = output
 a42:	22 9a       	sbi	0x04, 2	; 4
	
	PORTB = 0; // lampjes uitzetten
 a44:	15 b8       	out	0x05, r1	; 5
 a46:	08 95       	ret

00000a48 <setup>:
		SCH_Dispatch_Tasks();
	}
}

void setup(){
	init_connectie();
 a48:	0e 94 cf 04 	call	0x99e	; 0x99e <init_connectie>
	init_adc();			// Setup the ADC
 a4c:	0e 94 0b 05 	call	0xa16	; 0xa16 <init_adc>
	init_USART();			// Setup the USART
 a50:	0e 94 d5 04 	call	0x9aa	; 0x9aa <init_USART>
	init_dist();
 a54:	0e 94 1c 05 	call	0xa38	; 0xa38 <init_dist>
	init_scheduler();
 a58:	0e 94 e6 04 	call	0x9cc	; 0x9cc <init_scheduler>
	init_lampjes();
 a5c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <init_lampjes>
 a60:	08 95       	ret

00000a62 <main>:

int main(void);
void setup();

int main(void){
	setup();
 a62:	0e 94 24 05 	call	0xa48	; 0xa48 <setup>
	while(1) {
		SCH_Dispatch_Tasks();
 a66:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 a6a:	fd cf       	rjmp	.-6      	; 0xa66 <main+0x4>

00000a6c <__subsf3>:
 a6c:	50 58       	subi	r21, 0x80	; 128

00000a6e <__addsf3>:
 a6e:	bb 27       	eor	r27, r27
 a70:	aa 27       	eor	r26, r26
 a72:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__addsf3x>
 a76:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__fp_round>
 a7a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_pscA>
 a7e:	38 f0       	brcs	.+14     	; 0xa8e <__addsf3+0x20>
 a80:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_pscB>
 a84:	20 f0       	brcs	.+8      	; 0xa8e <__addsf3+0x20>
 a86:	39 f4       	brne	.+14     	; 0xa96 <__addsf3+0x28>
 a88:	9f 3f       	cpi	r25, 0xFF	; 255
 a8a:	19 f4       	brne	.+6      	; 0xa92 <__addsf3+0x24>
 a8c:	26 f4       	brtc	.+8      	; 0xa96 <__addsf3+0x28>
 a8e:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_nan>
 a92:	0e f4       	brtc	.+2      	; 0xa96 <__addsf3+0x28>
 a94:	e0 95       	com	r30
 a96:	e7 fb       	bst	r30, 7
 a98:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_inf>

00000a9c <__addsf3x>:
 a9c:	e9 2f       	mov	r30, r25
 a9e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fp_split3>
 aa2:	58 f3       	brcs	.-42     	; 0xa7a <__addsf3+0xc>
 aa4:	ba 17       	cp	r27, r26
 aa6:	62 07       	cpc	r22, r18
 aa8:	73 07       	cpc	r23, r19
 aaa:	84 07       	cpc	r24, r20
 aac:	95 07       	cpc	r25, r21
 aae:	20 f0       	brcs	.+8      	; 0xab8 <__addsf3x+0x1c>
 ab0:	79 f4       	brne	.+30     	; 0xad0 <__addsf3x+0x34>
 ab2:	a6 f5       	brtc	.+104    	; 0xb1c <__addsf3x+0x80>
 ab4:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_zero>
 ab8:	0e f4       	brtc	.+2      	; 0xabc <__addsf3x+0x20>
 aba:	e0 95       	com	r30
 abc:	0b 2e       	mov	r0, r27
 abe:	ba 2f       	mov	r27, r26
 ac0:	a0 2d       	mov	r26, r0
 ac2:	0b 01       	movw	r0, r22
 ac4:	b9 01       	movw	r22, r18
 ac6:	90 01       	movw	r18, r0
 ac8:	0c 01       	movw	r0, r24
 aca:	ca 01       	movw	r24, r20
 acc:	a0 01       	movw	r20, r0
 ace:	11 24       	eor	r1, r1
 ad0:	ff 27       	eor	r31, r31
 ad2:	59 1b       	sub	r21, r25
 ad4:	99 f0       	breq	.+38     	; 0xafc <__addsf3x+0x60>
 ad6:	59 3f       	cpi	r21, 0xF9	; 249
 ad8:	50 f4       	brcc	.+20     	; 0xaee <__addsf3x+0x52>
 ada:	50 3e       	cpi	r21, 0xE0	; 224
 adc:	68 f1       	brcs	.+90     	; 0xb38 <__addsf3x+0x9c>
 ade:	1a 16       	cp	r1, r26
 ae0:	f0 40       	sbci	r31, 0x00	; 0
 ae2:	a2 2f       	mov	r26, r18
 ae4:	23 2f       	mov	r18, r19
 ae6:	34 2f       	mov	r19, r20
 ae8:	44 27       	eor	r20, r20
 aea:	58 5f       	subi	r21, 0xF8	; 248
 aec:	f3 cf       	rjmp	.-26     	; 0xad4 <__addsf3x+0x38>
 aee:	46 95       	lsr	r20
 af0:	37 95       	ror	r19
 af2:	27 95       	ror	r18
 af4:	a7 95       	ror	r26
 af6:	f0 40       	sbci	r31, 0x00	; 0
 af8:	53 95       	inc	r21
 afa:	c9 f7       	brne	.-14     	; 0xaee <__addsf3x+0x52>
 afc:	7e f4       	brtc	.+30     	; 0xb1c <__addsf3x+0x80>
 afe:	1f 16       	cp	r1, r31
 b00:	ba 0b       	sbc	r27, r26
 b02:	62 0b       	sbc	r22, r18
 b04:	73 0b       	sbc	r23, r19
 b06:	84 0b       	sbc	r24, r20
 b08:	ba f0       	brmi	.+46     	; 0xb38 <__addsf3x+0x9c>
 b0a:	91 50       	subi	r25, 0x01	; 1
 b0c:	a1 f0       	breq	.+40     	; 0xb36 <__addsf3x+0x9a>
 b0e:	ff 0f       	add	r31, r31
 b10:	bb 1f       	adc	r27, r27
 b12:	66 1f       	adc	r22, r22
 b14:	77 1f       	adc	r23, r23
 b16:	88 1f       	adc	r24, r24
 b18:	c2 f7       	brpl	.-16     	; 0xb0a <__addsf3x+0x6e>
 b1a:	0e c0       	rjmp	.+28     	; 0xb38 <__addsf3x+0x9c>
 b1c:	ba 0f       	add	r27, r26
 b1e:	62 1f       	adc	r22, r18
 b20:	73 1f       	adc	r23, r19
 b22:	84 1f       	adc	r24, r20
 b24:	48 f4       	brcc	.+18     	; 0xb38 <__addsf3x+0x9c>
 b26:	87 95       	ror	r24
 b28:	77 95       	ror	r23
 b2a:	67 95       	ror	r22
 b2c:	b7 95       	ror	r27
 b2e:	f7 95       	ror	r31
 b30:	9e 3f       	cpi	r25, 0xFE	; 254
 b32:	08 f0       	brcs	.+2      	; 0xb36 <__addsf3x+0x9a>
 b34:	b0 cf       	rjmp	.-160    	; 0xa96 <__addsf3+0x28>
 b36:	93 95       	inc	r25
 b38:	88 0f       	add	r24, r24
 b3a:	08 f0       	brcs	.+2      	; 0xb3e <__addsf3x+0xa2>
 b3c:	99 27       	eor	r25, r25
 b3e:	ee 0f       	add	r30, r30
 b40:	97 95       	ror	r25
 b42:	87 95       	ror	r24
 b44:	08 95       	ret

00000b46 <__fixsfsi>:
 b46:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fixunssfsi>
 b4a:	68 94       	set
 b4c:	b1 11       	cpse	r27, r1
 b4e:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__fp_szero>
 b52:	08 95       	ret

00000b54 <__fixunssfsi>:
 b54:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fp_splitA>
 b58:	88 f0       	brcs	.+34     	; 0xb7c <__fixunssfsi+0x28>
 b5a:	9f 57       	subi	r25, 0x7F	; 127
 b5c:	98 f0       	brcs	.+38     	; 0xb84 <__fixunssfsi+0x30>
 b5e:	b9 2f       	mov	r27, r25
 b60:	99 27       	eor	r25, r25
 b62:	b7 51       	subi	r27, 0x17	; 23
 b64:	b0 f0       	brcs	.+44     	; 0xb92 <__fixunssfsi+0x3e>
 b66:	e1 f0       	breq	.+56     	; 0xba0 <__fixunssfsi+0x4c>
 b68:	66 0f       	add	r22, r22
 b6a:	77 1f       	adc	r23, r23
 b6c:	88 1f       	adc	r24, r24
 b6e:	99 1f       	adc	r25, r25
 b70:	1a f0       	brmi	.+6      	; 0xb78 <__fixunssfsi+0x24>
 b72:	ba 95       	dec	r27
 b74:	c9 f7       	brne	.-14     	; 0xb68 <__fixunssfsi+0x14>
 b76:	14 c0       	rjmp	.+40     	; 0xba0 <__fixunssfsi+0x4c>
 b78:	b1 30       	cpi	r27, 0x01	; 1
 b7a:	91 f0       	breq	.+36     	; 0xba0 <__fixunssfsi+0x4c>
 b7c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_zero>
 b80:	b1 e0       	ldi	r27, 0x01	; 1
 b82:	08 95       	ret
 b84:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_zero>
 b88:	67 2f       	mov	r22, r23
 b8a:	78 2f       	mov	r23, r24
 b8c:	88 27       	eor	r24, r24
 b8e:	b8 5f       	subi	r27, 0xF8	; 248
 b90:	39 f0       	breq	.+14     	; 0xba0 <__fixunssfsi+0x4c>
 b92:	b9 3f       	cpi	r27, 0xF9	; 249
 b94:	cc f3       	brlt	.-14     	; 0xb88 <__fixunssfsi+0x34>
 b96:	86 95       	lsr	r24
 b98:	77 95       	ror	r23
 b9a:	67 95       	ror	r22
 b9c:	b3 95       	inc	r27
 b9e:	d9 f7       	brne	.-10     	; 0xb96 <__fixunssfsi+0x42>
 ba0:	3e f4       	brtc	.+14     	; 0xbb0 <__fixunssfsi+0x5c>
 ba2:	90 95       	com	r25
 ba4:	80 95       	com	r24
 ba6:	70 95       	com	r23
 ba8:	61 95       	neg	r22
 baa:	7f 4f       	sbci	r23, 0xFF	; 255
 bac:	8f 4f       	sbci	r24, 0xFF	; 255
 bae:	9f 4f       	sbci	r25, 0xFF	; 255
 bb0:	08 95       	ret

00000bb2 <__floatunsisf>:
 bb2:	e8 94       	clt
 bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__floatsisf+0x12>

00000bb6 <__floatsisf>:
 bb6:	97 fb       	bst	r25, 7
 bb8:	3e f4       	brtc	.+14     	; 0xbc8 <__floatsisf+0x12>
 bba:	90 95       	com	r25
 bbc:	80 95       	com	r24
 bbe:	70 95       	com	r23
 bc0:	61 95       	neg	r22
 bc2:	7f 4f       	sbci	r23, 0xFF	; 255
 bc4:	8f 4f       	sbci	r24, 0xFF	; 255
 bc6:	9f 4f       	sbci	r25, 0xFF	; 255
 bc8:	99 23       	and	r25, r25
 bca:	a9 f0       	breq	.+42     	; 0xbf6 <__floatsisf+0x40>
 bcc:	f9 2f       	mov	r31, r25
 bce:	96 e9       	ldi	r25, 0x96	; 150
 bd0:	bb 27       	eor	r27, r27
 bd2:	93 95       	inc	r25
 bd4:	f6 95       	lsr	r31
 bd6:	87 95       	ror	r24
 bd8:	77 95       	ror	r23
 bda:	67 95       	ror	r22
 bdc:	b7 95       	ror	r27
 bde:	f1 11       	cpse	r31, r1
 be0:	f8 cf       	rjmp	.-16     	; 0xbd2 <__floatsisf+0x1c>
 be2:	fa f4       	brpl	.+62     	; 0xc22 <__floatsisf+0x6c>
 be4:	bb 0f       	add	r27, r27
 be6:	11 f4       	brne	.+4      	; 0xbec <__floatsisf+0x36>
 be8:	60 ff       	sbrs	r22, 0
 bea:	1b c0       	rjmp	.+54     	; 0xc22 <__floatsisf+0x6c>
 bec:	6f 5f       	subi	r22, 0xFF	; 255
 bee:	7f 4f       	sbci	r23, 0xFF	; 255
 bf0:	8f 4f       	sbci	r24, 0xFF	; 255
 bf2:	9f 4f       	sbci	r25, 0xFF	; 255
 bf4:	16 c0       	rjmp	.+44     	; 0xc22 <__floatsisf+0x6c>
 bf6:	88 23       	and	r24, r24
 bf8:	11 f0       	breq	.+4      	; 0xbfe <__floatsisf+0x48>
 bfa:	96 e9       	ldi	r25, 0x96	; 150
 bfc:	11 c0       	rjmp	.+34     	; 0xc20 <__floatsisf+0x6a>
 bfe:	77 23       	and	r23, r23
 c00:	21 f0       	breq	.+8      	; 0xc0a <__floatsisf+0x54>
 c02:	9e e8       	ldi	r25, 0x8E	; 142
 c04:	87 2f       	mov	r24, r23
 c06:	76 2f       	mov	r23, r22
 c08:	05 c0       	rjmp	.+10     	; 0xc14 <__floatsisf+0x5e>
 c0a:	66 23       	and	r22, r22
 c0c:	71 f0       	breq	.+28     	; 0xc2a <__floatsisf+0x74>
 c0e:	96 e8       	ldi	r25, 0x86	; 134
 c10:	86 2f       	mov	r24, r22
 c12:	70 e0       	ldi	r23, 0x00	; 0
 c14:	60 e0       	ldi	r22, 0x00	; 0
 c16:	2a f0       	brmi	.+10     	; 0xc22 <__floatsisf+0x6c>
 c18:	9a 95       	dec	r25
 c1a:	66 0f       	add	r22, r22
 c1c:	77 1f       	adc	r23, r23
 c1e:	88 1f       	adc	r24, r24
 c20:	da f7       	brpl	.-10     	; 0xc18 <__floatsisf+0x62>
 c22:	88 0f       	add	r24, r24
 c24:	96 95       	lsr	r25
 c26:	87 95       	ror	r24
 c28:	97 f9       	bld	r25, 7
 c2a:	08 95       	ret

00000c2c <__fp_inf>:
 c2c:	97 f9       	bld	r25, 7
 c2e:	9f 67       	ori	r25, 0x7F	; 127
 c30:	80 e8       	ldi	r24, 0x80	; 128
 c32:	70 e0       	ldi	r23, 0x00	; 0
 c34:	60 e0       	ldi	r22, 0x00	; 0
 c36:	08 95       	ret

00000c38 <__fp_nan>:
 c38:	9f ef       	ldi	r25, 0xFF	; 255
 c3a:	80 ec       	ldi	r24, 0xC0	; 192
 c3c:	08 95       	ret

00000c3e <__fp_pscA>:
 c3e:	00 24       	eor	r0, r0
 c40:	0a 94       	dec	r0
 c42:	16 16       	cp	r1, r22
 c44:	17 06       	cpc	r1, r23
 c46:	18 06       	cpc	r1, r24
 c48:	09 06       	cpc	r0, r25
 c4a:	08 95       	ret

00000c4c <__fp_pscB>:
 c4c:	00 24       	eor	r0, r0
 c4e:	0a 94       	dec	r0
 c50:	12 16       	cp	r1, r18
 c52:	13 06       	cpc	r1, r19
 c54:	14 06       	cpc	r1, r20
 c56:	05 06       	cpc	r0, r21
 c58:	08 95       	ret

00000c5a <__fp_round>:
 c5a:	09 2e       	mov	r0, r25
 c5c:	03 94       	inc	r0
 c5e:	00 0c       	add	r0, r0
 c60:	11 f4       	brne	.+4      	; 0xc66 <__fp_round+0xc>
 c62:	88 23       	and	r24, r24
 c64:	52 f0       	brmi	.+20     	; 0xc7a <__fp_round+0x20>
 c66:	bb 0f       	add	r27, r27
 c68:	40 f4       	brcc	.+16     	; 0xc7a <__fp_round+0x20>
 c6a:	bf 2b       	or	r27, r31
 c6c:	11 f4       	brne	.+4      	; 0xc72 <__fp_round+0x18>
 c6e:	60 ff       	sbrs	r22, 0
 c70:	04 c0       	rjmp	.+8      	; 0xc7a <__fp_round+0x20>
 c72:	6f 5f       	subi	r22, 0xFF	; 255
 c74:	7f 4f       	sbci	r23, 0xFF	; 255
 c76:	8f 4f       	sbci	r24, 0xFF	; 255
 c78:	9f 4f       	sbci	r25, 0xFF	; 255
 c7a:	08 95       	ret

00000c7c <__fp_split3>:
 c7c:	57 fd       	sbrc	r21, 7
 c7e:	90 58       	subi	r25, 0x80	; 128
 c80:	44 0f       	add	r20, r20
 c82:	55 1f       	adc	r21, r21
 c84:	59 f0       	breq	.+22     	; 0xc9c <__fp_splitA+0x10>
 c86:	5f 3f       	cpi	r21, 0xFF	; 255
 c88:	71 f0       	breq	.+28     	; 0xca6 <__fp_splitA+0x1a>
 c8a:	47 95       	ror	r20

00000c8c <__fp_splitA>:
 c8c:	88 0f       	add	r24, r24
 c8e:	97 fb       	bst	r25, 7
 c90:	99 1f       	adc	r25, r25
 c92:	61 f0       	breq	.+24     	; 0xcac <__fp_splitA+0x20>
 c94:	9f 3f       	cpi	r25, 0xFF	; 255
 c96:	79 f0       	breq	.+30     	; 0xcb6 <__fp_splitA+0x2a>
 c98:	87 95       	ror	r24
 c9a:	08 95       	ret
 c9c:	12 16       	cp	r1, r18
 c9e:	13 06       	cpc	r1, r19
 ca0:	14 06       	cpc	r1, r20
 ca2:	55 1f       	adc	r21, r21
 ca4:	f2 cf       	rjmp	.-28     	; 0xc8a <__fp_split3+0xe>
 ca6:	46 95       	lsr	r20
 ca8:	f1 df       	rcall	.-30     	; 0xc8c <__fp_splitA>
 caa:	08 c0       	rjmp	.+16     	; 0xcbc <__fp_splitA+0x30>
 cac:	16 16       	cp	r1, r22
 cae:	17 06       	cpc	r1, r23
 cb0:	18 06       	cpc	r1, r24
 cb2:	99 1f       	adc	r25, r25
 cb4:	f1 cf       	rjmp	.-30     	; 0xc98 <__fp_splitA+0xc>
 cb6:	86 95       	lsr	r24
 cb8:	71 05       	cpc	r23, r1
 cba:	61 05       	cpc	r22, r1
 cbc:	08 94       	sec
 cbe:	08 95       	ret

00000cc0 <__fp_zero>:
 cc0:	e8 94       	clt

00000cc2 <__fp_szero>:
 cc2:	bb 27       	eor	r27, r27
 cc4:	66 27       	eor	r22, r22
 cc6:	77 27       	eor	r23, r23
 cc8:	cb 01       	movw	r24, r22
 cca:	97 f9       	bld	r25, 7
 ccc:	08 95       	ret

00000cce <__mulsf3>:
 cce:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__mulsf3x>
 cd2:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__fp_round>
 cd6:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_pscA>
 cda:	38 f0       	brcs	.+14     	; 0xcea <__mulsf3+0x1c>
 cdc:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_pscB>
 ce0:	20 f0       	brcs	.+8      	; 0xcea <__mulsf3+0x1c>
 ce2:	95 23       	and	r25, r21
 ce4:	11 f0       	breq	.+4      	; 0xcea <__mulsf3+0x1c>
 ce6:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_inf>
 cea:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_nan>
 cee:	11 24       	eor	r1, r1
 cf0:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__fp_szero>

00000cf4 <__mulsf3x>:
 cf4:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fp_split3>
 cf8:	70 f3       	brcs	.-36     	; 0xcd6 <__mulsf3+0x8>

00000cfa <__mulsf3_pse>:
 cfa:	95 9f       	mul	r25, r21
 cfc:	c1 f3       	breq	.-16     	; 0xcee <__mulsf3+0x20>
 cfe:	95 0f       	add	r25, r21
 d00:	50 e0       	ldi	r21, 0x00	; 0
 d02:	55 1f       	adc	r21, r21
 d04:	62 9f       	mul	r22, r18
 d06:	f0 01       	movw	r30, r0
 d08:	72 9f       	mul	r23, r18
 d0a:	bb 27       	eor	r27, r27
 d0c:	f0 0d       	add	r31, r0
 d0e:	b1 1d       	adc	r27, r1
 d10:	63 9f       	mul	r22, r19
 d12:	aa 27       	eor	r26, r26
 d14:	f0 0d       	add	r31, r0
 d16:	b1 1d       	adc	r27, r1
 d18:	aa 1f       	adc	r26, r26
 d1a:	64 9f       	mul	r22, r20
 d1c:	66 27       	eor	r22, r22
 d1e:	b0 0d       	add	r27, r0
 d20:	a1 1d       	adc	r26, r1
 d22:	66 1f       	adc	r22, r22
 d24:	82 9f       	mul	r24, r18
 d26:	22 27       	eor	r18, r18
 d28:	b0 0d       	add	r27, r0
 d2a:	a1 1d       	adc	r26, r1
 d2c:	62 1f       	adc	r22, r18
 d2e:	73 9f       	mul	r23, r19
 d30:	b0 0d       	add	r27, r0
 d32:	a1 1d       	adc	r26, r1
 d34:	62 1f       	adc	r22, r18
 d36:	83 9f       	mul	r24, r19
 d38:	a0 0d       	add	r26, r0
 d3a:	61 1d       	adc	r22, r1
 d3c:	22 1f       	adc	r18, r18
 d3e:	74 9f       	mul	r23, r20
 d40:	33 27       	eor	r19, r19
 d42:	a0 0d       	add	r26, r0
 d44:	61 1d       	adc	r22, r1
 d46:	23 1f       	adc	r18, r19
 d48:	84 9f       	mul	r24, r20
 d4a:	60 0d       	add	r22, r0
 d4c:	21 1d       	adc	r18, r1
 d4e:	82 2f       	mov	r24, r18
 d50:	76 2f       	mov	r23, r22
 d52:	6a 2f       	mov	r22, r26
 d54:	11 24       	eor	r1, r1
 d56:	9f 57       	subi	r25, 0x7F	; 127
 d58:	50 40       	sbci	r21, 0x00	; 0
 d5a:	9a f0       	brmi	.+38     	; 0xd82 <__mulsf3_pse+0x88>
 d5c:	f1 f0       	breq	.+60     	; 0xd9a <__mulsf3_pse+0xa0>
 d5e:	88 23       	and	r24, r24
 d60:	4a f0       	brmi	.+18     	; 0xd74 <__mulsf3_pse+0x7a>
 d62:	ee 0f       	add	r30, r30
 d64:	ff 1f       	adc	r31, r31
 d66:	bb 1f       	adc	r27, r27
 d68:	66 1f       	adc	r22, r22
 d6a:	77 1f       	adc	r23, r23
 d6c:	88 1f       	adc	r24, r24
 d6e:	91 50       	subi	r25, 0x01	; 1
 d70:	50 40       	sbci	r21, 0x00	; 0
 d72:	a9 f7       	brne	.-22     	; 0xd5e <__mulsf3_pse+0x64>
 d74:	9e 3f       	cpi	r25, 0xFE	; 254
 d76:	51 05       	cpc	r21, r1
 d78:	80 f0       	brcs	.+32     	; 0xd9a <__mulsf3_pse+0xa0>
 d7a:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_inf>
 d7e:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__fp_szero>
 d82:	5f 3f       	cpi	r21, 0xFF	; 255
 d84:	e4 f3       	brlt	.-8      	; 0xd7e <__mulsf3_pse+0x84>
 d86:	98 3e       	cpi	r25, 0xE8	; 232
 d88:	d4 f3       	brlt	.-12     	; 0xd7e <__mulsf3_pse+0x84>
 d8a:	86 95       	lsr	r24
 d8c:	77 95       	ror	r23
 d8e:	67 95       	ror	r22
 d90:	b7 95       	ror	r27
 d92:	f7 95       	ror	r31
 d94:	e7 95       	ror	r30
 d96:	9f 5f       	subi	r25, 0xFF	; 255
 d98:	c1 f7       	brne	.-16     	; 0xd8a <__mulsf3_pse+0x90>
 d9a:	fe 2b       	or	r31, r30
 d9c:	88 0f       	add	r24, r24
 d9e:	91 1d       	adc	r25, r1
 da0:	96 95       	lsr	r25
 da2:	87 95       	ror	r24
 da4:	97 f9       	bld	r25, 7
 da6:	08 95       	ret

00000da8 <atoi>:
 da8:	fc 01       	movw	r30, r24
 daa:	88 27       	eor	r24, r24
 dac:	99 27       	eor	r25, r25
 dae:	e8 94       	clt
 db0:	21 91       	ld	r18, Z+
 db2:	20 32       	cpi	r18, 0x20	; 32
 db4:	e9 f3       	breq	.-6      	; 0xdb0 <atoi+0x8>
 db6:	29 30       	cpi	r18, 0x09	; 9
 db8:	10 f0       	brcs	.+4      	; 0xdbe <atoi+0x16>
 dba:	2e 30       	cpi	r18, 0x0E	; 14
 dbc:	c8 f3       	brcs	.-14     	; 0xdb0 <atoi+0x8>
 dbe:	2b 32       	cpi	r18, 0x2B	; 43
 dc0:	41 f0       	breq	.+16     	; 0xdd2 <atoi+0x2a>
 dc2:	2d 32       	cpi	r18, 0x2D	; 45
 dc4:	39 f4       	brne	.+14     	; 0xdd4 <atoi+0x2c>
 dc6:	68 94       	set
 dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <atoi+0x2a>
 dca:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__mulhi_const_10>
 dce:	82 0f       	add	r24, r18
 dd0:	91 1d       	adc	r25, r1
 dd2:	21 91       	ld	r18, Z+
 dd4:	20 53       	subi	r18, 0x30	; 48
 dd6:	2a 30       	cpi	r18, 0x0A	; 10
 dd8:	c0 f3       	brcs	.-16     	; 0xdca <atoi+0x22>
 dda:	1e f4       	brtc	.+6      	; 0xde2 <atoi+0x3a>
 ddc:	90 95       	com	r25
 dde:	81 95       	neg	r24
 de0:	9f 4f       	sbci	r25, 0xFF	; 255
 de2:	08 95       	ret

00000de4 <__itoa_ncheck>:
 de4:	bb 27       	eor	r27, r27
 de6:	4a 30       	cpi	r20, 0x0A	; 10
 de8:	31 f4       	brne	.+12     	; 0xdf6 <__itoa_ncheck+0x12>
 dea:	99 23       	and	r25, r25
 dec:	22 f4       	brpl	.+8      	; 0xdf6 <__itoa_ncheck+0x12>
 dee:	bd e2       	ldi	r27, 0x2D	; 45
 df0:	90 95       	com	r25
 df2:	81 95       	neg	r24
 df4:	9f 4f       	sbci	r25, 0xFF	; 255
 df6:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__utoa_common>

00000dfa <__mulhi_const_10>:
 dfa:	7a e0       	ldi	r23, 0x0A	; 10
 dfc:	97 9f       	mul	r25, r23
 dfe:	90 2d       	mov	r25, r0
 e00:	87 9f       	mul	r24, r23
 e02:	80 2d       	mov	r24, r0
 e04:	91 0d       	add	r25, r1
 e06:	11 24       	eor	r1, r1
 e08:	08 95       	ret

00000e0a <__utoa_ncheck>:
 e0a:	bb 27       	eor	r27, r27

00000e0c <__utoa_common>:
 e0c:	fb 01       	movw	r30, r22
 e0e:	55 27       	eor	r21, r21
 e10:	aa 27       	eor	r26, r26
 e12:	88 0f       	add	r24, r24
 e14:	99 1f       	adc	r25, r25
 e16:	aa 1f       	adc	r26, r26
 e18:	a4 17       	cp	r26, r20
 e1a:	10 f0       	brcs	.+4      	; 0xe20 <__utoa_common+0x14>
 e1c:	a4 1b       	sub	r26, r20
 e1e:	83 95       	inc	r24
 e20:	50 51       	subi	r21, 0x10	; 16
 e22:	b9 f7       	brne	.-18     	; 0xe12 <__utoa_common+0x6>
 e24:	a0 5d       	subi	r26, 0xD0	; 208
 e26:	aa 33       	cpi	r26, 0x3A	; 58
 e28:	08 f0       	brcs	.+2      	; 0xe2c <__utoa_common+0x20>
 e2a:	a9 5d       	subi	r26, 0xD9	; 217
 e2c:	a1 93       	st	Z+, r26
 e2e:	00 97       	sbiw	r24, 0x00	; 0
 e30:	79 f7       	brne	.-34     	; 0xe10 <__utoa_common+0x4>
 e32:	b1 11       	cpse	r27, r1
 e34:	b1 93       	st	Z+, r27
 e36:	11 92       	st	Z+, r1
 e38:	cb 01       	movw	r24, r22
 e3a:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <strrev>

00000e3e <strrev>:
 e3e:	dc 01       	movw	r26, r24
 e40:	fc 01       	movw	r30, r24
 e42:	67 2f       	mov	r22, r23
 e44:	71 91       	ld	r23, Z+
 e46:	77 23       	and	r23, r23
 e48:	e1 f7       	brne	.-8      	; 0xe42 <strrev+0x4>
 e4a:	32 97       	sbiw	r30, 0x02	; 2
 e4c:	04 c0       	rjmp	.+8      	; 0xe56 <strrev+0x18>
 e4e:	7c 91       	ld	r23, X
 e50:	6d 93       	st	X+, r22
 e52:	70 83       	st	Z, r23
 e54:	62 91       	ld	r22, -Z
 e56:	ae 17       	cp	r26, r30
 e58:	bf 07       	cpc	r27, r31
 e5a:	c8 f3       	brcs	.-14     	; 0xe4e <strrev+0x10>
 e5c:	08 95       	ret

00000e5e <_exit>:
 e5e:	f8 94       	cli

00000e60 <__stop_program>:
 e60:	ff cf       	rjmp	.-2      	; 0xe60 <__stop_program>
