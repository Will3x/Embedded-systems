
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000d1c  00000db0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  0080012e  0080012e  00000dde  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000195c  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d73  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d83  00000000  00000000  00003687  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  0000440c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000695  00000000  00000000  00004710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  00004da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000057bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 36       	cpi	r26, 0x6B	; 107
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bc 03 	call	0x778	; 0x778 <main>
  9e:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
  b0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <SCH_tasks_G>
  b4:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e0 e3       	ldi	r30, 0x30	; 48
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	82 2f       	mov	r24, r18
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e0 5d       	subi	r30, 0xD0	; 208
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
 104:	16 82       	std	Z+6, r1	; 0x06
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e0 5d       	subi	r30, 0xD0	; 208
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
 12a:	16 82       	std	Z+6, r1	; 0x06
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c0 e3       	ldi	r28, 0x30	; 48
 13c:	d1 e0       	ldi	r29, 0x01	; 1
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 14e:	09 95       	icall
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
 178:	cf 93       	push	r28
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e0 e3       	ldi	r30, 0x30	; 48
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	23 e5       	ldi	r18, 0x53	; 83
 1c8:	31 e0       	ldi	r19, 0x01	; 1
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_receive>:
#define F_CPU 16000000UL
#include <util/delay.h>

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1<<RXC0)));
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <USART_receive+0x4>
	return UDR0 - 48;
 222:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 226:	80 53       	subi	r24, 0x30	; 48
 228:	08 95       	ret

0000022a <USART_send>:

void USART_send(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 22a:	e0 ec       	ldi	r30, 0xC0	; 192
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	90 81       	ld	r25, Z
 230:	95 ff       	sbrs	r25, 5
 232:	fd cf       	rjmp	.-6      	; 0x22e <USART_send+0x4>
	UDR0 = data;
 234:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 238:	08 95       	ret

0000023a <USART_putstring>:
}

void USART_putstring(char* StringPtr)
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
 240:	88 81       	ld	r24, Y
 242:	88 23       	and	r24, r24
 244:	31 f0       	breq	.+12     	; 0x252 <USART_putstring+0x18>
 246:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 248:	0e 94 15 01 	call	0x22a	; 0x22a <USART_send>
	UDR0 = data;
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00){
 24c:	89 91       	ld	r24, Y+
 24e:	81 11       	cpse	r24, r1
 250:	fb cf       	rjmp	.-10     	; 0x248 <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <newLine>:

void newLine()
{
	USART_send('\r');
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	0e 94 15 01 	call	0x22a	; 0x22a <USART_send>
	USART_send('\n');
 25e:	8a e0       	ldi	r24, 0x0A	; 10
 260:	0e 94 15 01 	call	0x22a	; 0x22a <USART_send>
 264:	08 95       	ret

00000266 <read_adc>:
}

uint16_t read_adc(uint8_t channel)
{
	ADMUX &= 0xF0;                    //Clear the older channel that was read
 266:	ec e7       	ldi	r30, 0x7C	; 124
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	90 81       	ld	r25, Z
 26c:	90 7f       	andi	r25, 0xF0	; 240
 26e:	90 83       	st	Z, r25
	ADMUX |= channel;                 //Defines the new ADC channel to be read
 270:	90 81       	ld	r25, Z
 272:	89 2b       	or	r24, r25
 274:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);              //Starts a new conversion
 276:	ea e7       	ldi	r30, 0x7A	; 122
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));        //Wait until the conversion is done
 280:	80 81       	ld	r24, Z
 282:	86 fd       	sbrc	r24, 6
 284:	fd cf       	rjmp	.-6      	; 0x280 <read_adc+0x1a>
	return ADCW;                      //Returns the ADC value of the chosen channel
 286:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 28a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 28e:	08 95       	ret

00000290 <upDown>:
int unsigned combine3(unsigned x, unsigned y, unsigned z)
{
	unsigned pow1 = 10;
	unsigned pow2 = 100;
	return (z * pow2) + (y * pow1) + x;
}
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	83 e5       	ldi	r24, 0x53	; 83
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 31 06 	call	0xc62	; 0xc62 <atoi>
 2a0:	ec 01       	movw	r28, r24
 2a2:	86 e6       	ldi	r24, 0x66	; 102
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 31 06 	call	0xc62	; 0xc62 <atoi>
 2aa:	8c 01       	movw	r16, r24
 2ac:	0e 94 67 04 	call	0x8ce	; 0x8ce <distanceStill>
 2b0:	8c e5       	ldi	r24, 0x5C	; 92
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 31 06 	call	0xc62	; 0xc62 <atoi>
 2b8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <distance_manual>
 2bc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <distance_manual+0x1>
 2c0:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <distance_up+0x1>
 2c4:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <distance_up>
 2c8:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <LDR_down>
 2cc:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <LDR_down+0x1>
 2d0:	c4 17       	cp	r28, r20
 2d2:	d5 07       	cpc	r29, r21
 2d4:	3c f4       	brge	.+14     	; 0x2e4 <upDown+0x54>
 2d6:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <temp_down>
 2da:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <temp_down+0x1>
 2de:	04 17       	cp	r16, r20
 2e0:	15 07       	cpc	r17, r21
 2e2:	3c f0       	brlt	.+14     	; 0x2f2 <upDown+0x62>
 2e4:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <__data_end>
 2e8:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <__data_end+0x1>
 2ec:	45 2b       	or	r20, r21
 2ee:	71 f0       	breq	.+28     	; 0x30c <upDown+0x7c>
 2f0:	b2 c0       	rjmp	.+356    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 2f2:	a9 01       	movw	r20, r18
 2f4:	4f 5f       	subi	r20, 0xFF	; 255
 2f6:	5f 4f       	sbci	r21, 0xFF	; 255
 2f8:	48 17       	cp	r20, r24
 2fa:	59 07       	cpc	r21, r25
 2fc:	54 f5       	brge	.+84     	; 0x352 <upDown+0xc2>
 2fe:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <__data_end>
 302:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <__data_end+0x1>
 306:	45 2b       	or	r20, r21
 308:	09 f4       	brne	.+2      	; 0x30c <upDown+0x7c>
 30a:	ac c0       	rjmp	.+344    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 30c:	2a 98       	cbi	0x05, 2	; 5
 30e:	28 9a       	sbi	0x05, 0	; 5
 310:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 314:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 318:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <distance_down>
 31c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <distance_down+0x1>
 320:	28 17       	cp	r18, r24
 322:	39 07       	cpc	r19, r25
 324:	0c f0       	brlt	.+2      	; 0x328 <upDown+0x98>
 326:	c0 c0       	rjmp	.+384    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 328:	29 9a       	sbi	0x05, 1	; 5
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	81 ee       	ldi	r24, 0xE1	; 225
 32e:	94 e0       	ldi	r25, 0x04	; 4
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <upDown+0xa0>
 338:	00 c0       	rjmp	.+0      	; 0x33a <upDown+0xaa>
 33a:	00 00       	nop
 33c:	29 98       	cbi	0x05, 1	; 5
 33e:	2f ef       	ldi	r18, 0xFF	; 255
 340:	81 ee       	ldi	r24, 0xE1	; 225
 342:	94 e0       	ldi	r25, 0x04	; 4
 344:	21 50       	subi	r18, 0x01	; 1
 346:	80 40       	sbci	r24, 0x00	; 0
 348:	90 40       	sbci	r25, 0x00	; 0
 34a:	e1 f7       	brne	.-8      	; 0x344 <upDown+0xb4>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <upDown+0xbe>
 34e:	00 00       	nop
 350:	ab c0       	rjmp	.+342    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 352:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <LDR_up>
 356:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <LDR_up+0x1>
 35a:	4c 17       	cp	r20, r28
 35c:	5d 07       	cpc	r21, r29
 35e:	3c f4       	brge	.+14     	; 0x36e <upDown+0xde>
 360:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_up>
 364:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_up+0x1>
 368:	40 17       	cp	r20, r16
 36a:	51 07       	cpc	r21, r17
 36c:	44 f0       	brlt	.+16     	; 0x37e <upDown+0xee>
 36e:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <__data_end>
 372:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <__data_end+0x1>
 376:	45 2b       	or	r20, r21
 378:	09 f0       	breq	.+2      	; 0x37c <upDown+0xec>
 37a:	7d c0       	rjmp	.+250    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 37c:	0c c0       	rjmp	.+24     	; 0x396 <upDown+0x106>
 37e:	a9 01       	movw	r20, r18
 380:	41 50       	subi	r20, 0x01	; 1
 382:	51 09       	sbc	r21, r1
 384:	84 17       	cp	r24, r20
 386:	95 07       	cpc	r25, r21
 388:	5c f5       	brge	.+86     	; 0x3e0 <upDown+0x150>
 38a:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <__data_end>
 38e:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <__data_end+0x1>
 392:	45 2b       	or	r20, r21
 394:	29 f1       	breq	.+74     	; 0x3e0 <upDown+0x150>
 396:	28 98       	cbi	0x05, 0	; 5
 398:	2a 9a       	sbi	0x05, 2	; 5
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 3a2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 3a6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <distance_up>
 3aa:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <distance_up+0x1>
 3ae:	82 17       	cp	r24, r18
 3b0:	93 07       	cpc	r25, r19
 3b2:	0c f0       	brlt	.+2      	; 0x3b6 <upDown+0x126>
 3b4:	79 c0       	rjmp	.+242    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 3b6:	29 9a       	sbi	0x05, 1	; 5
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	81 ee       	ldi	r24, 0xE1	; 225
 3bc:	94 e0       	ldi	r25, 0x04	; 4
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <upDown+0x12e>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <upDown+0x138>
 3c8:	00 00       	nop
 3ca:	29 98       	cbi	0x05, 1	; 5
 3cc:	2f ef       	ldi	r18, 0xFF	; 255
 3ce:	81 ee       	ldi	r24, 0xE1	; 225
 3d0:	94 e0       	ldi	r25, 0x04	; 4
 3d2:	21 50       	subi	r18, 0x01	; 1
 3d4:	80 40       	sbci	r24, 0x00	; 0
 3d6:	90 40       	sbci	r25, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <upDown+0x142>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <upDown+0x14c>
 3dc:	00 00       	nop
 3de:	64 c0       	rjmp	.+200    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 3e0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 3e4:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 3e8:	45 2b       	or	r20, r21
 3ea:	c9 f0       	breq	.+50     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3ec:	82 17       	cp	r24, r18
 3ee:	93 07       	cpc	r25, r19
 3f0:	0c f0       	brlt	.+2      	; 0x3f4 <upDown+0x164>
 3f2:	5a c0       	rjmp	.+180    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 3f4:	29 9a       	sbi	0x05, 1	; 5
 3f6:	2f ef       	ldi	r18, 0xFF	; 255
 3f8:	81 ee       	ldi	r24, 0xE1	; 225
 3fa:	94 e0       	ldi	r25, 0x04	; 4
 3fc:	21 50       	subi	r18, 0x01	; 1
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <upDown+0x16c>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
 408:	29 98       	cbi	0x05, 1	; 5
 40a:	2f ef       	ldi	r18, 0xFF	; 255
 40c:	81 ee       	ldi	r24, 0xE1	; 225
 40e:	94 e0       	ldi	r25, 0x04	; 4
 410:	21 50       	subi	r18, 0x01	; 1
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
 41c:	45 c0       	rjmp	.+138    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 41e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <distance_down>
 422:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <distance_down+0x1>
 426:	28 17       	cp	r18, r24
 428:	39 07       	cpc	r19, r25
 42a:	f4 f5       	brge	.+124    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 42c:	29 9a       	sbi	0x05, 1	; 5
 42e:	2f ef       	ldi	r18, 0xFF	; 255
 430:	81 ee       	ldi	r24, 0xE1	; 225
 432:	94 e0       	ldi	r25, 0x04	; 4
 434:	21 50       	subi	r18, 0x01	; 1
 436:	80 40       	sbci	r24, 0x00	; 0
 438:	90 40       	sbci	r25, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
 440:	29 98       	cbi	0x05, 1	; 5
 442:	2f ef       	ldi	r18, 0xFF	; 255
 444:	81 ee       	ldi	r24, 0xE1	; 225
 446:	94 e0       	ldi	r25, 0x04	; 4
 448:	21 50       	subi	r18, 0x01	; 1
 44a:	80 40       	sbci	r24, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 452:	00 00       	nop
 454:	29 c0       	rjmp	.+82     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 456:	a9 01       	movw	r20, r18
 458:	4f 5f       	subi	r20, 0xFF	; 255
 45a:	5f 4f       	sbci	r21, 0xFF	; 255
 45c:	48 17       	cp	r20, r24
 45e:	59 07       	cpc	r21, r25
 460:	94 f4       	brge	.+36     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 462:	54 cf       	rjmp	.-344    	; 0x30c <upDown+0x7c>
 464:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <LDR_up>
 468:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <LDR_up+0x1>
 46c:	4c 17       	cp	r20, r28
 46e:	5d 07       	cpc	r21, r29
 470:	0c f0       	brlt	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	91 cf       	rjmp	.-222    	; 0x396 <upDown+0x106>
 474:	10 c0       	rjmp	.+32     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 476:	a9 01       	movw	r20, r18
 478:	41 50       	subi	r20, 0x01	; 1
 47a:	51 09       	sbc	r21, r1
 47c:	84 17       	cp	r24, r20
 47e:	95 07       	cpc	r25, r21
 480:	0c f0       	brlt	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 482:	ae cf       	rjmp	.-164    	; 0x3e0 <upDown+0x150>
 484:	88 cf       	rjmp	.-240    	; 0x396 <upDown+0x106>
 486:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <LDR_up>
 48a:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <LDR_up+0x1>
 48e:	4c 17       	cp	r20, r28
 490:	5d 07       	cpc	r21, r29
 492:	8c f7       	brge	.-30     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 494:	65 cf       	rjmp	.-310    	; 0x360 <upDown+0xd0>
 496:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_up>
 49a:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_up+0x1>
 49e:	40 17       	cp	r20, r16
 4a0:	51 07       	cpc	r21, r17
 4a2:	0c f0       	brlt	.+2      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a4:	78 cf       	rjmp	.-272    	; 0x396 <upDown+0x106>
 4a6:	6b cf       	rjmp	.-298    	; 0x37e <upDown+0xee>
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	08 95       	ret

000004b2 <__vector_18>:

ISR ( USART_RX_vect )
{
 4b2:	1f 92       	push	r1
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	0f 92       	push	r0
 4ba:	11 24       	eor	r1, r1
 4bc:	2f 93       	push	r18
 4be:	3f 93       	push	r19
 4c0:	4f 93       	push	r20
 4c2:	5f 93       	push	r21
 4c4:	6f 93       	push	r22
 4c6:	7f 93       	push	r23
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	af 93       	push	r26
 4ce:	bf 93       	push	r27
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
	unsigned char ReceivedByte;
	ReceivedByte = UDR0;						// Set ReceivedByte to the received byte from the controller (GUI)
 4d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	switch(ReceivedByte)
 4dc:	83 33       	cpi	r24, 0x33	; 51
 4de:	49 f1       	breq	.+82     	; 0x532 <__vector_18+0x80>
 4e0:	28 f4       	brcc	.+10     	; 0x4ec <__vector_18+0x3a>
 4e2:	81 33       	cpi	r24, 0x31	; 49
 4e4:	51 f0       	breq	.+20     	; 0x4fa <__vector_18+0x48>
 4e6:	82 33       	cpi	r24, 0x32	; 50
 4e8:	a9 f0       	breq	.+42     	; 0x514 <__vector_18+0x62>
 4ea:	c0 c0       	rjmp	.+384    	; 0x66c <__vector_18+0x1ba>
 4ec:	87 33       	cpi	r24, 0x37	; 55
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <__vector_18+0x40>
 4f0:	85 c0       	rjmp	.+266    	; 0x5fc <__vector_18+0x14a>
 4f2:	88 33       	cpi	r24, 0x38	; 56
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <__vector_18+0x46>
 4f6:	a9 c0       	rjmp	.+338    	; 0x64a <__vector_18+0x198>
 4f8:	b9 c0       	rjmp	.+370    	; 0x66c <__vector_18+0x1ba>
	{
		case '1':								// 1 = Shut the sunshade // Red
			manual = 1;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 502:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			distance_manual = 5;
 506:	85 e0       	ldi	r24, 0x05	; 5
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <distance_manual+0x1>
 50e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <distance_manual>
			return;
 512:	ac c0       	rjmp	.+344    	; 0x66c <__vector_18+0x1ba>
			
		case '2':								// 2 = Open the sunshade // Green
			manual = 1;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 51c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			distance_manual = distance_up;
 520:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <distance_up>
 524:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <distance_up+0x1>
 528:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <distance_manual+0x1>
 52c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <distance_manual>
			return;
 530:	9d c0       	rjmp	.+314    	; 0x66c <__vector_18+0x1ba>
			
		case '3':								// 3 = set
			manual = 0;
 532:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__data_end+0x1>
 536:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
			temp_down = combine((int) USART_receive(), (int) USART_receive());
 53a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 53e:	c8 2f       	mov	r28, r24
 540:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 544:	2c 2f       	mov	r18, r28
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	a9 01       	movw	r20, r18
 54a:	44 0f       	add	r20, r20
 54c:	55 1f       	adc	r21, r21
 54e:	22 0f       	add	r18, r18
 550:	33 1f       	adc	r19, r19
 552:	22 0f       	add	r18, r18
 554:	33 1f       	adc	r19, r19
 556:	22 0f       	add	r18, r18
 558:	33 1f       	adc	r19, r19
 55a:	24 0f       	add	r18, r20
 55c:	35 1f       	adc	r19, r21
 55e:	28 0f       	add	r18, r24
 560:	31 1d       	adc	r19, r1
 562:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <temp_down+0x1>
 566:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <temp_down>
			temp_up = combine((int) USART_receive(), (int) USART_receive());
 56a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 56e:	c8 2f       	mov	r28, r24
 570:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 574:	2c 2f       	mov	r18, r28
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	a9 01       	movw	r20, r18
 57a:	44 0f       	add	r20, r20
 57c:	55 1f       	adc	r21, r21
 57e:	22 0f       	add	r18, r18
 580:	33 1f       	adc	r19, r19
 582:	22 0f       	add	r18, r18
 584:	33 1f       	adc	r19, r19
 586:	22 0f       	add	r18, r18
 588:	33 1f       	adc	r19, r19
 58a:	24 0f       	add	r18, r20
 58c:	35 1f       	adc	r19, r21
 58e:	28 0f       	add	r18, r24
 590:	31 1d       	adc	r19, r1
 592:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <temp_up+0x1>
 596:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <temp_up>
			LDR_down = combine((int) USART_receive(), (int) USART_receive());
 59a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 59e:	c8 2f       	mov	r28, r24
 5a0:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5a4:	2c 2f       	mov	r18, r28
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	a9 01       	movw	r20, r18
 5aa:	44 0f       	add	r20, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	22 0f       	add	r18, r18
 5b0:	33 1f       	adc	r19, r19
 5b2:	22 0f       	add	r18, r18
 5b4:	33 1f       	adc	r19, r19
 5b6:	22 0f       	add	r18, r18
 5b8:	33 1f       	adc	r19, r19
 5ba:	24 0f       	add	r18, r20
 5bc:	35 1f       	adc	r19, r21
 5be:	28 0f       	add	r18, r24
 5c0:	31 1d       	adc	r19, r1
 5c2:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <LDR_down+0x1>
 5c6:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <LDR_down>
			LDR_up = combine((int) USART_receive(), (int) USART_receive());
 5ca:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5ce:	c8 2f       	mov	r28, r24
 5d0:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5d4:	2c 2f       	mov	r18, r28
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	a9 01       	movw	r20, r18
 5da:	44 0f       	add	r20, r20
 5dc:	55 1f       	adc	r21, r21
 5de:	22 0f       	add	r18, r18
 5e0:	33 1f       	adc	r19, r19
 5e2:	22 0f       	add	r18, r18
 5e4:	33 1f       	adc	r19, r19
 5e6:	22 0f       	add	r18, r18
 5e8:	33 1f       	adc	r19, r19
 5ea:	24 0f       	add	r18, r20
 5ec:	35 1f       	adc	r19, r21
 5ee:	28 0f       	add	r18, r24
 5f0:	31 1d       	adc	r19, r1
 5f2:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <LDR_up+0x1>
 5f6:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <LDR_up>
			return;
 5fa:	38 c0       	rjmp	.+112    	; 0x66c <__vector_18+0x1ba>
			
		case '7':								// 7 = open/closing distance
			manual = 1;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 604:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			int closeopen = combine3((int) USART_receive(), (int) USART_receive(), (int) USART_receive());
 608:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 60c:	d8 2f       	mov	r29, r24
 60e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 612:	c8 2f       	mov	r28, r24
 614:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
			distance_manual = closeopen;
 618:	2c 2f       	mov	r18, r28
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	a9 01       	movw	r20, r18
 61e:	44 0f       	add	r20, r20
 620:	55 1f       	adc	r21, r21
 622:	22 0f       	add	r18, r18
 624:	33 1f       	adc	r19, r19
 626:	22 0f       	add	r18, r18
 628:	33 1f       	adc	r19, r19
 62a:	22 0f       	add	r18, r18
 62c:	33 1f       	adc	r19, r19
 62e:	24 0f       	add	r18, r20
 630:	35 1f       	adc	r19, r21
 632:	94 e6       	ldi	r25, 0x64	; 100
 634:	d9 9f       	mul	r29, r25
 636:	20 0d       	add	r18, r0
 638:	31 1d       	adc	r19, r1
 63a:	11 24       	eor	r1, r1
 63c:	28 0f       	add	r18, r24
 63e:	31 1d       	adc	r19, r1
 640:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <distance_manual+0x1>
 644:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <distance_manual>
			return;
 648:	11 c0       	rjmp	.+34     	; 0x66c <__vector_18+0x1ba>
			
		case '8':								// 8 = set manual ON / OFF
			manual = (int) USART_receive();
 64a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 654:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			if (manual == 1)
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	41 f4       	brne	.+16     	; 0x66c <__vector_18+0x1ba>
			{
				distance_manual = (int) atoi(distance_sensor);
 65c:	8c e5       	ldi	r24, 0x5C	; 92
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	0e 94 31 06 	call	0xc62	; 0xc62 <atoi>
 664:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <distance_manual+0x1>
 668:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <distance_manual>
			return;
		
		default:
			return;
	}
 66c:	ff 91       	pop	r31
 66e:	ef 91       	pop	r30
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <init_connectie>:
#define BAUDRATE 9600
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)

void init_connectie()
{
	UCSR0A = 0;							// disable U2X mode
 692:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);	// Set frame format: 8data, 2stop bit 
 696:	8e e0       	ldi	r24, 0x0E	; 14
 698:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 69c:	08 95       	ret

0000069e <init_USART>:
}

void init_USART()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 69e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 6a2:	87 e6       	ldi	r24, 0x67	; 103
 6a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);		// Enable receiver and transmitter
 6a8:	e1 ec       	ldi	r30, 0xC1	; 193
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	88 e1       	ldi	r24, 0x18	; 24
 6ae:	80 83       	st	Z, r24
	UCSR0C = (3<<UCSZ00);
 6b0:	86 e0       	ldi	r24, 0x06	; 6
 6b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << RXCIE0 );			// Enable the USART Receive Complete interrupt ( USART_RXC )
 6b6:	80 81       	ld	r24, Z
 6b8:	80 68       	ori	r24, 0x80	; 128
 6ba:	80 83       	st	Z, r24
	sei ();								// Enable the Global Interrupt Enable flag so that interrupts can be processed
 6bc:	78 94       	sei
 6be:	08 95       	ret

000006c0 <init_scheduler>:
}

void init_scheduler()
{
	SCH_Init_T1();
 6c0:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temperature,1,25);
 6c4:	49 e1       	ldi	r20, 0x19	; 25
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	61 e0       	ldi	r22, 0x01	; 1
 6ca:	70 e0       	ldi	r23, 0x00	; 0
 6cc:	81 ec       	ldi	r24, 0xC1	; 193
 6ce:	93 e0       	ldi	r25, 0x03	; 3
 6d0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(ldr,2,25);
 6d4:	49 e1       	ldi	r20, 0x19	; 25
 6d6:	50 e0       	ldi	r21, 0x00	; 0
 6d8:	62 e0       	ldi	r22, 0x02	; 2
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	8b ef       	ldi	r24, 0xFB	; 251
 6de:	93 e0       	ldi	r25, 0x03	; 3
 6e0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(distance,3,25);
 6e4:	49 e1       	ldi	r20, 0x19	; 25
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	63 e0       	ldi	r22, 0x03	; 3
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	8f e2       	ldi	r24, 0x2F	; 47
 6ee:	94 e0       	ldi	r25, 0x04	; 4
 6f0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(newLine,4,25);
 6f4:	49 e1       	ldi	r20, 0x19	; 25
 6f6:	50 e0       	ldi	r21, 0x00	; 0
 6f8:	64 e0       	ldi	r22, 0x04	; 4
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	8c e2       	ldi	r24, 0x2C	; 44
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(upDown,0,10);
 704:	4a e0       	ldi	r20, 0x0A	; 10
 706:	50 e0       	ldi	r21, 0x00	; 0
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	88 e4       	ldi	r24, 0x48	; 72
 70e:	91 e0       	ldi	r25, 0x01	; 1
 710:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 714:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 718:	08 95       	ret

0000071a <init_adc>:
}

void init_adc()
{
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    // 16Mhz/128 = 125Khz the ADC reference clock
 71a:	ea e7       	ldi	r30, 0x7A	; 122
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	87 60       	ori	r24, 0x07	; 7
 722:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);							 // Voltage reference from AVCC (5v)
 724:	ac e7       	ldi	r26, 0x7C	; 124
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	8c 91       	ld	r24, X
 72a:	80 64       	ori	r24, 0x40	; 64
 72c:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);							 // Turn on ADC
 72e:	80 81       	ld	r24, Z
 730:	80 68       	ori	r24, 0x80	; 128
 732:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							 // Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 734:	80 81       	ld	r24, Z
 736:	80 64       	ori	r24, 0x40	; 64
 738:	80 83       	st	Z, r24
 73a:	08 95       	ret

0000073c <init_dist>:
}

void init_dist()
{
	DDRD |= _BV(PD3);			// Pin 3 Trigger Output
 73c:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~_BV(PD2);			// Pin 2 Echo Input
 73e:	52 98       	cbi	0x0a, 2	; 10
 740:	08 95       	ret

00000742 <init_LEDS>:
}

void init_LEDS()
{ 
	DDRB |= _BV(PB0);			// pin0 B = output
 742:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1);			// pin1 B = output
 744:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(PB2);			// pin2 B = output
 746:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << PB2);		// Green LED on
 748:	2a 9a       	sbi	0x05, 2	; 5
 74a:	08 95       	ret

0000074c <setup>:
 74c:	0e 94 49 03 	call	0x692	; 0x692 <init_connectie>
 750:	0e 94 8d 03 	call	0x71a	; 0x71a <init_adc>
 754:	0e 94 4f 03 	call	0x69e	; 0x69e <init_USART>
 758:	0e 94 9e 03 	call	0x73c	; 0x73c <init_dist>
 75c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <init_scheduler>
 760:	0e 94 a1 03 	call	0x742	; 0x742 <init_LEDS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 764:	2f ef       	ldi	r18, 0xFF	; 255
 766:	89 e6       	ldi	r24, 0x69	; 105
 768:	98 e1       	ldi	r25, 0x18	; 24
 76a:	21 50       	subi	r18, 0x01	; 1
 76c:	80 40       	sbci	r24, 0x00	; 0
 76e:	90 40       	sbci	r25, 0x00	; 0
 770:	e1 f7       	brne	.-8      	; 0x76a <setup+0x1e>
 772:	00 c0       	rjmp	.+0      	; 0x774 <setup+0x28>
 774:	00 00       	nop
 776:	08 95       	ret

00000778 <main>:
 778:	0e 94 a6 03 	call	0x74c	; 0x74c <setup>
 77c:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 780:	fd cf       	rjmp	.-6      	; 0x77c <main+0x4>

00000782 <temperature>:
#include "sensors.h"
#include "serial.h"

void temperature()
{
	USART_putstring("Temp : ");
 782:	80 e1       	ldi	r24, 0x10	; 16
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	adc_value = read_adc(0);
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	0e 94 33 01 	call	0x266	; 0x266 <read_adc>
	adc_value = (((((double)adc_value / 1024) * 5) - 0.5) * 100); // Calculate temperature
 790:	bc 01       	movw	r22, r24
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatunsisf>
 79a:	20 e0       	ldi	r18, 0x00	; 0
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	40 e8       	ldi	r20, 0x80	; 128
 7a0:	5a e3       	ldi	r21, 0x3A	; 58
 7a2:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 7a6:	20 e0       	ldi	r18, 0x00	; 0
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	40 ea       	ldi	r20, 0xA0	; 160
 7ac:	50 e4       	ldi	r21, 0x40	; 64
 7ae:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 7b2:	20 e0       	ldi	r18, 0x00	; 0
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	40 e0       	ldi	r20, 0x00	; 0
 7b8:	5f e3       	ldi	r21, 0x3F	; 63
 7ba:	0e 94 93 04 	call	0x926	; 0x926 <__subsf3>
 7be:	20 e0       	ldi	r18, 0x00	; 0
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	48 ec       	ldi	r20, 0xC8	; 200
 7c4:	52 e4       	ldi	r21, 0x42	; 66
 7c6:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 7ca:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 7ce:	dc 01       	movw	r26, r24
 7d0:	cb 01       	movw	r24, r22
 7d2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <adc_value+0x1>
 7d6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <adc_value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7da:	4a e0       	ldi	r20, 0x0A	; 10
 7dc:	66 e6       	ldi	r22, 0x66	; 102
 7de:	71 e0       	ldi	r23, 0x01	; 1
 7e0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__itoa_ncheck>
	itoa(adc_value, temp_sensor, 10);							  //Convert the read value to an ascii string
	USART_putstring(temp_sensor);								  //Send the converted value to the terminal
 7e4:	86 e6       	ldi	r24, 0x66	; 102
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	USART_putstring("  ");
 7ec:	88 e1       	ldi	r24, 0x18	; 24
 7ee:	91 e0       	ldi	r25, 0x01	; 1
 7f0:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
 7f4:	08 95       	ret

000007f6 <ldr>:
}

void ldr()
{
	USART_putstring("LDR : ");
 7f6:	8b e1       	ldi	r24, 0x1B	; 27
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	adc_value = read_adc(1);
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	0e 94 33 01 	call	0x266	; 0x266 <read_adc>
	adc_value = ((((double)adc_value)/1024)*100 *1.5);			  // Calculate the amount of light
 804:	bc 01       	movw	r22, r24
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatunsisf>
 80e:	20 e0       	ldi	r18, 0x00	; 0
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	40 e8       	ldi	r20, 0x80	; 128
 814:	5a e3       	ldi	r21, 0x3A	; 58
 816:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 81a:	20 e0       	ldi	r18, 0x00	; 0
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	48 ec       	ldi	r20, 0xC8	; 200
 820:	52 e4       	ldi	r21, 0x42	; 66
 822:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 826:	20 e0       	ldi	r18, 0x00	; 0
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	40 ec       	ldi	r20, 0xC0	; 192
 82c:	5f e3       	ldi	r21, 0x3F	; 63
 82e:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 832:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 836:	dc 01       	movw	r26, r24
 838:	cb 01       	movw	r24, r22
 83a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <adc_value+0x1>
 83e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <adc_value>
 842:	4a e0       	ldi	r20, 0x0A	; 10
 844:	63 e5       	ldi	r22, 0x53	; 83
 846:	71 e0       	ldi	r23, 0x01	; 1
 848:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__itoa_ncheck>
	itoa(adc_value, LDR_sensor, 10);							  // Convert the read value to an ascii string
	USART_putstring(LDR_sensor);								  // Send the converted value to the terminal
 84c:	83 e5       	ldi	r24, 0x53	; 83
 84e:	91 e0       	ldi	r25, 0x01	; 1
 850:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	USART_putstring("  ");
 854:	88 e1       	ldi	r24, 0x18	; 24
 856:	91 e0       	ldi	r25, 0x01	; 1
 858:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
 85c:	08 95       	ret

0000085e <distance>:
}

void distance()
{
	OCR1A = 0x640;								// Max length = 400 cm * 4 = Dec.1600 == Hex 640
 85e:	80 e4       	ldi	r24, 0x40	; 64
 860:	96 e0       	ldi	r25, 0x06	; 6
 862:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 866:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	USART_putstring("distance : ");
 86a:	82 e2       	ldi	r24, 0x22	; 34
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	PORTD |= _BV(PD3);
 872:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 874:	85 e3       	ldi	r24, 0x35	; 53
 876:	8a 95       	dec	r24
 878:	f1 f7       	brne	.-4      	; 0x876 <distance+0x18>
 87a:	00 00       	nop
	_delay_us(10);
	PORTD &= ~_BV(PD3);							// Give pulse from 10us
 87c:	5b 98       	cbi	0x0b, 3	; 11
	
	loop_until_bit_is_set(PIND, PD2);
 87e:	4a 9b       	sbis	0x09, 2	; 9
 880:	fe cf       	rjmp	.-4      	; 0x87e <distance+0x20>
	TCNT1 = 0;
 882:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 886:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	loop_until_bit_is_clear(PIND, PD2);
 88a:	4a 99       	sbic	0x09, 2	; 9
 88c:	fe cf       	rjmp	.-4      	; 0x88a <distance+0x2c>
	uint16_t count = TCNT1;
 88e:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 892:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatunsisf>
 89e:	20 e0       	ldi	r18, 0x00	; 0
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	40 e8       	ldi	r20, 0x80	; 128
 8a4:	5e e3       	ldi	r21, 0x3E	; 62
 8a6:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 8aa:	0e 94 00 05 	call	0xa00	; 0xa00 <__fixsfsi>
 8ae:	dc 01       	movw	r26, r24
 8b0:	cb 01       	movw	r24, r22
 8b2:	4a e0       	ldi	r20, 0x0A	; 10
 8b4:	6c e5       	ldi	r22, 0x5C	; 92
 8b6:	71 e0       	ldi	r23, 0x01	; 1
 8b8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__itoa_ncheck>
	float distance = ((float)count / 4);		// Calculate the distance

	itoa(distance, distance_sensor, 10);        // Convert the read value to an ascii string
	USART_putstring(distance_sensor);			// Send the converted value to the terminal
 8bc:	8c e5       	ldi	r24, 0x5C	; 92
 8be:	91 e0       	ldi	r25, 0x01	; 1
 8c0:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	USART_putstring("  ");
 8c4:	88 e1       	ldi	r24, 0x18	; 24
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
 8cc:	08 95       	ret

000008ce <distanceStill>:
}

void distanceStill()
{
	OCR1A = 0x640;								// Max length = 400 cm * 4 = Dec.1600 == Hex 640
 8ce:	80 e4       	ldi	r24, 0x40	; 64
 8d0:	96 e0       	ldi	r25, 0x06	; 6
 8d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 8d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	PORTD |= _BV(PD3);
 8da:	5b 9a       	sbi	0x0b, 3	; 11
 8dc:	85 e3       	ldi	r24, 0x35	; 53
 8de:	8a 95       	dec	r24
 8e0:	f1 f7       	brne	.-4      	; 0x8de <distanceStill+0x10>
 8e2:	00 00       	nop
	_delay_us(10);
	PORTD &= ~_BV(PD3);							// Give pulse from 10us
 8e4:	5b 98       	cbi	0x0b, 3	; 11
	loop_until_bit_is_set(PIND, PD2);
 8e6:	4a 9b       	sbis	0x09, 2	; 9
 8e8:	fe cf       	rjmp	.-4      	; 0x8e6 <distanceStill+0x18>
	TCNT1 = 0;
 8ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 8ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	loop_until_bit_is_clear(PIND, PD2);
 8f2:	4a 99       	sbic	0x09, 2	; 9
 8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <distanceStill+0x24>
	uint16_t count = TCNT1;
 8f6:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 8fa:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatunsisf>
 906:	20 e0       	ldi	r18, 0x00	; 0
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	40 e8       	ldi	r20, 0x80	; 128
 90c:	5e e3       	ldi	r21, 0x3E	; 62
 90e:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 912:	0e 94 00 05 	call	0xa00	; 0xa00 <__fixsfsi>
 916:	dc 01       	movw	r26, r24
 918:	cb 01       	movw	r24, r22
 91a:	4a e0       	ldi	r20, 0x0A	; 10
 91c:	6c e5       	ldi	r22, 0x5C	; 92
 91e:	71 e0       	ldi	r23, 0x01	; 1
 920:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__itoa_ncheck>
 924:	08 95       	ret

00000926 <__subsf3>:
 926:	50 58       	subi	r21, 0x80	; 128

00000928 <__addsf3>:
 928:	bb 27       	eor	r27, r27
 92a:	aa 27       	eor	r26, r26
 92c:	0e 94 ab 04 	call	0x956	; 0x956 <__addsf3x>
 930:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_round>
 934:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscA>
 938:	38 f0       	brcs	.+14     	; 0x948 <__addsf3+0x20>
 93a:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscB>
 93e:	20 f0       	brcs	.+8      	; 0x948 <__addsf3+0x20>
 940:	39 f4       	brne	.+14     	; 0x950 <__addsf3+0x28>
 942:	9f 3f       	cpi	r25, 0xFF	; 255
 944:	19 f4       	brne	.+6      	; 0x94c <__addsf3+0x24>
 946:	26 f4       	brtc	.+8      	; 0x950 <__addsf3+0x28>
 948:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>
 94c:	0e f4       	brtc	.+2      	; 0x950 <__addsf3+0x28>
 94e:	e0 95       	com	r30
 950:	e7 fb       	bst	r30, 7
 952:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>

00000956 <__addsf3x>:
 956:	e9 2f       	mov	r30, r25
 958:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_split3>
 95c:	58 f3       	brcs	.-42     	; 0x934 <__addsf3+0xc>
 95e:	ba 17       	cp	r27, r26
 960:	62 07       	cpc	r22, r18
 962:	73 07       	cpc	r23, r19
 964:	84 07       	cpc	r24, r20
 966:	95 07       	cpc	r25, r21
 968:	20 f0       	brcs	.+8      	; 0x972 <__addsf3x+0x1c>
 96a:	79 f4       	brne	.+30     	; 0x98a <__addsf3x+0x34>
 96c:	a6 f5       	brtc	.+104    	; 0x9d6 <__addsf3x+0x80>
 96e:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_zero>
 972:	0e f4       	brtc	.+2      	; 0x976 <__addsf3x+0x20>
 974:	e0 95       	com	r30
 976:	0b 2e       	mov	r0, r27
 978:	ba 2f       	mov	r27, r26
 97a:	a0 2d       	mov	r26, r0
 97c:	0b 01       	movw	r0, r22
 97e:	b9 01       	movw	r22, r18
 980:	90 01       	movw	r18, r0
 982:	0c 01       	movw	r0, r24
 984:	ca 01       	movw	r24, r20
 986:	a0 01       	movw	r20, r0
 988:	11 24       	eor	r1, r1
 98a:	ff 27       	eor	r31, r31
 98c:	59 1b       	sub	r21, r25
 98e:	99 f0       	breq	.+38     	; 0x9b6 <__addsf3x+0x60>
 990:	59 3f       	cpi	r21, 0xF9	; 249
 992:	50 f4       	brcc	.+20     	; 0x9a8 <__addsf3x+0x52>
 994:	50 3e       	cpi	r21, 0xE0	; 224
 996:	68 f1       	brcs	.+90     	; 0x9f2 <__addsf3x+0x9c>
 998:	1a 16       	cp	r1, r26
 99a:	f0 40       	sbci	r31, 0x00	; 0
 99c:	a2 2f       	mov	r26, r18
 99e:	23 2f       	mov	r18, r19
 9a0:	34 2f       	mov	r19, r20
 9a2:	44 27       	eor	r20, r20
 9a4:	58 5f       	subi	r21, 0xF8	; 248
 9a6:	f3 cf       	rjmp	.-26     	; 0x98e <__addsf3x+0x38>
 9a8:	46 95       	lsr	r20
 9aa:	37 95       	ror	r19
 9ac:	27 95       	ror	r18
 9ae:	a7 95       	ror	r26
 9b0:	f0 40       	sbci	r31, 0x00	; 0
 9b2:	53 95       	inc	r21
 9b4:	c9 f7       	brne	.-14     	; 0x9a8 <__addsf3x+0x52>
 9b6:	7e f4       	brtc	.+30     	; 0x9d6 <__addsf3x+0x80>
 9b8:	1f 16       	cp	r1, r31
 9ba:	ba 0b       	sbc	r27, r26
 9bc:	62 0b       	sbc	r22, r18
 9be:	73 0b       	sbc	r23, r19
 9c0:	84 0b       	sbc	r24, r20
 9c2:	ba f0       	brmi	.+46     	; 0x9f2 <__addsf3x+0x9c>
 9c4:	91 50       	subi	r25, 0x01	; 1
 9c6:	a1 f0       	breq	.+40     	; 0x9f0 <__addsf3x+0x9a>
 9c8:	ff 0f       	add	r31, r31
 9ca:	bb 1f       	adc	r27, r27
 9cc:	66 1f       	adc	r22, r22
 9ce:	77 1f       	adc	r23, r23
 9d0:	88 1f       	adc	r24, r24
 9d2:	c2 f7       	brpl	.-16     	; 0x9c4 <__addsf3x+0x6e>
 9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__addsf3x+0x9c>
 9d6:	ba 0f       	add	r27, r26
 9d8:	62 1f       	adc	r22, r18
 9da:	73 1f       	adc	r23, r19
 9dc:	84 1f       	adc	r24, r20
 9de:	48 f4       	brcc	.+18     	; 0x9f2 <__addsf3x+0x9c>
 9e0:	87 95       	ror	r24
 9e2:	77 95       	ror	r23
 9e4:	67 95       	ror	r22
 9e6:	b7 95       	ror	r27
 9e8:	f7 95       	ror	r31
 9ea:	9e 3f       	cpi	r25, 0xFE	; 254
 9ec:	08 f0       	brcs	.+2      	; 0x9f0 <__addsf3x+0x9a>
 9ee:	b0 cf       	rjmp	.-160    	; 0x950 <__addsf3+0x28>
 9f0:	93 95       	inc	r25
 9f2:	88 0f       	add	r24, r24
 9f4:	08 f0       	brcs	.+2      	; 0x9f8 <__addsf3x+0xa2>
 9f6:	99 27       	eor	r25, r25
 9f8:	ee 0f       	add	r30, r30
 9fa:	97 95       	ror	r25
 9fc:	87 95       	ror	r24
 9fe:	08 95       	ret

00000a00 <__fixsfsi>:
 a00:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 a04:	68 94       	set
 a06:	b1 11       	cpse	r27, r1
 a08:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>
 a0c:	08 95       	ret

00000a0e <__fixunssfsi>:
 a0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_splitA>
 a12:	88 f0       	brcs	.+34     	; 0xa36 <__fixunssfsi+0x28>
 a14:	9f 57       	subi	r25, 0x7F	; 127
 a16:	98 f0       	brcs	.+38     	; 0xa3e <__fixunssfsi+0x30>
 a18:	b9 2f       	mov	r27, r25
 a1a:	99 27       	eor	r25, r25
 a1c:	b7 51       	subi	r27, 0x17	; 23
 a1e:	b0 f0       	brcs	.+44     	; 0xa4c <__fixunssfsi+0x3e>
 a20:	e1 f0       	breq	.+56     	; 0xa5a <__fixunssfsi+0x4c>
 a22:	66 0f       	add	r22, r22
 a24:	77 1f       	adc	r23, r23
 a26:	88 1f       	adc	r24, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	1a f0       	brmi	.+6      	; 0xa32 <__fixunssfsi+0x24>
 a2c:	ba 95       	dec	r27
 a2e:	c9 f7       	brne	.-14     	; 0xa22 <__fixunssfsi+0x14>
 a30:	14 c0       	rjmp	.+40     	; 0xa5a <__fixunssfsi+0x4c>
 a32:	b1 30       	cpi	r27, 0x01	; 1
 a34:	91 f0       	breq	.+36     	; 0xa5a <__fixunssfsi+0x4c>
 a36:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__fp_zero>
 a3a:	b1 e0       	ldi	r27, 0x01	; 1
 a3c:	08 95       	ret
 a3e:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_zero>
 a42:	67 2f       	mov	r22, r23
 a44:	78 2f       	mov	r23, r24
 a46:	88 27       	eor	r24, r24
 a48:	b8 5f       	subi	r27, 0xF8	; 248
 a4a:	39 f0       	breq	.+14     	; 0xa5a <__fixunssfsi+0x4c>
 a4c:	b9 3f       	cpi	r27, 0xF9	; 249
 a4e:	cc f3       	brlt	.-14     	; 0xa42 <__fixunssfsi+0x34>
 a50:	86 95       	lsr	r24
 a52:	77 95       	ror	r23
 a54:	67 95       	ror	r22
 a56:	b3 95       	inc	r27
 a58:	d9 f7       	brne	.-10     	; 0xa50 <__fixunssfsi+0x42>
 a5a:	3e f4       	brtc	.+14     	; 0xa6a <__fixunssfsi+0x5c>
 a5c:	90 95       	com	r25
 a5e:	80 95       	com	r24
 a60:	70 95       	com	r23
 a62:	61 95       	neg	r22
 a64:	7f 4f       	sbci	r23, 0xFF	; 255
 a66:	8f 4f       	sbci	r24, 0xFF	; 255
 a68:	9f 4f       	sbci	r25, 0xFF	; 255
 a6a:	08 95       	ret

00000a6c <__floatunsisf>:
 a6c:	e8 94       	clt
 a6e:	09 c0       	rjmp	.+18     	; 0xa82 <__floatsisf+0x12>

00000a70 <__floatsisf>:
 a70:	97 fb       	bst	r25, 7
 a72:	3e f4       	brtc	.+14     	; 0xa82 <__floatsisf+0x12>
 a74:	90 95       	com	r25
 a76:	80 95       	com	r24
 a78:	70 95       	com	r23
 a7a:	61 95       	neg	r22
 a7c:	7f 4f       	sbci	r23, 0xFF	; 255
 a7e:	8f 4f       	sbci	r24, 0xFF	; 255
 a80:	9f 4f       	sbci	r25, 0xFF	; 255
 a82:	99 23       	and	r25, r25
 a84:	a9 f0       	breq	.+42     	; 0xab0 <__floatsisf+0x40>
 a86:	f9 2f       	mov	r31, r25
 a88:	96 e9       	ldi	r25, 0x96	; 150
 a8a:	bb 27       	eor	r27, r27
 a8c:	93 95       	inc	r25
 a8e:	f6 95       	lsr	r31
 a90:	87 95       	ror	r24
 a92:	77 95       	ror	r23
 a94:	67 95       	ror	r22
 a96:	b7 95       	ror	r27
 a98:	f1 11       	cpse	r31, r1
 a9a:	f8 cf       	rjmp	.-16     	; 0xa8c <__floatsisf+0x1c>
 a9c:	fa f4       	brpl	.+62     	; 0xadc <__floatsisf+0x6c>
 a9e:	bb 0f       	add	r27, r27
 aa0:	11 f4       	brne	.+4      	; 0xaa6 <__floatsisf+0x36>
 aa2:	60 ff       	sbrs	r22, 0
 aa4:	1b c0       	rjmp	.+54     	; 0xadc <__floatsisf+0x6c>
 aa6:	6f 5f       	subi	r22, 0xFF	; 255
 aa8:	7f 4f       	sbci	r23, 0xFF	; 255
 aaa:	8f 4f       	sbci	r24, 0xFF	; 255
 aac:	9f 4f       	sbci	r25, 0xFF	; 255
 aae:	16 c0       	rjmp	.+44     	; 0xadc <__floatsisf+0x6c>
 ab0:	88 23       	and	r24, r24
 ab2:	11 f0       	breq	.+4      	; 0xab8 <__floatsisf+0x48>
 ab4:	96 e9       	ldi	r25, 0x96	; 150
 ab6:	11 c0       	rjmp	.+34     	; 0xada <__floatsisf+0x6a>
 ab8:	77 23       	and	r23, r23
 aba:	21 f0       	breq	.+8      	; 0xac4 <__floatsisf+0x54>
 abc:	9e e8       	ldi	r25, 0x8E	; 142
 abe:	87 2f       	mov	r24, r23
 ac0:	76 2f       	mov	r23, r22
 ac2:	05 c0       	rjmp	.+10     	; 0xace <__floatsisf+0x5e>
 ac4:	66 23       	and	r22, r22
 ac6:	71 f0       	breq	.+28     	; 0xae4 <__floatsisf+0x74>
 ac8:	96 e8       	ldi	r25, 0x86	; 134
 aca:	86 2f       	mov	r24, r22
 acc:	70 e0       	ldi	r23, 0x00	; 0
 ace:	60 e0       	ldi	r22, 0x00	; 0
 ad0:	2a f0       	brmi	.+10     	; 0xadc <__floatsisf+0x6c>
 ad2:	9a 95       	dec	r25
 ad4:	66 0f       	add	r22, r22
 ad6:	77 1f       	adc	r23, r23
 ad8:	88 1f       	adc	r24, r24
 ada:	da f7       	brpl	.-10     	; 0xad2 <__floatsisf+0x62>
 adc:	88 0f       	add	r24, r24
 ade:	96 95       	lsr	r25
 ae0:	87 95       	ror	r24
 ae2:	97 f9       	bld	r25, 7
 ae4:	08 95       	ret

00000ae6 <__fp_inf>:
 ae6:	97 f9       	bld	r25, 7
 ae8:	9f 67       	ori	r25, 0x7F	; 127
 aea:	80 e8       	ldi	r24, 0x80	; 128
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	60 e0       	ldi	r22, 0x00	; 0
 af0:	08 95       	ret

00000af2 <__fp_nan>:
 af2:	9f ef       	ldi	r25, 0xFF	; 255
 af4:	80 ec       	ldi	r24, 0xC0	; 192
 af6:	08 95       	ret

00000af8 <__fp_pscA>:
 af8:	00 24       	eor	r0, r0
 afa:	0a 94       	dec	r0
 afc:	16 16       	cp	r1, r22
 afe:	17 06       	cpc	r1, r23
 b00:	18 06       	cpc	r1, r24
 b02:	09 06       	cpc	r0, r25
 b04:	08 95       	ret

00000b06 <__fp_pscB>:
 b06:	00 24       	eor	r0, r0
 b08:	0a 94       	dec	r0
 b0a:	12 16       	cp	r1, r18
 b0c:	13 06       	cpc	r1, r19
 b0e:	14 06       	cpc	r1, r20
 b10:	05 06       	cpc	r0, r21
 b12:	08 95       	ret

00000b14 <__fp_round>:
 b14:	09 2e       	mov	r0, r25
 b16:	03 94       	inc	r0
 b18:	00 0c       	add	r0, r0
 b1a:	11 f4       	brne	.+4      	; 0xb20 <__fp_round+0xc>
 b1c:	88 23       	and	r24, r24
 b1e:	52 f0       	brmi	.+20     	; 0xb34 <__fp_round+0x20>
 b20:	bb 0f       	add	r27, r27
 b22:	40 f4       	brcc	.+16     	; 0xb34 <__fp_round+0x20>
 b24:	bf 2b       	or	r27, r31
 b26:	11 f4       	brne	.+4      	; 0xb2c <__fp_round+0x18>
 b28:	60 ff       	sbrs	r22, 0
 b2a:	04 c0       	rjmp	.+8      	; 0xb34 <__fp_round+0x20>
 b2c:	6f 5f       	subi	r22, 0xFF	; 255
 b2e:	7f 4f       	sbci	r23, 0xFF	; 255
 b30:	8f 4f       	sbci	r24, 0xFF	; 255
 b32:	9f 4f       	sbci	r25, 0xFF	; 255
 b34:	08 95       	ret

00000b36 <__fp_split3>:
 b36:	57 fd       	sbrc	r21, 7
 b38:	90 58       	subi	r25, 0x80	; 128
 b3a:	44 0f       	add	r20, r20
 b3c:	55 1f       	adc	r21, r21
 b3e:	59 f0       	breq	.+22     	; 0xb56 <__fp_splitA+0x10>
 b40:	5f 3f       	cpi	r21, 0xFF	; 255
 b42:	71 f0       	breq	.+28     	; 0xb60 <__fp_splitA+0x1a>
 b44:	47 95       	ror	r20

00000b46 <__fp_splitA>:
 b46:	88 0f       	add	r24, r24
 b48:	97 fb       	bst	r25, 7
 b4a:	99 1f       	adc	r25, r25
 b4c:	61 f0       	breq	.+24     	; 0xb66 <__fp_splitA+0x20>
 b4e:	9f 3f       	cpi	r25, 0xFF	; 255
 b50:	79 f0       	breq	.+30     	; 0xb70 <__fp_splitA+0x2a>
 b52:	87 95       	ror	r24
 b54:	08 95       	ret
 b56:	12 16       	cp	r1, r18
 b58:	13 06       	cpc	r1, r19
 b5a:	14 06       	cpc	r1, r20
 b5c:	55 1f       	adc	r21, r21
 b5e:	f2 cf       	rjmp	.-28     	; 0xb44 <__fp_split3+0xe>
 b60:	46 95       	lsr	r20
 b62:	f1 df       	rcall	.-30     	; 0xb46 <__fp_splitA>
 b64:	08 c0       	rjmp	.+16     	; 0xb76 <__fp_splitA+0x30>
 b66:	16 16       	cp	r1, r22
 b68:	17 06       	cpc	r1, r23
 b6a:	18 06       	cpc	r1, r24
 b6c:	99 1f       	adc	r25, r25
 b6e:	f1 cf       	rjmp	.-30     	; 0xb52 <__fp_splitA+0xc>
 b70:	86 95       	lsr	r24
 b72:	71 05       	cpc	r23, r1
 b74:	61 05       	cpc	r22, r1
 b76:	08 94       	sec
 b78:	08 95       	ret

00000b7a <__fp_zero>:
 b7a:	e8 94       	clt

00000b7c <__fp_szero>:
 b7c:	bb 27       	eor	r27, r27
 b7e:	66 27       	eor	r22, r22
 b80:	77 27       	eor	r23, r23
 b82:	cb 01       	movw	r24, r22
 b84:	97 f9       	bld	r25, 7
 b86:	08 95       	ret

00000b88 <__mulsf3>:
 b88:	0e 94 d7 05 	call	0xbae	; 0xbae <__mulsf3x>
 b8c:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_round>
 b90:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscA>
 b94:	38 f0       	brcs	.+14     	; 0xba4 <__mulsf3+0x1c>
 b96:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscB>
 b9a:	20 f0       	brcs	.+8      	; 0xba4 <__mulsf3+0x1c>
 b9c:	95 23       	and	r25, r21
 b9e:	11 f0       	breq	.+4      	; 0xba4 <__mulsf3+0x1c>
 ba0:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>
 ba4:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>
 ba8:	11 24       	eor	r1, r1
 baa:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>

00000bae <__mulsf3x>:
 bae:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_split3>
 bb2:	70 f3       	brcs	.-36     	; 0xb90 <__mulsf3+0x8>

00000bb4 <__mulsf3_pse>:
 bb4:	95 9f       	mul	r25, r21
 bb6:	c1 f3       	breq	.-16     	; 0xba8 <__mulsf3+0x20>
 bb8:	95 0f       	add	r25, r21
 bba:	50 e0       	ldi	r21, 0x00	; 0
 bbc:	55 1f       	adc	r21, r21
 bbe:	62 9f       	mul	r22, r18
 bc0:	f0 01       	movw	r30, r0
 bc2:	72 9f       	mul	r23, r18
 bc4:	bb 27       	eor	r27, r27
 bc6:	f0 0d       	add	r31, r0
 bc8:	b1 1d       	adc	r27, r1
 bca:	63 9f       	mul	r22, r19
 bcc:	aa 27       	eor	r26, r26
 bce:	f0 0d       	add	r31, r0
 bd0:	b1 1d       	adc	r27, r1
 bd2:	aa 1f       	adc	r26, r26
 bd4:	64 9f       	mul	r22, r20
 bd6:	66 27       	eor	r22, r22
 bd8:	b0 0d       	add	r27, r0
 bda:	a1 1d       	adc	r26, r1
 bdc:	66 1f       	adc	r22, r22
 bde:	82 9f       	mul	r24, r18
 be0:	22 27       	eor	r18, r18
 be2:	b0 0d       	add	r27, r0
 be4:	a1 1d       	adc	r26, r1
 be6:	62 1f       	adc	r22, r18
 be8:	73 9f       	mul	r23, r19
 bea:	b0 0d       	add	r27, r0
 bec:	a1 1d       	adc	r26, r1
 bee:	62 1f       	adc	r22, r18
 bf0:	83 9f       	mul	r24, r19
 bf2:	a0 0d       	add	r26, r0
 bf4:	61 1d       	adc	r22, r1
 bf6:	22 1f       	adc	r18, r18
 bf8:	74 9f       	mul	r23, r20
 bfa:	33 27       	eor	r19, r19
 bfc:	a0 0d       	add	r26, r0
 bfe:	61 1d       	adc	r22, r1
 c00:	23 1f       	adc	r18, r19
 c02:	84 9f       	mul	r24, r20
 c04:	60 0d       	add	r22, r0
 c06:	21 1d       	adc	r18, r1
 c08:	82 2f       	mov	r24, r18
 c0a:	76 2f       	mov	r23, r22
 c0c:	6a 2f       	mov	r22, r26
 c0e:	11 24       	eor	r1, r1
 c10:	9f 57       	subi	r25, 0x7F	; 127
 c12:	50 40       	sbci	r21, 0x00	; 0
 c14:	9a f0       	brmi	.+38     	; 0xc3c <__mulsf3_pse+0x88>
 c16:	f1 f0       	breq	.+60     	; 0xc54 <__mulsf3_pse+0xa0>
 c18:	88 23       	and	r24, r24
 c1a:	4a f0       	brmi	.+18     	; 0xc2e <__mulsf3_pse+0x7a>
 c1c:	ee 0f       	add	r30, r30
 c1e:	ff 1f       	adc	r31, r31
 c20:	bb 1f       	adc	r27, r27
 c22:	66 1f       	adc	r22, r22
 c24:	77 1f       	adc	r23, r23
 c26:	88 1f       	adc	r24, r24
 c28:	91 50       	subi	r25, 0x01	; 1
 c2a:	50 40       	sbci	r21, 0x00	; 0
 c2c:	a9 f7       	brne	.-22     	; 0xc18 <__mulsf3_pse+0x64>
 c2e:	9e 3f       	cpi	r25, 0xFE	; 254
 c30:	51 05       	cpc	r21, r1
 c32:	80 f0       	brcs	.+32     	; 0xc54 <__mulsf3_pse+0xa0>
 c34:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>
 c38:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>
 c3c:	5f 3f       	cpi	r21, 0xFF	; 255
 c3e:	e4 f3       	brlt	.-8      	; 0xc38 <__mulsf3_pse+0x84>
 c40:	98 3e       	cpi	r25, 0xE8	; 232
 c42:	d4 f3       	brlt	.-12     	; 0xc38 <__mulsf3_pse+0x84>
 c44:	86 95       	lsr	r24
 c46:	77 95       	ror	r23
 c48:	67 95       	ror	r22
 c4a:	b7 95       	ror	r27
 c4c:	f7 95       	ror	r31
 c4e:	e7 95       	ror	r30
 c50:	9f 5f       	subi	r25, 0xFF	; 255
 c52:	c1 f7       	brne	.-16     	; 0xc44 <__mulsf3_pse+0x90>
 c54:	fe 2b       	or	r31, r30
 c56:	88 0f       	add	r24, r24
 c58:	91 1d       	adc	r25, r1
 c5a:	96 95       	lsr	r25
 c5c:	87 95       	ror	r24
 c5e:	97 f9       	bld	r25, 7
 c60:	08 95       	ret

00000c62 <atoi>:
 c62:	fc 01       	movw	r30, r24
 c64:	88 27       	eor	r24, r24
 c66:	99 27       	eor	r25, r25
 c68:	e8 94       	clt
 c6a:	21 91       	ld	r18, Z+
 c6c:	20 32       	cpi	r18, 0x20	; 32
 c6e:	e9 f3       	breq	.-6      	; 0xc6a <atoi+0x8>
 c70:	29 30       	cpi	r18, 0x09	; 9
 c72:	10 f0       	brcs	.+4      	; 0xc78 <atoi+0x16>
 c74:	2e 30       	cpi	r18, 0x0E	; 14
 c76:	c8 f3       	brcs	.-14     	; 0xc6a <atoi+0x8>
 c78:	2b 32       	cpi	r18, 0x2B	; 43
 c7a:	41 f0       	breq	.+16     	; 0xc8c <atoi+0x2a>
 c7c:	2d 32       	cpi	r18, 0x2D	; 45
 c7e:	39 f4       	brne	.+14     	; 0xc8e <atoi+0x2c>
 c80:	68 94       	set
 c82:	04 c0       	rjmp	.+8      	; 0xc8c <atoi+0x2a>
 c84:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__mulhi_const_10>
 c88:	82 0f       	add	r24, r18
 c8a:	91 1d       	adc	r25, r1
 c8c:	21 91       	ld	r18, Z+
 c8e:	20 53       	subi	r18, 0x30	; 48
 c90:	2a 30       	cpi	r18, 0x0A	; 10
 c92:	c0 f3       	brcs	.-16     	; 0xc84 <atoi+0x22>
 c94:	1e f4       	brtc	.+6      	; 0xc9c <atoi+0x3a>
 c96:	90 95       	com	r25
 c98:	81 95       	neg	r24
 c9a:	9f 4f       	sbci	r25, 0xFF	; 255
 c9c:	08 95       	ret

00000c9e <__itoa_ncheck>:
 c9e:	bb 27       	eor	r27, r27
 ca0:	4a 30       	cpi	r20, 0x0A	; 10
 ca2:	31 f4       	brne	.+12     	; 0xcb0 <__itoa_ncheck+0x12>
 ca4:	99 23       	and	r25, r25
 ca6:	22 f4       	brpl	.+8      	; 0xcb0 <__itoa_ncheck+0x12>
 ca8:	bd e2       	ldi	r27, 0x2D	; 45
 caa:	90 95       	com	r25
 cac:	81 95       	neg	r24
 cae:	9f 4f       	sbci	r25, 0xFF	; 255
 cb0:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__utoa_common>

00000cb4 <__mulhi_const_10>:
 cb4:	7a e0       	ldi	r23, 0x0A	; 10
 cb6:	97 9f       	mul	r25, r23
 cb8:	90 2d       	mov	r25, r0
 cba:	87 9f       	mul	r24, r23
 cbc:	80 2d       	mov	r24, r0
 cbe:	91 0d       	add	r25, r1
 cc0:	11 24       	eor	r1, r1
 cc2:	08 95       	ret

00000cc4 <__utoa_ncheck>:
 cc4:	bb 27       	eor	r27, r27

00000cc6 <__utoa_common>:
 cc6:	fb 01       	movw	r30, r22
 cc8:	55 27       	eor	r21, r21
 cca:	aa 27       	eor	r26, r26
 ccc:	88 0f       	add	r24, r24
 cce:	99 1f       	adc	r25, r25
 cd0:	aa 1f       	adc	r26, r26
 cd2:	a4 17       	cp	r26, r20
 cd4:	10 f0       	brcs	.+4      	; 0xcda <__utoa_common+0x14>
 cd6:	a4 1b       	sub	r26, r20
 cd8:	83 95       	inc	r24
 cda:	50 51       	subi	r21, 0x10	; 16
 cdc:	b9 f7       	brne	.-18     	; 0xccc <__utoa_common+0x6>
 cde:	a0 5d       	subi	r26, 0xD0	; 208
 ce0:	aa 33       	cpi	r26, 0x3A	; 58
 ce2:	08 f0       	brcs	.+2      	; 0xce6 <__utoa_common+0x20>
 ce4:	a9 5d       	subi	r26, 0xD9	; 217
 ce6:	a1 93       	st	Z+, r26
 ce8:	00 97       	sbiw	r24, 0x00	; 0
 cea:	79 f7       	brne	.-34     	; 0xcca <__utoa_common+0x4>
 cec:	b1 11       	cpse	r27, r1
 cee:	b1 93       	st	Z+, r27
 cf0:	11 92       	st	Z+, r1
 cf2:	cb 01       	movw	r24, r22
 cf4:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <strrev>

00000cf8 <strrev>:
 cf8:	dc 01       	movw	r26, r24
 cfa:	fc 01       	movw	r30, r24
 cfc:	67 2f       	mov	r22, r23
 cfe:	71 91       	ld	r23, Z+
 d00:	77 23       	and	r23, r23
 d02:	e1 f7       	brne	.-8      	; 0xcfc <strrev+0x4>
 d04:	32 97       	sbiw	r30, 0x02	; 2
 d06:	04 c0       	rjmp	.+8      	; 0xd10 <strrev+0x18>
 d08:	7c 91       	ld	r23, X
 d0a:	6d 93       	st	X+, r22
 d0c:	70 83       	st	Z, r23
 d0e:	62 91       	ld	r22, -Z
 d10:	ae 17       	cp	r26, r30
 d12:	bf 07       	cpc	r27, r31
 d14:	c8 f3       	brcs	.-14     	; 0xd08 <strrev+0x10>
 d16:	08 95       	ret

00000d18 <_exit>:
 d18:	f8 94       	cli

00000d1a <__stop_program>:
 d1a:	ff cf       	rjmp	.-2      	; 0xd1a <__stop_program>
