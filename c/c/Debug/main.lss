
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000c72  00000d06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  0080012c  0080012c  00000d32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000183a  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d73  00000000  00000000  00002746  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d07  00000000  00000000  000034b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  000041c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000669  00000000  00000000  000044c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008da  00000000  00000000  00004b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005407  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 36       	cpi	r26, 0x64	; 100
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <main>
  9e:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <SCH_tasks_G>
  b4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	ee e2       	ldi	r30, 0x2E	; 46
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e2 5d       	subi	r30, 0xD2	; 210
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e2 5d       	subi	r30, 0xD2	; 210
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ce e2       	ldi	r28, 0x2E	; 46
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	ee e2       	ldi	r30, 0x2E	; 46
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	21 e5       	ldi	r18, 0x51	; 81
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_receive>:
#define F_CPU 16000000UL
#include <util/delay.h>

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1<<RXC0)));
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <USART_receive+0x4>
	return UDR0 - 48;
 222:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 226:	80 53       	subi	r24, 0x30	; 48
 228:	08 95       	ret

0000022a <USART_send>:

void USART_send(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 22a:	e0 ec       	ldi	r30, 0xC0	; 192
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	90 81       	ld	r25, Z
 230:	95 ff       	sbrs	r25, 5
 232:	fd cf       	rjmp	.-6      	; 0x22e <USART_send+0x4>
	UDR0 = data;
 234:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 238:	08 95       	ret

0000023a <USART_putstring>:
}

void USART_putstring(char* StringPtr)
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
 240:	88 81       	ld	r24, Y
 242:	88 23       	and	r24, r24
 244:	31 f0       	breq	.+12     	; 0x252 <USART_putstring+0x18>
 246:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 248:	0e 94 15 01 	call	0x22a	; 0x22a <USART_send>
	UDR0 = data;
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00){
 24c:	89 91       	ld	r24, Y+
 24e:	81 11       	cpse	r24, r1
 250:	fb cf       	rjmp	.-10     	; 0x248 <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <newLine>:

void newLine()
{
	USART_send('\r');
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	0e 94 15 01 	call	0x22a	; 0x22a <USART_send>
	USART_send('\n');
 25e:	8a e0       	ldi	r24, 0x0A	; 10
 260:	0e 94 15 01 	call	0x22a	; 0x22a <USART_send>
 264:	08 95       	ret

00000266 <read_adc>:
}

uint16_t read_adc(uint8_t channel)
{
	ADMUX &= 0xF0;                    //Clear the older channel that was read
 266:	ec e7       	ldi	r30, 0x7C	; 124
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	90 81       	ld	r25, Z
 26c:	90 7f       	andi	r25, 0xF0	; 240
 26e:	90 83       	st	Z, r25
	ADMUX |= channel;                 //Defines the new ADC channel to be read
 270:	90 81       	ld	r25, Z
 272:	89 2b       	or	r24, r25
 274:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);              //Starts a new conversion
 276:	ea e7       	ldi	r30, 0x7A	; 122
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));        //Wait until the conversion is done
 280:	80 81       	ld	r24, Z
 282:	86 fd       	sbrc	r24, 6
 284:	fd cf       	rjmp	.-6      	; 0x280 <read_adc+0x1a>
	return ADCW;                      //Returns the ADC value of the chosen channel
 286:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 28a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 28e:	08 95       	ret

00000290 <upDown>:
int unsigned combine3(unsigned x, unsigned y, unsigned z)
{
	unsigned pow1 = 10;
	unsigned pow2 = 100;
	return (z * pow2) + (y * pow1) + x;
}
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	81 e5       	ldi	r24, 0x51	; 81
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <atoi>
 2a0:	ec 01       	movw	r28, r24
 2a2:	8f e5       	ldi	r24, 0x5F	; 95
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <atoi>
 2aa:	8c 01       	movw	r16, r24
 2ac:	0e 94 18 04 	call	0x830	; 0x830 <distanceStill>
 2b0:	8a e5       	ldi	r24, 0x5A	; 90
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <atoi>
 2b8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 2bc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 2c0:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <distance_up+0x1>
 2c4:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <distance_up>
 2c8:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <LDR_down>
 2cc:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <LDR_down+0x1>
 2d0:	c4 17       	cp	r28, r20
 2d2:	d5 07       	cpc	r29, r21
 2d4:	3c f4       	brge	.+14     	; 0x2e4 <upDown+0x54>
 2d6:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_down>
 2da:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_down+0x1>
 2de:	04 17       	cp	r16, r20
 2e0:	15 07       	cpc	r17, r21
 2e2:	3c f0       	brlt	.+14     	; 0x2f2 <upDown+0x62>
 2e4:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 2e8:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 2ec:	45 2b       	or	r20, r21
 2ee:	71 f0       	breq	.+28     	; 0x30c <upDown+0x7c>
 2f0:	6c c0       	rjmp	.+216    	; 0x3ca <upDown+0x13a>
 2f2:	a9 01       	movw	r20, r18
 2f4:	4f 5f       	subi	r20, 0xFF	; 255
 2f6:	5f 4f       	sbci	r21, 0xFF	; 255
 2f8:	48 17       	cp	r20, r24
 2fa:	59 07       	cpc	r21, r25
 2fc:	34 f5       	brge	.+76     	; 0x34a <upDown+0xba>
 2fe:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 302:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 306:	45 2b       	or	r20, r21
 308:	09 f4       	brne	.+2      	; 0x30c <upDown+0x7c>
 30a:	66 c0       	rjmp	.+204    	; 0x3d8 <upDown+0x148>
 30c:	2a 98       	cbi	0x05, 2	; 5
 30e:	28 9a       	sbi	0x05, 0	; 5
 310:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <distance_down>
 314:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <distance_down+0x1>
 318:	28 17       	cp	r18, r24
 31a:	39 07       	cpc	r19, r25
 31c:	0c f0       	brlt	.+2      	; 0x320 <upDown+0x90>
 31e:	7b c0       	rjmp	.+246    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 320:	29 9a       	sbi	0x05, 1	; 5
 322:	2f ef       	ldi	r18, 0xFF	; 255
 324:	81 ee       	ldi	r24, 0xE1	; 225
 326:	94 e0       	ldi	r25, 0x04	; 4
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <upDown+0x98>
 330:	00 c0       	rjmp	.+0      	; 0x332 <upDown+0xa2>
 332:	00 00       	nop
 334:	29 98       	cbi	0x05, 1	; 5
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	81 ee       	ldi	r24, 0xE1	; 225
 33a:	94 e0       	ldi	r25, 0x04	; 4
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <upDown+0xac>
 344:	00 c0       	rjmp	.+0      	; 0x346 <upDown+0xb6>
 346:	00 00       	nop
 348:	66 c0       	rjmp	.+204    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 34a:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <LDR_up>
 34e:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <LDR_up+0x1>
 352:	4c 17       	cp	r20, r28
 354:	5d 07       	cpc	r21, r29
 356:	3c f4       	brge	.+14     	; 0x366 <upDown+0xd6>
 358:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_up>
 35c:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_up+0x1>
 360:	40 17       	cp	r20, r16
 362:	51 07       	cpc	r21, r17
 364:	3c f0       	brlt	.+14     	; 0x374 <upDown+0xe4>
 366:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 36a:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 36e:	45 2b       	or	r20, r21
 370:	d9 f5       	brne	.+118    	; 0x3e8 <upDown+0x158>
 372:	0d c0       	rjmp	.+26     	; 0x38e <upDown+0xfe>
 374:	21 50       	subi	r18, 0x01	; 1
 376:	31 09       	sbc	r19, r1
 378:	82 17       	cp	r24, r18
 37a:	93 07       	cpc	r25, r19
 37c:	0c f0       	brlt	.+2      	; 0x380 <upDown+0xf0>
 37e:	4b c0       	rjmp	.+150    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 380:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <__data_end>
 384:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <__data_end+0x1>
 388:	23 2b       	or	r18, r19
 38a:	09 f4       	brne	.+2      	; 0x38e <upDown+0xfe>
 38c:	44 c0       	rjmp	.+136    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 38e:	28 98       	cbi	0x05, 0	; 5
 390:	2a 9a       	sbi	0x05, 2	; 5
 392:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <distance_up>
 396:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <distance_up+0x1>
 39a:	82 17       	cp	r24, r18
 39c:	93 07       	cpc	r25, r19
 39e:	dc f5       	brge	.+118    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3a0:	29 9a       	sbi	0x05, 1	; 5
 3a2:	2f ef       	ldi	r18, 0xFF	; 255
 3a4:	81 ee       	ldi	r24, 0xE1	; 225
 3a6:	94 e0       	ldi	r25, 0x04	; 4
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <upDown+0x118>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <upDown+0x122>
 3b2:	00 00       	nop
 3b4:	29 98       	cbi	0x05, 1	; 5
 3b6:	2f ef       	ldi	r18, 0xFF	; 255
 3b8:	81 ee       	ldi	r24, 0xE1	; 225
 3ba:	94 e0       	ldi	r25, 0x04	; 4
 3bc:	21 50       	subi	r18, 0x01	; 1
 3be:	80 40       	sbci	r24, 0x00	; 0
 3c0:	90 40       	sbci	r25, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <upDown+0x12c>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <upDown+0x136>
 3c6:	00 00       	nop
 3c8:	26 c0       	rjmp	.+76     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ca:	a9 01       	movw	r20, r18
 3cc:	4f 5f       	subi	r20, 0xFF	; 255
 3ce:	5f 4f       	sbci	r21, 0xFF	; 255
 3d0:	48 17       	cp	r20, r24
 3d2:	59 07       	cpc	r21, r25
 3d4:	7c f4       	brge	.+30     	; 0x3f4 <upDown+0x164>
 3d6:	9a cf       	rjmp	.-204    	; 0x30c <upDown+0x7c>
 3d8:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <LDR_up>
 3dc:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <LDR_up+0x1>
 3e0:	4c 17       	cp	r20, r28
 3e2:	5d 07       	cpc	r21, r29
 3e4:	a4 f6       	brge	.-88     	; 0x38e <upDown+0xfe>
 3e6:	0e c0       	rjmp	.+28     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e8:	21 50       	subi	r18, 0x01	; 1
 3ea:	31 09       	sbc	r19, r1
 3ec:	82 17       	cp	r24, r18
 3ee:	93 07       	cpc	r25, r19
 3f0:	74 f2       	brlt	.-100    	; 0x38e <upDown+0xfe>
 3f2:	11 c0       	rjmp	.+34     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f4:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <LDR_up>
 3f8:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <LDR_up+0x1>
 3fc:	4c 17       	cp	r20, r28
 3fe:	5d 07       	cpc	r21, r29
 400:	9c f7       	brge	.-26     	; 0x3e8 <upDown+0x158>
 402:	aa cf       	rjmp	.-172    	; 0x358 <upDown+0xc8>
 404:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_up>
 408:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_up+0x1>
 40c:	40 17       	cp	r20, r16
 40e:	51 07       	cpc	r21, r17
 410:	0c f0       	brlt	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	bd cf       	rjmp	.-134    	; 0x38e <upDown+0xfe>
 414:	af cf       	rjmp	.-162    	; 0x374 <upDown+0xe4>
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret

00000420 <__vector_18>:

ISR ( USART_RX_vect )
{
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	2f 93       	push	r18
 42c:	3f 93       	push	r19
 42e:	4f 93       	push	r20
 430:	5f 93       	push	r21
 432:	6f 93       	push	r22
 434:	7f 93       	push	r23
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	ef 93       	push	r30
 444:	ff 93       	push	r31
	unsigned char ReceivedByte;
	ReceivedByte = UDR0;						// Set ReceivedByte to the received byte from the controller (GUI)
 446:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	switch(ReceivedByte)
 44a:	83 33       	cpi	r24, 0x33	; 51
 44c:	49 f1       	breq	.+82     	; 0x4a0 <__vector_18+0x80>
 44e:	28 f4       	brcc	.+10     	; 0x45a <__vector_18+0x3a>
 450:	81 33       	cpi	r24, 0x31	; 49
 452:	51 f0       	breq	.+20     	; 0x468 <__vector_18+0x48>
 454:	82 33       	cpi	r24, 0x32	; 50
 456:	a9 f0       	breq	.+42     	; 0x482 <__vector_18+0x62>
 458:	c0 c0       	rjmp	.+384    	; 0x5da <__vector_18+0x1ba>
 45a:	87 33       	cpi	r24, 0x37	; 55
 45c:	09 f4       	brne	.+2      	; 0x460 <__vector_18+0x40>
 45e:	85 c0       	rjmp	.+266    	; 0x56a <__vector_18+0x14a>
 460:	88 33       	cpi	r24, 0x38	; 56
 462:	09 f4       	brne	.+2      	; 0x466 <__vector_18+0x46>
 464:	a9 c0       	rjmp	.+338    	; 0x5b8 <__vector_18+0x198>
 466:	b9 c0       	rjmp	.+370    	; 0x5da <__vector_18+0x1ba>
	{
		case '1':								// 1 = Shut the sunshade // Red
			manual = 1;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 470:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			distance_manual = 5;
 474:	85 e0       	ldi	r24, 0x05	; 5
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 47c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 480:	ac c0       	rjmp	.+344    	; 0x5da <__vector_18+0x1ba>
			
		case '2':								// 2 = Open the sunshade // Green
			manual = 1;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 48a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			distance_manual = distance_up;
 48e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <distance_up>
 492:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <distance_up+0x1>
 496:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 49a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 49e:	9d c0       	rjmp	.+314    	; 0x5da <__vector_18+0x1ba>
			
		case '3':								// 3 = set
			manual = 0;
 4a0:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__data_end+0x1>
 4a4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
			temp_down = combine((int) USART_receive(), (int) USART_receive());
 4a8:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 4ac:	c8 2f       	mov	r28, r24
 4ae:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 4b2:	2c 2f       	mov	r18, r28
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	a9 01       	movw	r20, r18
 4b8:	44 0f       	add	r20, r20
 4ba:	55 1f       	adc	r21, r21
 4bc:	22 0f       	add	r18, r18
 4be:	33 1f       	adc	r19, r19
 4c0:	22 0f       	add	r18, r18
 4c2:	33 1f       	adc	r19, r19
 4c4:	22 0f       	add	r18, r18
 4c6:	33 1f       	adc	r19, r19
 4c8:	24 0f       	add	r18, r20
 4ca:	35 1f       	adc	r19, r21
 4cc:	28 0f       	add	r18, r24
 4ce:	31 1d       	adc	r19, r1
 4d0:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <temp_down+0x1>
 4d4:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <temp_down>
			temp_up = combine((int) USART_receive(), (int) USART_receive());
 4d8:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 4dc:	c8 2f       	mov	r28, r24
 4de:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 4e2:	2c 2f       	mov	r18, r28
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	a9 01       	movw	r20, r18
 4e8:	44 0f       	add	r20, r20
 4ea:	55 1f       	adc	r21, r21
 4ec:	22 0f       	add	r18, r18
 4ee:	33 1f       	adc	r19, r19
 4f0:	22 0f       	add	r18, r18
 4f2:	33 1f       	adc	r19, r19
 4f4:	22 0f       	add	r18, r18
 4f6:	33 1f       	adc	r19, r19
 4f8:	24 0f       	add	r18, r20
 4fa:	35 1f       	adc	r19, r21
 4fc:	28 0f       	add	r18, r24
 4fe:	31 1d       	adc	r19, r1
 500:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <temp_up+0x1>
 504:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <temp_up>
			LDR_down = combine((int) USART_receive(), (int) USART_receive());
 508:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 50c:	c8 2f       	mov	r28, r24
 50e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 512:	2c 2f       	mov	r18, r28
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	a9 01       	movw	r20, r18
 518:	44 0f       	add	r20, r20
 51a:	55 1f       	adc	r21, r21
 51c:	22 0f       	add	r18, r18
 51e:	33 1f       	adc	r19, r19
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	22 0f       	add	r18, r18
 526:	33 1f       	adc	r19, r19
 528:	24 0f       	add	r18, r20
 52a:	35 1f       	adc	r19, r21
 52c:	28 0f       	add	r18, r24
 52e:	31 1d       	adc	r19, r1
 530:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <LDR_down+0x1>
 534:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <LDR_down>
			LDR_up = combine((int) USART_receive(), (int) USART_receive());
 538:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 53c:	c8 2f       	mov	r28, r24
 53e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 542:	2c 2f       	mov	r18, r28
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	a9 01       	movw	r20, r18
 548:	44 0f       	add	r20, r20
 54a:	55 1f       	adc	r21, r21
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	22 0f       	add	r18, r18
 552:	33 1f       	adc	r19, r19
 554:	22 0f       	add	r18, r18
 556:	33 1f       	adc	r19, r19
 558:	24 0f       	add	r18, r20
 55a:	35 1f       	adc	r19, r21
 55c:	28 0f       	add	r18, r24
 55e:	31 1d       	adc	r19, r1
 560:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <LDR_up+0x1>
 564:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <LDR_up>
			return;
 568:	38 c0       	rjmp	.+112    	; 0x5da <__vector_18+0x1ba>
			
		case '7':								// 7 = open/closing distance
			manual = 1;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 572:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			int closeopen = combine3((int) USART_receive(), (int) USART_receive(), (int) USART_receive());
 576:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 57a:	d8 2f       	mov	r29, r24
 57c:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 580:	c8 2f       	mov	r28, r24
 582:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
			distance_manual = closeopen;
 586:	2c 2f       	mov	r18, r28
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	a9 01       	movw	r20, r18
 58c:	44 0f       	add	r20, r20
 58e:	55 1f       	adc	r21, r21
 590:	22 0f       	add	r18, r18
 592:	33 1f       	adc	r19, r19
 594:	22 0f       	add	r18, r18
 596:	33 1f       	adc	r19, r19
 598:	22 0f       	add	r18, r18
 59a:	33 1f       	adc	r19, r19
 59c:	24 0f       	add	r18, r20
 59e:	35 1f       	adc	r19, r21
 5a0:	94 e6       	ldi	r25, 0x64	; 100
 5a2:	d9 9f       	mul	r29, r25
 5a4:	20 0d       	add	r18, r0
 5a6:	31 1d       	adc	r19, r1
 5a8:	11 24       	eor	r1, r1
 5aa:	28 0f       	add	r18, r24
 5ac:	31 1d       	adc	r19, r1
 5ae:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 5b2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
			return;
 5b6:	11 c0       	rjmp	.+34     	; 0x5da <__vector_18+0x1ba>
			
		case '8':								// 8 = set manual ON / OFF
			manual = (int) USART_receive();
 5b8:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 5c2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			if (manual == 1)
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	41 f4       	brne	.+16     	; 0x5da <__vector_18+0x1ba>
			{
				distance_manual = (int) atoi(distance_sensor);
 5ca:	8a e5       	ldi	r24, 0x5A	; 90
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <atoi>
 5d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 5d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
		
		default:
			return;
	}
 5da:	ff 91       	pop	r31
 5dc:	ef 91       	pop	r30
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	bf 91       	pop	r27
 5e4:	af 91       	pop	r26
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	7f 91       	pop	r23
 5ec:	6f 91       	pop	r22
 5ee:	5f 91       	pop	r21
 5f0:	4f 91       	pop	r20
 5f2:	3f 91       	pop	r19
 5f4:	2f 91       	pop	r18
 5f6:	0f 90       	pop	r0
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	0f 90       	pop	r0
 5fc:	1f 90       	pop	r1
 5fe:	18 95       	reti

00000600 <init_connectie>:
#define BAUDRATE 9600
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)

void init_connectie()
{
	UCSR0A = 0;							// disable U2X mode
 600:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);	// Set frame format: 8data, 2stop bit 
 604:	8e e0       	ldi	r24, 0x0E	; 14
 606:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 60a:	08 95       	ret

0000060c <init_USART>:
}

void init_USART()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 60c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 610:	87 e6       	ldi	r24, 0x67	; 103
 612:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);		// Enable receiver and transmitter
 616:	e1 ec       	ldi	r30, 0xC1	; 193
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	88 e1       	ldi	r24, 0x18	; 24
 61c:	80 83       	st	Z, r24
	UCSR0C = (3<<UCSZ00);
 61e:	86 e0       	ldi	r24, 0x06	; 6
 620:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << RXCIE0 );			// Enable the USART Receive Complete interrupt ( USART_RXC )
 624:	80 81       	ld	r24, Z
 626:	80 68       	ori	r24, 0x80	; 128
 628:	80 83       	st	Z, r24
	sei ();								// Enable the Global Interrupt Enable flag so that interrupts can be processed
 62a:	78 94       	sei
 62c:	08 95       	ret

0000062e <init_scheduler>:
}

void init_scheduler()
{
	SCH_Init_T1();
 62e:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temperature,1,100);
 632:	44 e6       	ldi	r20, 0x64	; 100
 634:	50 e0       	ldi	r21, 0x00	; 0
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	88 e7       	ldi	r24, 0x78	; 120
 63c:	93 e0       	ldi	r25, 0x03	; 3
 63e:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(ldr,2,100);
 642:	44 e6       	ldi	r20, 0x64	; 100
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	62 e0       	ldi	r22, 0x02	; 2
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	82 eb       	ldi	r24, 0xB2	; 178
 64c:	93 e0       	ldi	r25, 0x03	; 3
 64e:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(distance,3,100);
 652:	44 e6       	ldi	r20, 0x64	; 100
 654:	50 e0       	ldi	r21, 0x00	; 0
 656:	63 e0       	ldi	r22, 0x03	; 3
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	86 ee       	ldi	r24, 0xE6	; 230
 65c:	93 e0       	ldi	r25, 0x03	; 3
 65e:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(newLine,6,100);
 662:	44 e6       	ldi	r20, 0x64	; 100
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	66 e0       	ldi	r22, 0x06	; 6
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	8c e2       	ldi	r24, 0x2C	; 44
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(upDown,8,20);
 672:	44 e1       	ldi	r20, 0x14	; 20
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	68 e0       	ldi	r22, 0x08	; 8
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	88 e4       	ldi	r24, 0x48	; 72
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 682:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 686:	08 95       	ret

00000688 <init_adc>:
}

void init_adc()
{
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    // 16Mhz/128 = 125Khz the ADC reference clock
 688:	ea e7       	ldi	r30, 0x7A	; 122
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	80 81       	ld	r24, Z
 68e:	87 60       	ori	r24, 0x07	; 7
 690:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);							 // Voltage reference from AVCC (5v)
 692:	ac e7       	ldi	r26, 0x7C	; 124
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	8c 91       	ld	r24, X
 698:	80 64       	ori	r24, 0x40	; 64
 69a:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);							 // Turn on ADC
 69c:	80 81       	ld	r24, Z
 69e:	80 68       	ori	r24, 0x80	; 128
 6a0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							 // Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 6a2:	80 81       	ld	r24, Z
 6a4:	80 64       	ori	r24, 0x40	; 64
 6a6:	80 83       	st	Z, r24
 6a8:	08 95       	ret

000006aa <init_dist>:
}

void init_dist()
{
	DDRD |= _BV(PD3);			// Pin 3 Trigger Output
 6aa:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~_BV(PD2);			// Pin 2 Echo Input
 6ac:	52 98       	cbi	0x0a, 2	; 10
 6ae:	08 95       	ret

000006b0 <init_LEDS>:
}

void init_LEDS()
{ 
	DDRB |= _BV(PB0);			// pin0 B = output
 6b0:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1);			// pin1 B = output
 6b2:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(PB2);			// pin2 B = output
 6b4:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << PB2);		// Green LED on
 6b6:	2a 9a       	sbi	0x05, 2	; 5
 6b8:	08 95       	ret

000006ba <setup>:
#include "init.h"


void setup()
{
	init_connectie();
 6ba:	0e 94 00 03 	call	0x600	; 0x600 <init_connectie>
	init_adc();				// Setup the ADC
 6be:	0e 94 44 03 	call	0x688	; 0x688 <init_adc>
	init_USART();			// Setup the USART
 6c2:	0e 94 06 03 	call	0x60c	; 0x60c <init_USART>
	init_dist();			// Setup distance sensor
 6c6:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_dist>
	init_scheduler();		// Setup scheduler
 6ca:	0e 94 17 03 	call	0x62e	; 0x62e <init_scheduler>
	init_LEDS();			// Setup LED
 6ce:	0e 94 58 03 	call	0x6b0	; 0x6b0 <init_LEDS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d2:	2f ef       	ldi	r18, 0xFF	; 255
 6d4:	89 e6       	ldi	r24, 0x69	; 105
 6d6:	98 e1       	ldi	r25, 0x18	; 24
 6d8:	21 50       	subi	r18, 0x01	; 1
 6da:	80 40       	sbci	r24, 0x00	; 0
 6dc:	90 40       	sbci	r25, 0x00	; 0
 6de:	e1 f7       	brne	.-8      	; 0x6d8 <setup+0x1e>
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <setup+0x28>
 6e2:	00 00       	nop
 6e4:	08 95       	ret

000006e6 <main>:
	_delay_ms(500);			// Half second delay to initialize everything
}

int main(void)
{
	setup();
 6e6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <setup>
	while(1) {
		SCH_Dispatch_Tasks();
 6ea:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 6ee:	fd cf       	rjmp	.-6      	; 0x6ea <main+0x4>

000006f0 <temperature>:
#include "sensors.h"
#include "serial.h"

void temperature()
{
	USART_putstring("Temp : ");
 6f0:	8e e0       	ldi	r24, 0x0E	; 14
 6f2:	91 e0       	ldi	r25, 0x01	; 1
 6f4:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	adc_value = read_adc(0);
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	0e 94 33 01 	call	0x266	; 0x266 <read_adc>
	adc_value = (((((double)adc_value / 1024) * 5) - 0.5) * 100); // Calculate temperature
 6fe:	bc 01       	movw	r22, r24
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__floatunsisf>
 708:	20 e0       	ldi	r18, 0x00	; 0
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	40 e8       	ldi	r20, 0x80	; 128
 70e:	5a e3       	ldi	r21, 0x3A	; 58
 710:	0e 94 6f 05 	call	0xade	; 0xade <__mulsf3>
 714:	20 e0       	ldi	r18, 0x00	; 0
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	40 ea       	ldi	r20, 0xA0	; 160
 71a:	50 e4       	ldi	r21, 0x40	; 64
 71c:	0e 94 6f 05 	call	0xade	; 0xade <__mulsf3>
 720:	20 e0       	ldi	r18, 0x00	; 0
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	40 e0       	ldi	r20, 0x00	; 0
 726:	5f e3       	ldi	r21, 0x3F	; 63
 728:	0e 94 3e 04 	call	0x87c	; 0x87c <__subsf3>
 72c:	20 e0       	ldi	r18, 0x00	; 0
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	48 ec       	ldi	r20, 0xC8	; 200
 732:	52 e4       	ldi	r21, 0x42	; 66
 734:	0e 94 6f 05 	call	0xade	; 0xade <__mulsf3>
 738:	0e 94 b2 04 	call	0x964	; 0x964 <__fixunssfsi>
 73c:	dc 01       	movw	r26, r24
 73e:	cb 01       	movw	r24, r22
 740:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <adc_value+0x1>
 744:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <adc_value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 748:	4a e0       	ldi	r20, 0x0A	; 10
 74a:	6f e5       	ldi	r22, 0x5F	; 95
 74c:	71 e0       	ldi	r23, 0x01	; 1
 74e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__itoa_ncheck>
	itoa(adc_value, temp_sensor, 10);							  //Convert the read value to an ascii string
	USART_putstring(temp_sensor);								  //Send the converted value to the terminal
 752:	8f e5       	ldi	r24, 0x5F	; 95
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	USART_putstring("  ");
 75a:	86 e1       	ldi	r24, 0x16	; 22
 75c:	91 e0       	ldi	r25, 0x01	; 1
 75e:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
 762:	08 95       	ret

00000764 <ldr>:
}

void ldr()
{
	USART_putstring("LDR : ");
 764:	89 e1       	ldi	r24, 0x19	; 25
 766:	91 e0       	ldi	r25, 0x01	; 1
 768:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	adc_value = read_adc(1);
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	0e 94 33 01 	call	0x266	; 0x266 <read_adc>
	adc_value = ((((double)adc_value)/1024)*100 *1.5);			  // Calculate the amount of light
 772:	bc 01       	movw	r22, r24
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__floatunsisf>
 77c:	20 e0       	ldi	r18, 0x00	; 0
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	40 e8       	ldi	r20, 0x80	; 128
 782:	5a e3       	ldi	r21, 0x3A	; 58
 784:	0e 94 6f 05 	call	0xade	; 0xade <__mulsf3>
 788:	20 e0       	ldi	r18, 0x00	; 0
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	48 ec       	ldi	r20, 0xC8	; 200
 78e:	52 e4       	ldi	r21, 0x42	; 66
 790:	0e 94 6f 05 	call	0xade	; 0xade <__mulsf3>
 794:	20 e0       	ldi	r18, 0x00	; 0
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	40 ec       	ldi	r20, 0xC0	; 192
 79a:	5f e3       	ldi	r21, 0x3F	; 63
 79c:	0e 94 6f 05 	call	0xade	; 0xade <__mulsf3>
 7a0:	0e 94 b2 04 	call	0x964	; 0x964 <__fixunssfsi>
 7a4:	dc 01       	movw	r26, r24
 7a6:	cb 01       	movw	r24, r22
 7a8:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <adc_value+0x1>
 7ac:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <adc_value>
 7b0:	4a e0       	ldi	r20, 0x0A	; 10
 7b2:	61 e5       	ldi	r22, 0x51	; 81
 7b4:	71 e0       	ldi	r23, 0x01	; 1
 7b6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__itoa_ncheck>
	itoa(adc_value, LDR_sensor, 10);							  // Convert the read value to an ascii string
	USART_putstring(LDR_sensor);								  // Send the converted value to the terminal
 7ba:	81 e5       	ldi	r24, 0x51	; 81
 7bc:	91 e0       	ldi	r25, 0x01	; 1
 7be:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	USART_putstring("  ");
 7c2:	86 e1       	ldi	r24, 0x16	; 22
 7c4:	91 e0       	ldi	r25, 0x01	; 1
 7c6:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
 7ca:	08 95       	ret

000007cc <distance>:
}

void distance()
{
	USART_putstring("distance : ");
 7cc:	80 e2       	ldi	r24, 0x20	; 32
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	PORTD |= _BV(PD3);
 7d4:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7d6:	85 e3       	ldi	r24, 0x35	; 53
 7d8:	8a 95       	dec	r24
 7da:	f1 f7       	brne	.-4      	; 0x7d8 <distance+0xc>
 7dc:	00 00       	nop
	_delay_us(10);
	PORTD &= ~_BV(PD3);							// Give pulse from 10ms
 7de:	5b 98       	cbi	0x0b, 3	; 11
	
	loop_until_bit_is_set(PIND, PD2);
 7e0:	4a 9b       	sbis	0x09, 2	; 9
 7e2:	fe cf       	rjmp	.-4      	; 0x7e0 <distance+0x14>
	TCNT1 = 0;
 7e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 7e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	loop_until_bit_is_clear(PIND, PD2);
 7ec:	4a 99       	sbic	0x09, 2	; 9
 7ee:	fe cf       	rjmp	.-4      	; 0x7ec <distance+0x20>
	uint16_t count = TCNT1;
 7f0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 7f4:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__floatunsisf>
 800:	20 e0       	ldi	r18, 0x00	; 0
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	40 e8       	ldi	r20, 0x80	; 128
 806:	5e e3       	ldi	r21, 0x3E	; 62
 808:	0e 94 6f 05 	call	0xade	; 0xade <__mulsf3>
 80c:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
 810:	dc 01       	movw	r26, r24
 812:	cb 01       	movw	r24, r22
 814:	4a e0       	ldi	r20, 0x0A	; 10
 816:	6a e5       	ldi	r22, 0x5A	; 90
 818:	71 e0       	ldi	r23, 0x01	; 1
 81a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__itoa_ncheck>
	float distance = ((float)count / 4);		// Calculate the distance

	itoa(distance, distance_sensor, 10);        // Convert the read value to an ascii string
	USART_putstring(distance_sensor);			// Send the converted value to the terminal
 81e:	8a e5       	ldi	r24, 0x5A	; 90
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	USART_putstring("  ");
 826:	86 e1       	ldi	r24, 0x16	; 22
 828:	91 e0       	ldi	r25, 0x01	; 1
 82a:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
 82e:	08 95       	ret

00000830 <distanceStill>:
}

void distanceStill()
{
	PORTD |= _BV(PD3);
 830:	5b 9a       	sbi	0x0b, 3	; 11
 832:	85 e3       	ldi	r24, 0x35	; 53
 834:	8a 95       	dec	r24
 836:	f1 f7       	brne	.-4      	; 0x834 <distanceStill+0x4>
 838:	00 00       	nop
	_delay_us(10);
	PORTD &= ~_BV(PD3);							// Give pulse from 10ms
 83a:	5b 98       	cbi	0x0b, 3	; 11
	loop_until_bit_is_set(PIND, PD2);
 83c:	4a 9b       	sbis	0x09, 2	; 9
 83e:	fe cf       	rjmp	.-4      	; 0x83c <distanceStill+0xc>
	TCNT1 = 0;
 840:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 844:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	loop_until_bit_is_clear(PIND, PD2);
 848:	4a 99       	sbic	0x09, 2	; 9
 84a:	fe cf       	rjmp	.-4      	; 0x848 <distanceStill+0x18>
	uint16_t count = TCNT1;
 84c:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 850:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__floatunsisf>
 85c:	20 e0       	ldi	r18, 0x00	; 0
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	40 e8       	ldi	r20, 0x80	; 128
 862:	5e e3       	ldi	r21, 0x3E	; 62
 864:	0e 94 6f 05 	call	0xade	; 0xade <__mulsf3>
 868:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
 86c:	dc 01       	movw	r26, r24
 86e:	cb 01       	movw	r24, r22
 870:	4a e0       	ldi	r20, 0x0A	; 10
 872:	6a e5       	ldi	r22, 0x5A	; 90
 874:	71 e0       	ldi	r23, 0x01	; 1
 876:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__itoa_ncheck>
 87a:	08 95       	ret

0000087c <__subsf3>:
 87c:	50 58       	subi	r21, 0x80	; 128

0000087e <__addsf3>:
 87e:	bb 27       	eor	r27, r27
 880:	aa 27       	eor	r26, r26
 882:	0e 94 56 04 	call	0x8ac	; 0x8ac <__addsf3x>
 886:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_round>
 88a:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_pscA>
 88e:	38 f0       	brcs	.+14     	; 0x89e <__addsf3+0x20>
 890:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscB>
 894:	20 f0       	brcs	.+8      	; 0x89e <__addsf3+0x20>
 896:	39 f4       	brne	.+14     	; 0x8a6 <__addsf3+0x28>
 898:	9f 3f       	cpi	r25, 0xFF	; 255
 89a:	19 f4       	brne	.+6      	; 0x8a2 <__addsf3+0x24>
 89c:	26 f4       	brtc	.+8      	; 0x8a6 <__addsf3+0x28>
 89e:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_nan>
 8a2:	0e f4       	brtc	.+2      	; 0x8a6 <__addsf3+0x28>
 8a4:	e0 95       	com	r30
 8a6:	e7 fb       	bst	r30, 7
 8a8:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_inf>

000008ac <__addsf3x>:
 8ac:	e9 2f       	mov	r30, r25
 8ae:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_split3>
 8b2:	58 f3       	brcs	.-42     	; 0x88a <__addsf3+0xc>
 8b4:	ba 17       	cp	r27, r26
 8b6:	62 07       	cpc	r22, r18
 8b8:	73 07       	cpc	r23, r19
 8ba:	84 07       	cpc	r24, r20
 8bc:	95 07       	cpc	r25, r21
 8be:	20 f0       	brcs	.+8      	; 0x8c8 <__addsf3x+0x1c>
 8c0:	79 f4       	brne	.+30     	; 0x8e0 <__addsf3x+0x34>
 8c2:	a6 f5       	brtc	.+104    	; 0x92c <__stack+0x2d>
 8c4:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_zero>
 8c8:	0e f4       	brtc	.+2      	; 0x8cc <__addsf3x+0x20>
 8ca:	e0 95       	com	r30
 8cc:	0b 2e       	mov	r0, r27
 8ce:	ba 2f       	mov	r27, r26
 8d0:	a0 2d       	mov	r26, r0
 8d2:	0b 01       	movw	r0, r22
 8d4:	b9 01       	movw	r22, r18
 8d6:	90 01       	movw	r18, r0
 8d8:	0c 01       	movw	r0, r24
 8da:	ca 01       	movw	r24, r20
 8dc:	a0 01       	movw	r20, r0
 8de:	11 24       	eor	r1, r1
 8e0:	ff 27       	eor	r31, r31
 8e2:	59 1b       	sub	r21, r25
 8e4:	99 f0       	breq	.+38     	; 0x90c <__stack+0xd>
 8e6:	59 3f       	cpi	r21, 0xF9	; 249
 8e8:	50 f4       	brcc	.+20     	; 0x8fe <__addsf3x+0x52>
 8ea:	50 3e       	cpi	r21, 0xE0	; 224
 8ec:	68 f1       	brcs	.+90     	; 0x948 <__stack+0x49>
 8ee:	1a 16       	cp	r1, r26
 8f0:	f0 40       	sbci	r31, 0x00	; 0
 8f2:	a2 2f       	mov	r26, r18
 8f4:	23 2f       	mov	r18, r19
 8f6:	34 2f       	mov	r19, r20
 8f8:	44 27       	eor	r20, r20
 8fa:	58 5f       	subi	r21, 0xF8	; 248
 8fc:	f3 cf       	rjmp	.-26     	; 0x8e4 <__addsf3x+0x38>
 8fe:	46 95       	lsr	r20
 900:	37 95       	ror	r19
 902:	27 95       	ror	r18
 904:	a7 95       	ror	r26
 906:	f0 40       	sbci	r31, 0x00	; 0
 908:	53 95       	inc	r21
 90a:	c9 f7       	brne	.-14     	; 0x8fe <__addsf3x+0x52>
 90c:	7e f4       	brtc	.+30     	; 0x92c <__stack+0x2d>
 90e:	1f 16       	cp	r1, r31
 910:	ba 0b       	sbc	r27, r26
 912:	62 0b       	sbc	r22, r18
 914:	73 0b       	sbc	r23, r19
 916:	84 0b       	sbc	r24, r20
 918:	ba f0       	brmi	.+46     	; 0x948 <__stack+0x49>
 91a:	91 50       	subi	r25, 0x01	; 1
 91c:	a1 f0       	breq	.+40     	; 0x946 <__stack+0x47>
 91e:	ff 0f       	add	r31, r31
 920:	bb 1f       	adc	r27, r27
 922:	66 1f       	adc	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	c2 f7       	brpl	.-16     	; 0x91a <__stack+0x1b>
 92a:	0e c0       	rjmp	.+28     	; 0x948 <__stack+0x49>
 92c:	ba 0f       	add	r27, r26
 92e:	62 1f       	adc	r22, r18
 930:	73 1f       	adc	r23, r19
 932:	84 1f       	adc	r24, r20
 934:	48 f4       	brcc	.+18     	; 0x948 <__stack+0x49>
 936:	87 95       	ror	r24
 938:	77 95       	ror	r23
 93a:	67 95       	ror	r22
 93c:	b7 95       	ror	r27
 93e:	f7 95       	ror	r31
 940:	9e 3f       	cpi	r25, 0xFE	; 254
 942:	08 f0       	brcs	.+2      	; 0x946 <__stack+0x47>
 944:	b0 cf       	rjmp	.-160    	; 0x8a6 <__addsf3+0x28>
 946:	93 95       	inc	r25
 948:	88 0f       	add	r24, r24
 94a:	08 f0       	brcs	.+2      	; 0x94e <__stack+0x4f>
 94c:	99 27       	eor	r25, r25
 94e:	ee 0f       	add	r30, r30
 950:	97 95       	ror	r25
 952:	87 95       	ror	r24
 954:	08 95       	ret

00000956 <__fixsfsi>:
 956:	0e 94 b2 04 	call	0x964	; 0x964 <__fixunssfsi>
 95a:	68 94       	set
 95c:	b1 11       	cpse	r27, r1
 95e:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_szero>
 962:	08 95       	ret

00000964 <__fixunssfsi>:
 964:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_splitA>
 968:	88 f0       	brcs	.+34     	; 0x98c <__fixunssfsi+0x28>
 96a:	9f 57       	subi	r25, 0x7F	; 127
 96c:	98 f0       	brcs	.+38     	; 0x994 <__fixunssfsi+0x30>
 96e:	b9 2f       	mov	r27, r25
 970:	99 27       	eor	r25, r25
 972:	b7 51       	subi	r27, 0x17	; 23
 974:	b0 f0       	brcs	.+44     	; 0x9a2 <__fixunssfsi+0x3e>
 976:	e1 f0       	breq	.+56     	; 0x9b0 <__fixunssfsi+0x4c>
 978:	66 0f       	add	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	88 1f       	adc	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	1a f0       	brmi	.+6      	; 0x988 <__fixunssfsi+0x24>
 982:	ba 95       	dec	r27
 984:	c9 f7       	brne	.-14     	; 0x978 <__fixunssfsi+0x14>
 986:	14 c0       	rjmp	.+40     	; 0x9b0 <__fixunssfsi+0x4c>
 988:	b1 30       	cpi	r27, 0x01	; 1
 98a:	91 f0       	breq	.+36     	; 0x9b0 <__fixunssfsi+0x4c>
 98c:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_zero>
 990:	b1 e0       	ldi	r27, 0x01	; 1
 992:	08 95       	ret
 994:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_zero>
 998:	67 2f       	mov	r22, r23
 99a:	78 2f       	mov	r23, r24
 99c:	88 27       	eor	r24, r24
 99e:	b8 5f       	subi	r27, 0xF8	; 248
 9a0:	39 f0       	breq	.+14     	; 0x9b0 <__fixunssfsi+0x4c>
 9a2:	b9 3f       	cpi	r27, 0xF9	; 249
 9a4:	cc f3       	brlt	.-14     	; 0x998 <__fixunssfsi+0x34>
 9a6:	86 95       	lsr	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	b3 95       	inc	r27
 9ae:	d9 f7       	brne	.-10     	; 0x9a6 <__fixunssfsi+0x42>
 9b0:	3e f4       	brtc	.+14     	; 0x9c0 <__fixunssfsi+0x5c>
 9b2:	90 95       	com	r25
 9b4:	80 95       	com	r24
 9b6:	70 95       	com	r23
 9b8:	61 95       	neg	r22
 9ba:	7f 4f       	sbci	r23, 0xFF	; 255
 9bc:	8f 4f       	sbci	r24, 0xFF	; 255
 9be:	9f 4f       	sbci	r25, 0xFF	; 255
 9c0:	08 95       	ret

000009c2 <__floatunsisf>:
 9c2:	e8 94       	clt
 9c4:	09 c0       	rjmp	.+18     	; 0x9d8 <__floatsisf+0x12>

000009c6 <__floatsisf>:
 9c6:	97 fb       	bst	r25, 7
 9c8:	3e f4       	brtc	.+14     	; 0x9d8 <__floatsisf+0x12>
 9ca:	90 95       	com	r25
 9cc:	80 95       	com	r24
 9ce:	70 95       	com	r23
 9d0:	61 95       	neg	r22
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	99 23       	and	r25, r25
 9da:	a9 f0       	breq	.+42     	; 0xa06 <__floatsisf+0x40>
 9dc:	f9 2f       	mov	r31, r25
 9de:	96 e9       	ldi	r25, 0x96	; 150
 9e0:	bb 27       	eor	r27, r27
 9e2:	93 95       	inc	r25
 9e4:	f6 95       	lsr	r31
 9e6:	87 95       	ror	r24
 9e8:	77 95       	ror	r23
 9ea:	67 95       	ror	r22
 9ec:	b7 95       	ror	r27
 9ee:	f1 11       	cpse	r31, r1
 9f0:	f8 cf       	rjmp	.-16     	; 0x9e2 <__floatsisf+0x1c>
 9f2:	fa f4       	brpl	.+62     	; 0xa32 <__floatsisf+0x6c>
 9f4:	bb 0f       	add	r27, r27
 9f6:	11 f4       	brne	.+4      	; 0x9fc <__floatsisf+0x36>
 9f8:	60 ff       	sbrs	r22, 0
 9fa:	1b c0       	rjmp	.+54     	; 0xa32 <__floatsisf+0x6c>
 9fc:	6f 5f       	subi	r22, 0xFF	; 255
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255
 a00:	8f 4f       	sbci	r24, 0xFF	; 255
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	16 c0       	rjmp	.+44     	; 0xa32 <__floatsisf+0x6c>
 a06:	88 23       	and	r24, r24
 a08:	11 f0       	breq	.+4      	; 0xa0e <__floatsisf+0x48>
 a0a:	96 e9       	ldi	r25, 0x96	; 150
 a0c:	11 c0       	rjmp	.+34     	; 0xa30 <__floatsisf+0x6a>
 a0e:	77 23       	and	r23, r23
 a10:	21 f0       	breq	.+8      	; 0xa1a <__floatsisf+0x54>
 a12:	9e e8       	ldi	r25, 0x8E	; 142
 a14:	87 2f       	mov	r24, r23
 a16:	76 2f       	mov	r23, r22
 a18:	05 c0       	rjmp	.+10     	; 0xa24 <__floatsisf+0x5e>
 a1a:	66 23       	and	r22, r22
 a1c:	71 f0       	breq	.+28     	; 0xa3a <__floatsisf+0x74>
 a1e:	96 e8       	ldi	r25, 0x86	; 134
 a20:	86 2f       	mov	r24, r22
 a22:	70 e0       	ldi	r23, 0x00	; 0
 a24:	60 e0       	ldi	r22, 0x00	; 0
 a26:	2a f0       	brmi	.+10     	; 0xa32 <__floatsisf+0x6c>
 a28:	9a 95       	dec	r25
 a2a:	66 0f       	add	r22, r22
 a2c:	77 1f       	adc	r23, r23
 a2e:	88 1f       	adc	r24, r24
 a30:	da f7       	brpl	.-10     	; 0xa28 <__floatsisf+0x62>
 a32:	88 0f       	add	r24, r24
 a34:	96 95       	lsr	r25
 a36:	87 95       	ror	r24
 a38:	97 f9       	bld	r25, 7
 a3a:	08 95       	ret

00000a3c <__fp_inf>:
 a3c:	97 f9       	bld	r25, 7
 a3e:	9f 67       	ori	r25, 0x7F	; 127
 a40:	80 e8       	ldi	r24, 0x80	; 128
 a42:	70 e0       	ldi	r23, 0x00	; 0
 a44:	60 e0       	ldi	r22, 0x00	; 0
 a46:	08 95       	ret

00000a48 <__fp_nan>:
 a48:	9f ef       	ldi	r25, 0xFF	; 255
 a4a:	80 ec       	ldi	r24, 0xC0	; 192
 a4c:	08 95       	ret

00000a4e <__fp_pscA>:
 a4e:	00 24       	eor	r0, r0
 a50:	0a 94       	dec	r0
 a52:	16 16       	cp	r1, r22
 a54:	17 06       	cpc	r1, r23
 a56:	18 06       	cpc	r1, r24
 a58:	09 06       	cpc	r0, r25
 a5a:	08 95       	ret

00000a5c <__fp_pscB>:
 a5c:	00 24       	eor	r0, r0
 a5e:	0a 94       	dec	r0
 a60:	12 16       	cp	r1, r18
 a62:	13 06       	cpc	r1, r19
 a64:	14 06       	cpc	r1, r20
 a66:	05 06       	cpc	r0, r21
 a68:	08 95       	ret

00000a6a <__fp_round>:
 a6a:	09 2e       	mov	r0, r25
 a6c:	03 94       	inc	r0
 a6e:	00 0c       	add	r0, r0
 a70:	11 f4       	brne	.+4      	; 0xa76 <__fp_round+0xc>
 a72:	88 23       	and	r24, r24
 a74:	52 f0       	brmi	.+20     	; 0xa8a <__fp_round+0x20>
 a76:	bb 0f       	add	r27, r27
 a78:	40 f4       	brcc	.+16     	; 0xa8a <__fp_round+0x20>
 a7a:	bf 2b       	or	r27, r31
 a7c:	11 f4       	brne	.+4      	; 0xa82 <__fp_round+0x18>
 a7e:	60 ff       	sbrs	r22, 0
 a80:	04 c0       	rjmp	.+8      	; 0xa8a <__fp_round+0x20>
 a82:	6f 5f       	subi	r22, 0xFF	; 255
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	08 95       	ret

00000a8c <__fp_split3>:
 a8c:	57 fd       	sbrc	r21, 7
 a8e:	90 58       	subi	r25, 0x80	; 128
 a90:	44 0f       	add	r20, r20
 a92:	55 1f       	adc	r21, r21
 a94:	59 f0       	breq	.+22     	; 0xaac <__fp_splitA+0x10>
 a96:	5f 3f       	cpi	r21, 0xFF	; 255
 a98:	71 f0       	breq	.+28     	; 0xab6 <__fp_splitA+0x1a>
 a9a:	47 95       	ror	r20

00000a9c <__fp_splitA>:
 a9c:	88 0f       	add	r24, r24
 a9e:	97 fb       	bst	r25, 7
 aa0:	99 1f       	adc	r25, r25
 aa2:	61 f0       	breq	.+24     	; 0xabc <__fp_splitA+0x20>
 aa4:	9f 3f       	cpi	r25, 0xFF	; 255
 aa6:	79 f0       	breq	.+30     	; 0xac6 <__fp_splitA+0x2a>
 aa8:	87 95       	ror	r24
 aaa:	08 95       	ret
 aac:	12 16       	cp	r1, r18
 aae:	13 06       	cpc	r1, r19
 ab0:	14 06       	cpc	r1, r20
 ab2:	55 1f       	adc	r21, r21
 ab4:	f2 cf       	rjmp	.-28     	; 0xa9a <__fp_split3+0xe>
 ab6:	46 95       	lsr	r20
 ab8:	f1 df       	rcall	.-30     	; 0xa9c <__fp_splitA>
 aba:	08 c0       	rjmp	.+16     	; 0xacc <__fp_splitA+0x30>
 abc:	16 16       	cp	r1, r22
 abe:	17 06       	cpc	r1, r23
 ac0:	18 06       	cpc	r1, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	f1 cf       	rjmp	.-30     	; 0xaa8 <__fp_splitA+0xc>
 ac6:	86 95       	lsr	r24
 ac8:	71 05       	cpc	r23, r1
 aca:	61 05       	cpc	r22, r1
 acc:	08 94       	sec
 ace:	08 95       	ret

00000ad0 <__fp_zero>:
 ad0:	e8 94       	clt

00000ad2 <__fp_szero>:
 ad2:	bb 27       	eor	r27, r27
 ad4:	66 27       	eor	r22, r22
 ad6:	77 27       	eor	r23, r23
 ad8:	cb 01       	movw	r24, r22
 ada:	97 f9       	bld	r25, 7
 adc:	08 95       	ret

00000ade <__mulsf3>:
 ade:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3x>
 ae2:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_round>
 ae6:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_pscA>
 aea:	38 f0       	brcs	.+14     	; 0xafa <__mulsf3+0x1c>
 aec:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscB>
 af0:	20 f0       	brcs	.+8      	; 0xafa <__mulsf3+0x1c>
 af2:	95 23       	and	r25, r21
 af4:	11 f0       	breq	.+4      	; 0xafa <__mulsf3+0x1c>
 af6:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_inf>
 afa:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_nan>
 afe:	11 24       	eor	r1, r1
 b00:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_szero>

00000b04 <__mulsf3x>:
 b04:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_split3>
 b08:	70 f3       	brcs	.-36     	; 0xae6 <__mulsf3+0x8>

00000b0a <__mulsf3_pse>:
 b0a:	95 9f       	mul	r25, r21
 b0c:	c1 f3       	breq	.-16     	; 0xafe <__mulsf3+0x20>
 b0e:	95 0f       	add	r25, r21
 b10:	50 e0       	ldi	r21, 0x00	; 0
 b12:	55 1f       	adc	r21, r21
 b14:	62 9f       	mul	r22, r18
 b16:	f0 01       	movw	r30, r0
 b18:	72 9f       	mul	r23, r18
 b1a:	bb 27       	eor	r27, r27
 b1c:	f0 0d       	add	r31, r0
 b1e:	b1 1d       	adc	r27, r1
 b20:	63 9f       	mul	r22, r19
 b22:	aa 27       	eor	r26, r26
 b24:	f0 0d       	add	r31, r0
 b26:	b1 1d       	adc	r27, r1
 b28:	aa 1f       	adc	r26, r26
 b2a:	64 9f       	mul	r22, r20
 b2c:	66 27       	eor	r22, r22
 b2e:	b0 0d       	add	r27, r0
 b30:	a1 1d       	adc	r26, r1
 b32:	66 1f       	adc	r22, r22
 b34:	82 9f       	mul	r24, r18
 b36:	22 27       	eor	r18, r18
 b38:	b0 0d       	add	r27, r0
 b3a:	a1 1d       	adc	r26, r1
 b3c:	62 1f       	adc	r22, r18
 b3e:	73 9f       	mul	r23, r19
 b40:	b0 0d       	add	r27, r0
 b42:	a1 1d       	adc	r26, r1
 b44:	62 1f       	adc	r22, r18
 b46:	83 9f       	mul	r24, r19
 b48:	a0 0d       	add	r26, r0
 b4a:	61 1d       	adc	r22, r1
 b4c:	22 1f       	adc	r18, r18
 b4e:	74 9f       	mul	r23, r20
 b50:	33 27       	eor	r19, r19
 b52:	a0 0d       	add	r26, r0
 b54:	61 1d       	adc	r22, r1
 b56:	23 1f       	adc	r18, r19
 b58:	84 9f       	mul	r24, r20
 b5a:	60 0d       	add	r22, r0
 b5c:	21 1d       	adc	r18, r1
 b5e:	82 2f       	mov	r24, r18
 b60:	76 2f       	mov	r23, r22
 b62:	6a 2f       	mov	r22, r26
 b64:	11 24       	eor	r1, r1
 b66:	9f 57       	subi	r25, 0x7F	; 127
 b68:	50 40       	sbci	r21, 0x00	; 0
 b6a:	9a f0       	brmi	.+38     	; 0xb92 <__mulsf3_pse+0x88>
 b6c:	f1 f0       	breq	.+60     	; 0xbaa <__mulsf3_pse+0xa0>
 b6e:	88 23       	and	r24, r24
 b70:	4a f0       	brmi	.+18     	; 0xb84 <__mulsf3_pse+0x7a>
 b72:	ee 0f       	add	r30, r30
 b74:	ff 1f       	adc	r31, r31
 b76:	bb 1f       	adc	r27, r27
 b78:	66 1f       	adc	r22, r22
 b7a:	77 1f       	adc	r23, r23
 b7c:	88 1f       	adc	r24, r24
 b7e:	91 50       	subi	r25, 0x01	; 1
 b80:	50 40       	sbci	r21, 0x00	; 0
 b82:	a9 f7       	brne	.-22     	; 0xb6e <__mulsf3_pse+0x64>
 b84:	9e 3f       	cpi	r25, 0xFE	; 254
 b86:	51 05       	cpc	r21, r1
 b88:	80 f0       	brcs	.+32     	; 0xbaa <__mulsf3_pse+0xa0>
 b8a:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_inf>
 b8e:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_szero>
 b92:	5f 3f       	cpi	r21, 0xFF	; 255
 b94:	e4 f3       	brlt	.-8      	; 0xb8e <__mulsf3_pse+0x84>
 b96:	98 3e       	cpi	r25, 0xE8	; 232
 b98:	d4 f3       	brlt	.-12     	; 0xb8e <__mulsf3_pse+0x84>
 b9a:	86 95       	lsr	r24
 b9c:	77 95       	ror	r23
 b9e:	67 95       	ror	r22
 ba0:	b7 95       	ror	r27
 ba2:	f7 95       	ror	r31
 ba4:	e7 95       	ror	r30
 ba6:	9f 5f       	subi	r25, 0xFF	; 255
 ba8:	c1 f7       	brne	.-16     	; 0xb9a <__mulsf3_pse+0x90>
 baa:	fe 2b       	or	r31, r30
 bac:	88 0f       	add	r24, r24
 bae:	91 1d       	adc	r25, r1
 bb0:	96 95       	lsr	r25
 bb2:	87 95       	ror	r24
 bb4:	97 f9       	bld	r25, 7
 bb6:	08 95       	ret

00000bb8 <atoi>:
 bb8:	fc 01       	movw	r30, r24
 bba:	88 27       	eor	r24, r24
 bbc:	99 27       	eor	r25, r25
 bbe:	e8 94       	clt
 bc0:	21 91       	ld	r18, Z+
 bc2:	20 32       	cpi	r18, 0x20	; 32
 bc4:	e9 f3       	breq	.-6      	; 0xbc0 <atoi+0x8>
 bc6:	29 30       	cpi	r18, 0x09	; 9
 bc8:	10 f0       	brcs	.+4      	; 0xbce <atoi+0x16>
 bca:	2e 30       	cpi	r18, 0x0E	; 14
 bcc:	c8 f3       	brcs	.-14     	; 0xbc0 <atoi+0x8>
 bce:	2b 32       	cpi	r18, 0x2B	; 43
 bd0:	41 f0       	breq	.+16     	; 0xbe2 <atoi+0x2a>
 bd2:	2d 32       	cpi	r18, 0x2D	; 45
 bd4:	39 f4       	brne	.+14     	; 0xbe4 <atoi+0x2c>
 bd6:	68 94       	set
 bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <atoi+0x2a>
 bda:	0e 94 05 06 	call	0xc0a	; 0xc0a <__mulhi_const_10>
 bde:	82 0f       	add	r24, r18
 be0:	91 1d       	adc	r25, r1
 be2:	21 91       	ld	r18, Z+
 be4:	20 53       	subi	r18, 0x30	; 48
 be6:	2a 30       	cpi	r18, 0x0A	; 10
 be8:	c0 f3       	brcs	.-16     	; 0xbda <atoi+0x22>
 bea:	1e f4       	brtc	.+6      	; 0xbf2 <atoi+0x3a>
 bec:	90 95       	com	r25
 bee:	81 95       	neg	r24
 bf0:	9f 4f       	sbci	r25, 0xFF	; 255
 bf2:	08 95       	ret

00000bf4 <__itoa_ncheck>:
 bf4:	bb 27       	eor	r27, r27
 bf6:	4a 30       	cpi	r20, 0x0A	; 10
 bf8:	31 f4       	brne	.+12     	; 0xc06 <__itoa_ncheck+0x12>
 bfa:	99 23       	and	r25, r25
 bfc:	22 f4       	brpl	.+8      	; 0xc06 <__itoa_ncheck+0x12>
 bfe:	bd e2       	ldi	r27, 0x2D	; 45
 c00:	90 95       	com	r25
 c02:	81 95       	neg	r24
 c04:	9f 4f       	sbci	r25, 0xFF	; 255
 c06:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__utoa_common>

00000c0a <__mulhi_const_10>:
 c0a:	7a e0       	ldi	r23, 0x0A	; 10
 c0c:	97 9f       	mul	r25, r23
 c0e:	90 2d       	mov	r25, r0
 c10:	87 9f       	mul	r24, r23
 c12:	80 2d       	mov	r24, r0
 c14:	91 0d       	add	r25, r1
 c16:	11 24       	eor	r1, r1
 c18:	08 95       	ret

00000c1a <__utoa_ncheck>:
 c1a:	bb 27       	eor	r27, r27

00000c1c <__utoa_common>:
 c1c:	fb 01       	movw	r30, r22
 c1e:	55 27       	eor	r21, r21
 c20:	aa 27       	eor	r26, r26
 c22:	88 0f       	add	r24, r24
 c24:	99 1f       	adc	r25, r25
 c26:	aa 1f       	adc	r26, r26
 c28:	a4 17       	cp	r26, r20
 c2a:	10 f0       	brcs	.+4      	; 0xc30 <__utoa_common+0x14>
 c2c:	a4 1b       	sub	r26, r20
 c2e:	83 95       	inc	r24
 c30:	50 51       	subi	r21, 0x10	; 16
 c32:	b9 f7       	brne	.-18     	; 0xc22 <__utoa_common+0x6>
 c34:	a0 5d       	subi	r26, 0xD0	; 208
 c36:	aa 33       	cpi	r26, 0x3A	; 58
 c38:	08 f0       	brcs	.+2      	; 0xc3c <__utoa_common+0x20>
 c3a:	a9 5d       	subi	r26, 0xD9	; 217
 c3c:	a1 93       	st	Z+, r26
 c3e:	00 97       	sbiw	r24, 0x00	; 0
 c40:	79 f7       	brne	.-34     	; 0xc20 <__utoa_common+0x4>
 c42:	b1 11       	cpse	r27, r1
 c44:	b1 93       	st	Z+, r27
 c46:	11 92       	st	Z+, r1
 c48:	cb 01       	movw	r24, r22
 c4a:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <strrev>

00000c4e <strrev>:
 c4e:	dc 01       	movw	r26, r24
 c50:	fc 01       	movw	r30, r24
 c52:	67 2f       	mov	r22, r23
 c54:	71 91       	ld	r23, Z+
 c56:	77 23       	and	r23, r23
 c58:	e1 f7       	brne	.-8      	; 0xc52 <strrev+0x4>
 c5a:	32 97       	sbiw	r30, 0x02	; 2
 c5c:	04 c0       	rjmp	.+8      	; 0xc66 <strrev+0x18>
 c5e:	7c 91       	ld	r23, X
 c60:	6d 93       	st	X+, r22
 c62:	70 83       	st	Z, r23
 c64:	62 91       	ld	r22, -Z
 c66:	ae 17       	cp	r26, r30
 c68:	bf 07       	cpc	r27, r31
 c6a:	c8 f3       	brcs	.-14     	; 0xc5e <strrev+0x10>
 c6c:	08 95       	ret

00000c6e <_exit>:
 c6e:	f8 94       	cli

00000c70 <__stop_program>:
 c70:	ff cf       	rjmp	.-2      	; 0xc70 <__stop_program>
