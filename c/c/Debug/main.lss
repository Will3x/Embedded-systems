
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000832  000008c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000832  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  0080013e  0080013e  00000904  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000150f  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0a  00000000  00000000  00001fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a05  00000000  00000000  00002ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  000034cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000641  00000000  00000000  00003758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000725  00000000  00000000  00003d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000044be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 33       	cpi	r26, 0x3E	; 62
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e3       	ldi	r26, 0x3E	; 62
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 37       	cpi	r26, 0x74	; 116
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
  9e:	0c 94 17 04 	jmp	0x82e	; 0x82e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
  b4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	ee e3       	ldi	r30, 0x3E	; 62
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e2 5c       	subi	r30, 0xC2	; 194
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e2 5c       	subi	r30, 0xC2	; 194
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ce e3       	ldi	r28, 0x3E	; 62
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	ee e3       	ldi	r30, 0x3E	; 62
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	21 e6       	ldi	r18, 0x61	; 97
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_send>:
	USART_putstring("status: ");
	if(data == sluiten){USART_putstring("sluiten");}
	if(data == openen){USART_putstring("openen");}
	if(data == running){USART_putstring("running");}
	USART_putstring(" ");
}
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	90 81       	ld	r25, Z
 21e:	95 ff       	sbrs	r25, 5
 220:	fd cf       	rjmp	.-6      	; 0x21c <USART_send+0x4>
 222:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 226:	08 95       	ret

00000228 <USART_putstring>:
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
 22e:	88 81       	ld	r24, Y
 230:	88 23       	and	r24, r24
 232:	31 f0       	breq	.+12     	; 0x240 <USART_putstring+0x18>
 234:	21 96       	adiw	r28, 0x01	; 1
 236:	0e 94 0c 01 	call	0x218	; 0x218 <USART_send>
 23a:	89 91       	ld	r24, Y+
 23c:	81 11       	cpse	r24, r1
 23e:	fb cf       	rjmp	.-10     	; 0x236 <USART_putstring+0xe>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <read_adc>:
 246:	ec e7       	ldi	r30, 0x7C	; 124
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	90 81       	ld	r25, Z
 24c:	90 7f       	andi	r25, 0xF0	; 240
 24e:	90 83       	st	Z, r25
 250:	90 81       	ld	r25, Z
 252:	89 2b       	or	r24, r25
 254:	80 83       	st	Z, r24
 256:	ea e7       	ldi	r30, 0x7A	; 122
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	80 83       	st	Z, r24
 260:	80 81       	ld	r24, Z
 262:	86 fd       	sbrc	r24, 6
 264:	fd cf       	rjmp	.-6      	; 0x260 <read_adc+0x1a>
 266:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 26a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 26e:	08 95       	ret

00000270 <temperatuur>:
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 23 01 	call	0x246	; 0x246 <read_adc>
 27e:	bc 01       	movw	r22, r24
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__floatunsisf>
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e8       	ldi	r20, 0x80	; 128
 28e:	5a e3       	ldi	r21, 0x3A	; 58
 290:	0e 94 75 03 	call	0x6ea	; 0x6ea <__mulsf3>
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	40 ea       	ldi	r20, 0xA0	; 160
 29a:	50 e4       	ldi	r21, 0x40	; 64
 29c:	0e 94 75 03 	call	0x6ea	; 0x6ea <__mulsf3>
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	5f e3       	ldi	r21, 0x3F	; 63
 2a8:	0e 94 44 02 	call	0x488	; 0x488 <__subsf3>
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	48 ec       	ldi	r20, 0xC8	; 200
 2b2:	52 e4       	ldi	r21, 0x42	; 66
 2b4:	0e 94 75 03 	call	0x6ea	; 0x6ea <__mulsf3>
 2b8:	0e 94 b8 02 	call	0x570	; 0x570 <__fixunssfsi>
 2bc:	dc 01       	movw	r26, r24
 2be:	cb 01       	movw	r24, r22
 2c0:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <adc_value+0x1>
 2c4:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <adc_value>
 2c8:	4a e0       	ldi	r20, 0x0A	; 10
 2ca:	6f e6       	ldi	r22, 0x6F	; 111
 2cc:	71 e0       	ldi	r23, 0x01	; 1
 2ce:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__itoa_ncheck>
 2d2:	8f e6       	ldi	r24, 0x6F	; 111
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 2da:	88 e0       	ldi	r24, 0x08	; 8
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 2e2:	08 95       	ret

000002e4 <ldr>:
 2e4:	8b e0       	ldi	r24, 0x0B	; 11
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 23 01 	call	0x246	; 0x246 <read_adc>
 2f2:	bc 01       	movw	r22, r24
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__floatunsisf>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e8       	ldi	r20, 0x80	; 128
 302:	5a e3       	ldi	r21, 0x3A	; 58
 304:	0e 94 75 03 	call	0x6ea	; 0x6ea <__mulsf3>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	48 ec       	ldi	r20, 0xC8	; 200
 30e:	52 e4       	ldi	r21, 0x42	; 66
 310:	0e 94 75 03 	call	0x6ea	; 0x6ea <__mulsf3>
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	40 ec       	ldi	r20, 0xC0	; 192
 31a:	5f e3       	ldi	r21, 0x3F	; 63
 31c:	0e 94 75 03 	call	0x6ea	; 0x6ea <__mulsf3>
 320:	0e 94 b8 02 	call	0x570	; 0x570 <__fixunssfsi>
 324:	dc 01       	movw	r26, r24
 326:	cb 01       	movw	r24, r22
 328:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <adc_value+0x1>
 32c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <adc_value>
 330:	4a e0       	ldi	r20, 0x0A	; 10
 332:	6a e6       	ldi	r22, 0x6A	; 106
 334:	71 e0       	ldi	r23, 0x01	; 1
 336:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__itoa_ncheck>
 33a:	8a e6       	ldi	r24, 0x6A	; 106
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 342:	88 e0       	ldi	r24, 0x08	; 8
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 34a:	08 95       	ret

0000034c <afstand>:
 34c:	82 e1       	ldi	r24, 0x12	; 18
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 354:	5b 9a       	sbi	0x0b, 3	; 11
 356:	85 e3       	ldi	r24, 0x35	; 53
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <afstand+0xc>
 35c:	00 00       	nop
 35e:	5b 98       	cbi	0x0b, 3	; 11
 360:	4a 9b       	sbis	0x09, 2	; 9
 362:	fe cf       	rjmp	.-4      	; 0x360 <afstand+0x14>
 364:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 368:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 36c:	4a 99       	sbic	0x09, 2	; 9
 36e:	fe cf       	rjmp	.-4      	; 0x36c <afstand+0x20>
 370:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 374:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__floatunsisf>
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	40 e8       	ldi	r20, 0x80	; 128
 386:	5e e3       	ldi	r21, 0x3E	; 62
 388:	0e 94 75 03 	call	0x6ea	; 0x6ea <__mulsf3>
 38c:	0e 94 b1 02 	call	0x562	; 0x562 <__fixsfsi>
 390:	dc 01       	movw	r26, r24
 392:	cb 01       	movw	r24, r22
 394:	4a e0       	ldi	r20, 0x0A	; 10
 396:	63 e6       	ldi	r22, 0x63	; 99
 398:	71 e0       	ldi	r23, 0x01	; 1
 39a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__itoa_ncheck>
 39e:	83 e6       	ldi	r24, 0x63	; 99
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 3a6:	88 e0       	ldi	r24, 0x08	; 8
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 3ae:	08 95       	ret

000003b0 <newRegel>:

void newRegel(){
	USART_send('\r');
 3b0:	8d e0       	ldi	r24, 0x0D	; 13
 3b2:	0e 94 0c 01 	call	0x218	; 0x218 <USART_send>
	USART_send('\n');
 3b6:	8a e0       	ldi	r24, 0x0A	; 10
 3b8:	0e 94 0c 01 	call	0x218	; 0x218 <USART_send>
 3bc:	08 95       	ret

000003be <init_connectie>:
void init_scheduler();
void init_lampjes();

void init_connectie(){
	// disable U2X mode
	UCSR0A = 0;
 3be:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 3c2:	88 e1       	ldi	r24, 0x18	; 24
 3c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 3c8:	8e e0       	ldi	r24, 0x0E	; 14
 3ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 3ce:	08 95       	ret

000003d0 <init_USART>:
}

void init_USART(){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 3d0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 3d4:	87 e6       	ldi	r24, 0x67	; 103
 3d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 3da:	88 e1       	ldi	r24, 0x18	; 24
 3dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 3e0:	86 e0       	ldi	r24, 0x06	; 6
 3e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 3e6:	08 95       	ret

000003e8 <init_scheduler>:
}

void init_scheduler()
{
	SCH_Init_T1();
 3e8:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temperatuur,0,100);	// moet 4000 worden@@@
 3ec:	44 e6       	ldi	r20, 0x64	; 100
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	88 e3       	ldi	r24, 0x38	; 56
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(ldr,1,100);			// moet 3000 worden
 3fc:	44 e6       	ldi	r20, 0x64	; 100
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	82 e7       	ldi	r24, 0x72	; 114
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(afstand,2,100);
 40c:	44 e6       	ldi	r20, 0x64	; 100
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	86 ea       	ldi	r24, 0xA6	; 166
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	// SCH_Add_Task(upDown,3,100);		
	// SCH_Add_Task(check_input,4,1);
	SCH_Add_Task(newRegel,5,100);
 41c:	44 e6       	ldi	r20, 0x64	; 100
 41e:	50 e0       	ldi	r21, 0x00	; 0
 420:	65 e0       	ldi	r22, 0x05	; 5
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	88 ed       	ldi	r24, 0xD8	; 216
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 42c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 430:	08 95       	ret

00000432 <init_adc>:
}

void init_adc(){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
 432:	ea e7       	ldi	r30, 0x7A	; 122
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	87 60       	ori	r24, 0x07	; 7
 43a:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
 43c:	ac e7       	ldi	r26, 0x7C	; 124
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	8c 91       	ld	r24, X
 442:	80 64       	ori	r24, 0x40	; 64
 444:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
 446:	80 81       	ld	r24, Z
 448:	80 68       	ori	r24, 0x80	; 128
 44a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 44c:	80 81       	ld	r24, Z
 44e:	80 64       	ori	r24, 0x40	; 64
 450:	80 83       	st	Z, r24
 452:	08 95       	ret

00000454 <init_dist>:
}

void init_dist(){
	DDRD |= _BV(PD3); // Pin 3 Trigger Output
 454:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~_BV(PD2); // Pin 2 Echo Input
 456:	52 98       	cbi	0x0a, 2	; 10
 458:	08 95       	ret

0000045a <init_lampjes>:
}

void init_lampjes(){
	DDRB |= _BV(PB0);	// pin0 B = output
 45a:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1);	// pin1 B = output
 45c:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(PB2);	// pin2 B = output
 45e:	22 9a       	sbi	0x04, 2	; 4
	
	PORTB = 0; // lampjes uitzetten
 460:	15 b8       	out	0x05, r1	; 5
 462:	08 95       	ret

00000464 <setup>:
		SCH_Dispatch_Tasks();
	}
}

void setup(){
	init_connectie();
 464:	0e 94 df 01 	call	0x3be	; 0x3be <init_connectie>
	init_adc();			// Setup the ADC
 468:	0e 94 19 02 	call	0x432	; 0x432 <init_adc>
	init_USART();			// Setup the USART
 46c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <init_USART>
	init_dist();
 470:	0e 94 2a 02 	call	0x454	; 0x454 <init_dist>
	init_scheduler();
 474:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <init_scheduler>
	init_lampjes();
 478:	0e 94 2d 02 	call	0x45a	; 0x45a <init_lampjes>
 47c:	08 95       	ret

0000047e <main>:

int main(void);
void setup();

int main(void){
	setup();
 47e:	0e 94 32 02 	call	0x464	; 0x464 <setup>
	while(1) {
		SCH_Dispatch_Tasks();
 482:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 486:	fd cf       	rjmp	.-6      	; 0x482 <main+0x4>

00000488 <__subsf3>:
 488:	50 58       	subi	r21, 0x80	; 128

0000048a <__addsf3>:
 48a:	bb 27       	eor	r27, r27
 48c:	aa 27       	eor	r26, r26
 48e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__addsf3x>
 492:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_round>
 496:	0e 94 2d 03 	call	0x65a	; 0x65a <__fp_pscA>
 49a:	38 f0       	brcs	.+14     	; 0x4aa <__addsf3+0x20>
 49c:	0e 94 34 03 	call	0x668	; 0x668 <__fp_pscB>
 4a0:	20 f0       	brcs	.+8      	; 0x4aa <__addsf3+0x20>
 4a2:	39 f4       	brne	.+14     	; 0x4b2 <__addsf3+0x28>
 4a4:	9f 3f       	cpi	r25, 0xFF	; 255
 4a6:	19 f4       	brne	.+6      	; 0x4ae <__addsf3+0x24>
 4a8:	26 f4       	brtc	.+8      	; 0x4b2 <__addsf3+0x28>
 4aa:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_nan>
 4ae:	0e f4       	brtc	.+2      	; 0x4b2 <__addsf3+0x28>
 4b0:	e0 95       	com	r30
 4b2:	e7 fb       	bst	r30, 7
 4b4:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_inf>

000004b8 <__addsf3x>:
 4b8:	e9 2f       	mov	r30, r25
 4ba:	0e 94 4c 03 	call	0x698	; 0x698 <__fp_split3>
 4be:	58 f3       	brcs	.-42     	; 0x496 <__addsf3+0xc>
 4c0:	ba 17       	cp	r27, r26
 4c2:	62 07       	cpc	r22, r18
 4c4:	73 07       	cpc	r23, r19
 4c6:	84 07       	cpc	r24, r20
 4c8:	95 07       	cpc	r25, r21
 4ca:	20 f0       	brcs	.+8      	; 0x4d4 <__addsf3x+0x1c>
 4cc:	79 f4       	brne	.+30     	; 0x4ec <__addsf3x+0x34>
 4ce:	a6 f5       	brtc	.+104    	; 0x538 <__addsf3x+0x80>
 4d0:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_zero>
 4d4:	0e f4       	brtc	.+2      	; 0x4d8 <__addsf3x+0x20>
 4d6:	e0 95       	com	r30
 4d8:	0b 2e       	mov	r0, r27
 4da:	ba 2f       	mov	r27, r26
 4dc:	a0 2d       	mov	r26, r0
 4de:	0b 01       	movw	r0, r22
 4e0:	b9 01       	movw	r22, r18
 4e2:	90 01       	movw	r18, r0
 4e4:	0c 01       	movw	r0, r24
 4e6:	ca 01       	movw	r24, r20
 4e8:	a0 01       	movw	r20, r0
 4ea:	11 24       	eor	r1, r1
 4ec:	ff 27       	eor	r31, r31
 4ee:	59 1b       	sub	r21, r25
 4f0:	99 f0       	breq	.+38     	; 0x518 <__addsf3x+0x60>
 4f2:	59 3f       	cpi	r21, 0xF9	; 249
 4f4:	50 f4       	brcc	.+20     	; 0x50a <__addsf3x+0x52>
 4f6:	50 3e       	cpi	r21, 0xE0	; 224
 4f8:	68 f1       	brcs	.+90     	; 0x554 <__addsf3x+0x9c>
 4fa:	1a 16       	cp	r1, r26
 4fc:	f0 40       	sbci	r31, 0x00	; 0
 4fe:	a2 2f       	mov	r26, r18
 500:	23 2f       	mov	r18, r19
 502:	34 2f       	mov	r19, r20
 504:	44 27       	eor	r20, r20
 506:	58 5f       	subi	r21, 0xF8	; 248
 508:	f3 cf       	rjmp	.-26     	; 0x4f0 <__addsf3x+0x38>
 50a:	46 95       	lsr	r20
 50c:	37 95       	ror	r19
 50e:	27 95       	ror	r18
 510:	a7 95       	ror	r26
 512:	f0 40       	sbci	r31, 0x00	; 0
 514:	53 95       	inc	r21
 516:	c9 f7       	brne	.-14     	; 0x50a <__addsf3x+0x52>
 518:	7e f4       	brtc	.+30     	; 0x538 <__addsf3x+0x80>
 51a:	1f 16       	cp	r1, r31
 51c:	ba 0b       	sbc	r27, r26
 51e:	62 0b       	sbc	r22, r18
 520:	73 0b       	sbc	r23, r19
 522:	84 0b       	sbc	r24, r20
 524:	ba f0       	brmi	.+46     	; 0x554 <__addsf3x+0x9c>
 526:	91 50       	subi	r25, 0x01	; 1
 528:	a1 f0       	breq	.+40     	; 0x552 <__addsf3x+0x9a>
 52a:	ff 0f       	add	r31, r31
 52c:	bb 1f       	adc	r27, r27
 52e:	66 1f       	adc	r22, r22
 530:	77 1f       	adc	r23, r23
 532:	88 1f       	adc	r24, r24
 534:	c2 f7       	brpl	.-16     	; 0x526 <__addsf3x+0x6e>
 536:	0e c0       	rjmp	.+28     	; 0x554 <__addsf3x+0x9c>
 538:	ba 0f       	add	r27, r26
 53a:	62 1f       	adc	r22, r18
 53c:	73 1f       	adc	r23, r19
 53e:	84 1f       	adc	r24, r20
 540:	48 f4       	brcc	.+18     	; 0x554 <__addsf3x+0x9c>
 542:	87 95       	ror	r24
 544:	77 95       	ror	r23
 546:	67 95       	ror	r22
 548:	b7 95       	ror	r27
 54a:	f7 95       	ror	r31
 54c:	9e 3f       	cpi	r25, 0xFE	; 254
 54e:	08 f0       	brcs	.+2      	; 0x552 <__addsf3x+0x9a>
 550:	b0 cf       	rjmp	.-160    	; 0x4b2 <__addsf3+0x28>
 552:	93 95       	inc	r25
 554:	88 0f       	add	r24, r24
 556:	08 f0       	brcs	.+2      	; 0x55a <__addsf3x+0xa2>
 558:	99 27       	eor	r25, r25
 55a:	ee 0f       	add	r30, r30
 55c:	97 95       	ror	r25
 55e:	87 95       	ror	r24
 560:	08 95       	ret

00000562 <__fixsfsi>:
 562:	0e 94 b8 02 	call	0x570	; 0x570 <__fixunssfsi>
 566:	68 94       	set
 568:	b1 11       	cpse	r27, r1
 56a:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_szero>
 56e:	08 95       	ret

00000570 <__fixunssfsi>:
 570:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fp_splitA>
 574:	88 f0       	brcs	.+34     	; 0x598 <__fixunssfsi+0x28>
 576:	9f 57       	subi	r25, 0x7F	; 127
 578:	98 f0       	brcs	.+38     	; 0x5a0 <__fixunssfsi+0x30>
 57a:	b9 2f       	mov	r27, r25
 57c:	99 27       	eor	r25, r25
 57e:	b7 51       	subi	r27, 0x17	; 23
 580:	b0 f0       	brcs	.+44     	; 0x5ae <__fixunssfsi+0x3e>
 582:	e1 f0       	breq	.+56     	; 0x5bc <__fixunssfsi+0x4c>
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	88 1f       	adc	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	1a f0       	brmi	.+6      	; 0x594 <__fixunssfsi+0x24>
 58e:	ba 95       	dec	r27
 590:	c9 f7       	brne	.-14     	; 0x584 <__fixunssfsi+0x14>
 592:	14 c0       	rjmp	.+40     	; 0x5bc <__fixunssfsi+0x4c>
 594:	b1 30       	cpi	r27, 0x01	; 1
 596:	91 f0       	breq	.+36     	; 0x5bc <__fixunssfsi+0x4c>
 598:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_zero>
 59c:	b1 e0       	ldi	r27, 0x01	; 1
 59e:	08 95       	ret
 5a0:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_zero>
 5a4:	67 2f       	mov	r22, r23
 5a6:	78 2f       	mov	r23, r24
 5a8:	88 27       	eor	r24, r24
 5aa:	b8 5f       	subi	r27, 0xF8	; 248
 5ac:	39 f0       	breq	.+14     	; 0x5bc <__fixunssfsi+0x4c>
 5ae:	b9 3f       	cpi	r27, 0xF9	; 249
 5b0:	cc f3       	brlt	.-14     	; 0x5a4 <__fixunssfsi+0x34>
 5b2:	86 95       	lsr	r24
 5b4:	77 95       	ror	r23
 5b6:	67 95       	ror	r22
 5b8:	b3 95       	inc	r27
 5ba:	d9 f7       	brne	.-10     	; 0x5b2 <__fixunssfsi+0x42>
 5bc:	3e f4       	brtc	.+14     	; 0x5cc <__fixunssfsi+0x5c>
 5be:	90 95       	com	r25
 5c0:	80 95       	com	r24
 5c2:	70 95       	com	r23
 5c4:	61 95       	neg	r22
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ca:	9f 4f       	sbci	r25, 0xFF	; 255
 5cc:	08 95       	ret

000005ce <__floatunsisf>:
 5ce:	e8 94       	clt
 5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <__floatsisf+0x12>

000005d2 <__floatsisf>:
 5d2:	97 fb       	bst	r25, 7
 5d4:	3e f4       	brtc	.+14     	; 0x5e4 <__floatsisf+0x12>
 5d6:	90 95       	com	r25
 5d8:	80 95       	com	r24
 5da:	70 95       	com	r23
 5dc:	61 95       	neg	r22
 5de:	7f 4f       	sbci	r23, 0xFF	; 255
 5e0:	8f 4f       	sbci	r24, 0xFF	; 255
 5e2:	9f 4f       	sbci	r25, 0xFF	; 255
 5e4:	99 23       	and	r25, r25
 5e6:	a9 f0       	breq	.+42     	; 0x612 <__floatsisf+0x40>
 5e8:	f9 2f       	mov	r31, r25
 5ea:	96 e9       	ldi	r25, 0x96	; 150
 5ec:	bb 27       	eor	r27, r27
 5ee:	93 95       	inc	r25
 5f0:	f6 95       	lsr	r31
 5f2:	87 95       	ror	r24
 5f4:	77 95       	ror	r23
 5f6:	67 95       	ror	r22
 5f8:	b7 95       	ror	r27
 5fa:	f1 11       	cpse	r31, r1
 5fc:	f8 cf       	rjmp	.-16     	; 0x5ee <__floatsisf+0x1c>
 5fe:	fa f4       	brpl	.+62     	; 0x63e <__floatsisf+0x6c>
 600:	bb 0f       	add	r27, r27
 602:	11 f4       	brne	.+4      	; 0x608 <__floatsisf+0x36>
 604:	60 ff       	sbrs	r22, 0
 606:	1b c0       	rjmp	.+54     	; 0x63e <__floatsisf+0x6c>
 608:	6f 5f       	subi	r22, 0xFF	; 255
 60a:	7f 4f       	sbci	r23, 0xFF	; 255
 60c:	8f 4f       	sbci	r24, 0xFF	; 255
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	16 c0       	rjmp	.+44     	; 0x63e <__floatsisf+0x6c>
 612:	88 23       	and	r24, r24
 614:	11 f0       	breq	.+4      	; 0x61a <__floatsisf+0x48>
 616:	96 e9       	ldi	r25, 0x96	; 150
 618:	11 c0       	rjmp	.+34     	; 0x63c <__floatsisf+0x6a>
 61a:	77 23       	and	r23, r23
 61c:	21 f0       	breq	.+8      	; 0x626 <__floatsisf+0x54>
 61e:	9e e8       	ldi	r25, 0x8E	; 142
 620:	87 2f       	mov	r24, r23
 622:	76 2f       	mov	r23, r22
 624:	05 c0       	rjmp	.+10     	; 0x630 <__floatsisf+0x5e>
 626:	66 23       	and	r22, r22
 628:	71 f0       	breq	.+28     	; 0x646 <__floatsisf+0x74>
 62a:	96 e8       	ldi	r25, 0x86	; 134
 62c:	86 2f       	mov	r24, r22
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	2a f0       	brmi	.+10     	; 0x63e <__floatsisf+0x6c>
 634:	9a 95       	dec	r25
 636:	66 0f       	add	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	da f7       	brpl	.-10     	; 0x634 <__floatsisf+0x62>
 63e:	88 0f       	add	r24, r24
 640:	96 95       	lsr	r25
 642:	87 95       	ror	r24
 644:	97 f9       	bld	r25, 7
 646:	08 95       	ret

00000648 <__fp_inf>:
 648:	97 f9       	bld	r25, 7
 64a:	9f 67       	ori	r25, 0x7F	; 127
 64c:	80 e8       	ldi	r24, 0x80	; 128
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	08 95       	ret

00000654 <__fp_nan>:
 654:	9f ef       	ldi	r25, 0xFF	; 255
 656:	80 ec       	ldi	r24, 0xC0	; 192
 658:	08 95       	ret

0000065a <__fp_pscA>:
 65a:	00 24       	eor	r0, r0
 65c:	0a 94       	dec	r0
 65e:	16 16       	cp	r1, r22
 660:	17 06       	cpc	r1, r23
 662:	18 06       	cpc	r1, r24
 664:	09 06       	cpc	r0, r25
 666:	08 95       	ret

00000668 <__fp_pscB>:
 668:	00 24       	eor	r0, r0
 66a:	0a 94       	dec	r0
 66c:	12 16       	cp	r1, r18
 66e:	13 06       	cpc	r1, r19
 670:	14 06       	cpc	r1, r20
 672:	05 06       	cpc	r0, r21
 674:	08 95       	ret

00000676 <__fp_round>:
 676:	09 2e       	mov	r0, r25
 678:	03 94       	inc	r0
 67a:	00 0c       	add	r0, r0
 67c:	11 f4       	brne	.+4      	; 0x682 <__fp_round+0xc>
 67e:	88 23       	and	r24, r24
 680:	52 f0       	brmi	.+20     	; 0x696 <__fp_round+0x20>
 682:	bb 0f       	add	r27, r27
 684:	40 f4       	brcc	.+16     	; 0x696 <__fp_round+0x20>
 686:	bf 2b       	or	r27, r31
 688:	11 f4       	brne	.+4      	; 0x68e <__fp_round+0x18>
 68a:	60 ff       	sbrs	r22, 0
 68c:	04 c0       	rjmp	.+8      	; 0x696 <__fp_round+0x20>
 68e:	6f 5f       	subi	r22, 0xFF	; 255
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	8f 4f       	sbci	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	08 95       	ret

00000698 <__fp_split3>:
 698:	57 fd       	sbrc	r21, 7
 69a:	90 58       	subi	r25, 0x80	; 128
 69c:	44 0f       	add	r20, r20
 69e:	55 1f       	adc	r21, r21
 6a0:	59 f0       	breq	.+22     	; 0x6b8 <__fp_splitA+0x10>
 6a2:	5f 3f       	cpi	r21, 0xFF	; 255
 6a4:	71 f0       	breq	.+28     	; 0x6c2 <__fp_splitA+0x1a>
 6a6:	47 95       	ror	r20

000006a8 <__fp_splitA>:
 6a8:	88 0f       	add	r24, r24
 6aa:	97 fb       	bst	r25, 7
 6ac:	99 1f       	adc	r25, r25
 6ae:	61 f0       	breq	.+24     	; 0x6c8 <__fp_splitA+0x20>
 6b0:	9f 3f       	cpi	r25, 0xFF	; 255
 6b2:	79 f0       	breq	.+30     	; 0x6d2 <__fp_splitA+0x2a>
 6b4:	87 95       	ror	r24
 6b6:	08 95       	ret
 6b8:	12 16       	cp	r1, r18
 6ba:	13 06       	cpc	r1, r19
 6bc:	14 06       	cpc	r1, r20
 6be:	55 1f       	adc	r21, r21
 6c0:	f2 cf       	rjmp	.-28     	; 0x6a6 <__fp_split3+0xe>
 6c2:	46 95       	lsr	r20
 6c4:	f1 df       	rcall	.-30     	; 0x6a8 <__fp_splitA>
 6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <__fp_splitA+0x30>
 6c8:	16 16       	cp	r1, r22
 6ca:	17 06       	cpc	r1, r23
 6cc:	18 06       	cpc	r1, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	f1 cf       	rjmp	.-30     	; 0x6b4 <__fp_splitA+0xc>
 6d2:	86 95       	lsr	r24
 6d4:	71 05       	cpc	r23, r1
 6d6:	61 05       	cpc	r22, r1
 6d8:	08 94       	sec
 6da:	08 95       	ret

000006dc <__fp_zero>:
 6dc:	e8 94       	clt

000006de <__fp_szero>:
 6de:	bb 27       	eor	r27, r27
 6e0:	66 27       	eor	r22, r22
 6e2:	77 27       	eor	r23, r23
 6e4:	cb 01       	movw	r24, r22
 6e6:	97 f9       	bld	r25, 7
 6e8:	08 95       	ret

000006ea <__mulsf3>:
 6ea:	0e 94 88 03 	call	0x710	; 0x710 <__mulsf3x>
 6ee:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_round>
 6f2:	0e 94 2d 03 	call	0x65a	; 0x65a <__fp_pscA>
 6f6:	38 f0       	brcs	.+14     	; 0x706 <__mulsf3+0x1c>
 6f8:	0e 94 34 03 	call	0x668	; 0x668 <__fp_pscB>
 6fc:	20 f0       	brcs	.+8      	; 0x706 <__mulsf3+0x1c>
 6fe:	95 23       	and	r25, r21
 700:	11 f0       	breq	.+4      	; 0x706 <__mulsf3+0x1c>
 702:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_inf>
 706:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_nan>
 70a:	11 24       	eor	r1, r1
 70c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_szero>

00000710 <__mulsf3x>:
 710:	0e 94 4c 03 	call	0x698	; 0x698 <__fp_split3>
 714:	70 f3       	brcs	.-36     	; 0x6f2 <__mulsf3+0x8>

00000716 <__mulsf3_pse>:
 716:	95 9f       	mul	r25, r21
 718:	c1 f3       	breq	.-16     	; 0x70a <__mulsf3+0x20>
 71a:	95 0f       	add	r25, r21
 71c:	50 e0       	ldi	r21, 0x00	; 0
 71e:	55 1f       	adc	r21, r21
 720:	62 9f       	mul	r22, r18
 722:	f0 01       	movw	r30, r0
 724:	72 9f       	mul	r23, r18
 726:	bb 27       	eor	r27, r27
 728:	f0 0d       	add	r31, r0
 72a:	b1 1d       	adc	r27, r1
 72c:	63 9f       	mul	r22, r19
 72e:	aa 27       	eor	r26, r26
 730:	f0 0d       	add	r31, r0
 732:	b1 1d       	adc	r27, r1
 734:	aa 1f       	adc	r26, r26
 736:	64 9f       	mul	r22, r20
 738:	66 27       	eor	r22, r22
 73a:	b0 0d       	add	r27, r0
 73c:	a1 1d       	adc	r26, r1
 73e:	66 1f       	adc	r22, r22
 740:	82 9f       	mul	r24, r18
 742:	22 27       	eor	r18, r18
 744:	b0 0d       	add	r27, r0
 746:	a1 1d       	adc	r26, r1
 748:	62 1f       	adc	r22, r18
 74a:	73 9f       	mul	r23, r19
 74c:	b0 0d       	add	r27, r0
 74e:	a1 1d       	adc	r26, r1
 750:	62 1f       	adc	r22, r18
 752:	83 9f       	mul	r24, r19
 754:	a0 0d       	add	r26, r0
 756:	61 1d       	adc	r22, r1
 758:	22 1f       	adc	r18, r18
 75a:	74 9f       	mul	r23, r20
 75c:	33 27       	eor	r19, r19
 75e:	a0 0d       	add	r26, r0
 760:	61 1d       	adc	r22, r1
 762:	23 1f       	adc	r18, r19
 764:	84 9f       	mul	r24, r20
 766:	60 0d       	add	r22, r0
 768:	21 1d       	adc	r18, r1
 76a:	82 2f       	mov	r24, r18
 76c:	76 2f       	mov	r23, r22
 76e:	6a 2f       	mov	r22, r26
 770:	11 24       	eor	r1, r1
 772:	9f 57       	subi	r25, 0x7F	; 127
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	9a f0       	brmi	.+38     	; 0x79e <__mulsf3_pse+0x88>
 778:	f1 f0       	breq	.+60     	; 0x7b6 <__mulsf3_pse+0xa0>
 77a:	88 23       	and	r24, r24
 77c:	4a f0       	brmi	.+18     	; 0x790 <__mulsf3_pse+0x7a>
 77e:	ee 0f       	add	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	bb 1f       	adc	r27, r27
 784:	66 1f       	adc	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	91 50       	subi	r25, 0x01	; 1
 78c:	50 40       	sbci	r21, 0x00	; 0
 78e:	a9 f7       	brne	.-22     	; 0x77a <__mulsf3_pse+0x64>
 790:	9e 3f       	cpi	r25, 0xFE	; 254
 792:	51 05       	cpc	r21, r1
 794:	80 f0       	brcs	.+32     	; 0x7b6 <__mulsf3_pse+0xa0>
 796:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_inf>
 79a:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_szero>
 79e:	5f 3f       	cpi	r21, 0xFF	; 255
 7a0:	e4 f3       	brlt	.-8      	; 0x79a <__mulsf3_pse+0x84>
 7a2:	98 3e       	cpi	r25, 0xE8	; 232
 7a4:	d4 f3       	brlt	.-12     	; 0x79a <__mulsf3_pse+0x84>
 7a6:	86 95       	lsr	r24
 7a8:	77 95       	ror	r23
 7aa:	67 95       	ror	r22
 7ac:	b7 95       	ror	r27
 7ae:	f7 95       	ror	r31
 7b0:	e7 95       	ror	r30
 7b2:	9f 5f       	subi	r25, 0xFF	; 255
 7b4:	c1 f7       	brne	.-16     	; 0x7a6 <__mulsf3_pse+0x90>
 7b6:	fe 2b       	or	r31, r30
 7b8:	88 0f       	add	r24, r24
 7ba:	91 1d       	adc	r25, r1
 7bc:	96 95       	lsr	r25
 7be:	87 95       	ror	r24
 7c0:	97 f9       	bld	r25, 7
 7c2:	08 95       	ret

000007c4 <__itoa_ncheck>:
 7c4:	bb 27       	eor	r27, r27
 7c6:	4a 30       	cpi	r20, 0x0A	; 10
 7c8:	31 f4       	brne	.+12     	; 0x7d6 <__itoa_ncheck+0x12>
 7ca:	99 23       	and	r25, r25
 7cc:	22 f4       	brpl	.+8      	; 0x7d6 <__itoa_ncheck+0x12>
 7ce:	bd e2       	ldi	r27, 0x2D	; 45
 7d0:	90 95       	com	r25
 7d2:	81 95       	neg	r24
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__utoa_common>

000007da <__utoa_ncheck>:
 7da:	bb 27       	eor	r27, r27

000007dc <__utoa_common>:
 7dc:	fb 01       	movw	r30, r22
 7de:	55 27       	eor	r21, r21
 7e0:	aa 27       	eor	r26, r26
 7e2:	88 0f       	add	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	aa 1f       	adc	r26, r26
 7e8:	a4 17       	cp	r26, r20
 7ea:	10 f0       	brcs	.+4      	; 0x7f0 <__utoa_common+0x14>
 7ec:	a4 1b       	sub	r26, r20
 7ee:	83 95       	inc	r24
 7f0:	50 51       	subi	r21, 0x10	; 16
 7f2:	b9 f7       	brne	.-18     	; 0x7e2 <__utoa_common+0x6>
 7f4:	a0 5d       	subi	r26, 0xD0	; 208
 7f6:	aa 33       	cpi	r26, 0x3A	; 58
 7f8:	08 f0       	brcs	.+2      	; 0x7fc <__utoa_common+0x20>
 7fa:	a9 5d       	subi	r26, 0xD9	; 217
 7fc:	a1 93       	st	Z+, r26
 7fe:	00 97       	sbiw	r24, 0x00	; 0
 800:	79 f7       	brne	.-34     	; 0x7e0 <__utoa_common+0x4>
 802:	b1 11       	cpse	r27, r1
 804:	b1 93       	st	Z+, r27
 806:	11 92       	st	Z+, r1
 808:	cb 01       	movw	r24, r22
 80a:	0c 94 07 04 	jmp	0x80e	; 0x80e <strrev>

0000080e <strrev>:
 80e:	dc 01       	movw	r26, r24
 810:	fc 01       	movw	r30, r24
 812:	67 2f       	mov	r22, r23
 814:	71 91       	ld	r23, Z+
 816:	77 23       	and	r23, r23
 818:	e1 f7       	brne	.-8      	; 0x812 <strrev+0x4>
 81a:	32 97       	sbiw	r30, 0x02	; 2
 81c:	04 c0       	rjmp	.+8      	; 0x826 <strrev+0x18>
 81e:	7c 91       	ld	r23, X
 820:	6d 93       	st	X+, r22
 822:	70 83       	st	Z, r23
 824:	62 91       	ld	r22, -Z
 826:	ae 17       	cp	r26, r30
 828:	bf 07       	cpc	r27, r31
 82a:	c8 f3       	brcs	.-14     	; 0x81e <strrev+0x10>
 82c:	08 95       	ret

0000082e <_exit>:
 82e:	f8 94       	cli

00000830 <__stop_program>:
 830:	ff cf       	rjmp	.-2      	; 0x830 <__stop_program>
