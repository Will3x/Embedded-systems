
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000f0e  00000fa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  0080013a  0080013a  00000fdc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002072  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b65  00000000  00000000  0000320e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de1  00000000  00000000  00003d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  00004b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000666  00000000  00000000  00004e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001601  00000000  00000000  000054ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00006abb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 37       	cpi	r26, 0x72	; 114
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 05 	call	0xb0e	; 0xb0e <main>
  9e:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <SCH_tasks_G>
  b4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	ec e3       	ldi	r30, 0x3C	; 60
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e4 5c       	subi	r30, 0xC4	; 196
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e4 5c       	subi	r30, 0xC4	; 196
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cc e3       	ldi	r28, 0x3C	; 60
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	ec e3       	ldi	r30, 0x3C	; 60
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	2f e5       	ldi	r18, 0x5F	; 95
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_receive>:
	USART_send('\n');
}

int unsigned combine(unsigned y, unsigned x){
	return (x * 10) + y;
}
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <USART_receive+0x4>
 222:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 226:	08 95       	ret

00000228 <USART_send>:
 228:	e0 ec       	ldi	r30, 0xC0	; 192
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	90 81       	ld	r25, Z
 22e:	95 ff       	sbrs	r25, 5
 230:	fd cf       	rjmp	.-6      	; 0x22c <USART_send+0x4>
 232:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 236:	08 95       	ret

00000238 <USART_putstring>:
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <USART_putstring+0x18>
 244:	21 96       	adiw	r28, 0x01	; 1
 246:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 24a:	89 91       	ld	r24, Y+
 24c:	81 11       	cpse	r24, r1
 24e:	fb cf       	rjmp	.-10     	; 0x246 <USART_putstring+0xe>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <read_adc>:
 256:	ec e7       	ldi	r30, 0x7C	; 124
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	90 81       	ld	r25, Z
 25c:	90 7f       	andi	r25, 0xF0	; 240
 25e:	90 83       	st	Z, r25
 260:	90 81       	ld	r25, Z
 262:	89 2b       	or	r24, r25
 264:	80 83       	st	Z, r24
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	80 83       	st	Z, r24
 270:	80 81       	ld	r24, Z
 272:	86 fd       	sbrc	r24, 6
 274:	fd cf       	rjmp	.-6      	; 0x270 <read_adc+0x1a>
 276:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 27a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 27e:	08 95       	ret

00000280 <temperatuur>:
 280:	8c e0       	ldi	r24, 0x0C	; 12
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 2b 01 	call	0x256	; 0x256 <read_adc>
 28e:	bc 01       	movw	r22, r24
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__floatunsisf>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e8       	ldi	r20, 0x80	; 128
 29e:	5a e3       	ldi	r21, 0x3A	; 58
 2a0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 ea       	ldi	r20, 0xA0	; 160
 2aa:	50 e4       	ldi	r21, 0x40	; 64
 2ac:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	5f e3       	ldi	r21, 0x3F	; 63
 2b8:	0e 94 8c 05 	call	0xb18	; 0xb18 <__subsf3>
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	48 ec       	ldi	r20, 0xC8	; 200
 2c2:	52 e4       	ldi	r21, 0x42	; 66
 2c4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 2c8:	0e 94 00 06 	call	0xc00	; 0xc00 <__fixunssfsi>
 2cc:	dc 01       	movw	r26, r24
 2ce:	cb 01       	movw	r24, r22
 2d0:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <adc_value+0x1>
 2d4:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <adc_value>
 2d8:	4a e0       	ldi	r20, 0x0A	; 10
 2da:	6d e6       	ldi	r22, 0x6D	; 109
 2dc:	71 e0       	ldi	r23, 0x01	; 1
 2de:	0e 94 48 07 	call	0xe90	; 0xe90 <__itoa_ncheck>
 2e2:	8d e6       	ldi	r24, 0x6D	; 109
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 2ea:	84 e1       	ldi	r24, 0x14	; 20
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 2f2:	08 95       	ret

000002f4 <ldr>:
 2f4:	87 e1       	ldi	r24, 0x17	; 23
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 2b 01 	call	0x256	; 0x256 <read_adc>
 302:	bc 01       	movw	r22, r24
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__floatunsisf>
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	40 e8       	ldi	r20, 0x80	; 128
 312:	5a e3       	ldi	r21, 0x3A	; 58
 314:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	48 ec       	ldi	r20, 0xC8	; 200
 31e:	52 e4       	ldi	r21, 0x42	; 66
 320:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 ec       	ldi	r20, 0xC0	; 192
 32a:	5f e3       	ldi	r21, 0x3F	; 63
 32c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 330:	0e 94 00 06 	call	0xc00	; 0xc00 <__fixunssfsi>
 334:	dc 01       	movw	r26, r24
 336:	cb 01       	movw	r24, r22
 338:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <adc_value+0x1>
 33c:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <adc_value>
 340:	4a e0       	ldi	r20, 0x0A	; 10
 342:	68 e6       	ldi	r22, 0x68	; 104
 344:	71 e0       	ldi	r23, 0x01	; 1
 346:	0e 94 48 07 	call	0xe90	; 0xe90 <__itoa_ncheck>
 34a:	88 e6       	ldi	r24, 0x68	; 104
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 352:	84 e1       	ldi	r24, 0x14	; 20
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 35a:	08 95       	ret

0000035c <afstand>:
 35c:	8e e1       	ldi	r24, 0x1E	; 30
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 364:	5b 9a       	sbi	0x0b, 3	; 11
 366:	85 e3       	ldi	r24, 0x35	; 53
 368:	8a 95       	dec	r24
 36a:	f1 f7       	brne	.-4      	; 0x368 <afstand+0xc>
 36c:	00 00       	nop
 36e:	5b 98       	cbi	0x0b, 3	; 11
 370:	4a 9b       	sbis	0x09, 2	; 9
 372:	fe cf       	rjmp	.-4      	; 0x370 <afstand+0x14>
 374:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 378:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 37c:	4a 99       	sbic	0x09, 2	; 9
 37e:	fe cf       	rjmp	.-4      	; 0x37c <afstand+0x20>
 380:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 384:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__floatunsisf>
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	40 e8       	ldi	r20, 0x80	; 128
 396:	5e e3       	ldi	r21, 0x3E	; 62
 398:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 39c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fixsfsi>
 3a0:	dc 01       	movw	r26, r24
 3a2:	cb 01       	movw	r24, r22
 3a4:	4a e0       	ldi	r20, 0x0A	; 10
 3a6:	61 e6       	ldi	r22, 0x61	; 97
 3a8:	71 e0       	ldi	r23, 0x01	; 1
 3aa:	0e 94 48 07 	call	0xe90	; 0xe90 <__itoa_ncheck>
 3ae:	81 e6       	ldi	r24, 0x61	; 97
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 3b6:	84 e1       	ldi	r24, 0x14	; 20
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 3be:	08 95       	ret

000003c0 <afstandStil>:
 3c0:	5b 9a       	sbi	0x0b, 3	; 11
 3c2:	85 e3       	ldi	r24, 0x35	; 53
 3c4:	8a 95       	dec	r24
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <afstandStil+0x4>
 3c8:	00 00       	nop
 3ca:	5b 98       	cbi	0x0b, 3	; 11
 3cc:	4a 9b       	sbis	0x09, 2	; 9
 3ce:	fe cf       	rjmp	.-4      	; 0x3cc <afstandStil+0xc>
 3d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3d8:	4a 99       	sbic	0x09, 2	; 9
 3da:	fe cf       	rjmp	.-4      	; 0x3d8 <afstandStil+0x18>
 3dc:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3e0:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__floatunsisf>
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	40 e8       	ldi	r20, 0x80	; 128
 3f2:	5e e3       	ldi	r21, 0x3E	; 62
 3f4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 3f8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fixsfsi>
 3fc:	dc 01       	movw	r26, r24
 3fe:	cb 01       	movw	r24, r22
 400:	4a e0       	ldi	r20, 0x0A	; 10
 402:	61 e6       	ldi	r22, 0x61	; 97
 404:	71 e0       	ldi	r23, 0x01	; 1
 406:	0e 94 48 07 	call	0xe90	; 0xe90 <__itoa_ncheck>
 40a:	08 95       	ret

0000040c <goDown>:
 40c:	81 e6       	ldi	r24, 0x61	; 97
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 2a 07 	call	0xe54	; 0xe54 <atoi>
 414:	2a 98       	cbi	0x05, 2	; 5
 416:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 41a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 41e:	28 17       	cp	r18, r24
 420:	39 07       	cpc	r19, r25
 422:	bc f4       	brge	.+46     	; 0x452 <goDown+0x46>
 424:	28 9a       	sbi	0x05, 0	; 5
 426:	2f ef       	ldi	r18, 0xFF	; 255
 428:	81 ee       	ldi	r24, 0xE1	; 225
 42a:	94 e0       	ldi	r25, 0x04	; 4
 42c:	21 50       	subi	r18, 0x01	; 1
 42e:	80 40       	sbci	r24, 0x00	; 0
 430:	90 40       	sbci	r25, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <goDown+0x20>
 434:	00 c0       	rjmp	.+0      	; 0x436 <goDown+0x2a>
 436:	00 00       	nop
 438:	29 9a       	sbi	0x05, 1	; 5
 43a:	2f ef       	ldi	r18, 0xFF	; 255
 43c:	81 ee       	ldi	r24, 0xE1	; 225
 43e:	94 e0       	ldi	r25, 0x04	; 4
 440:	21 50       	subi	r18, 0x01	; 1
 442:	80 40       	sbci	r24, 0x00	; 0
 444:	90 40       	sbci	r25, 0x00	; 0
 446:	e1 f7       	brne	.-8      	; 0x440 <goDown+0x34>
 448:	00 c0       	rjmp	.+0      	; 0x44a <goDown+0x3e>
 44a:	00 00       	nop
 44c:	29 98       	cbi	0x05, 1	; 5
 44e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <afstandStil>
 452:	28 9a       	sbi	0x05, 0	; 5
 454:	08 95       	ret

00000456 <goUp>:
 456:	81 e6       	ldi	r24, 0x61	; 97
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	0e 94 2a 07 	call	0xe54	; 0xe54 <atoi>
 45e:	28 98       	cbi	0x05, 0	; 5
 460:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <afstand_up>
 464:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <afstand_up+0x1>
 468:	82 17       	cp	r24, r18
 46a:	93 07       	cpc	r25, r19
 46c:	bc f4       	brge	.+46     	; 0x49c <goUp+0x46>
 46e:	2a 9a       	sbi	0x05, 2	; 5
 470:	2f ef       	ldi	r18, 0xFF	; 255
 472:	81 ee       	ldi	r24, 0xE1	; 225
 474:	94 e0       	ldi	r25, 0x04	; 4
 476:	21 50       	subi	r18, 0x01	; 1
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <goUp+0x20>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <goUp+0x2a>
 480:	00 00       	nop
 482:	29 9a       	sbi	0x05, 1	; 5
 484:	2f ef       	ldi	r18, 0xFF	; 255
 486:	81 ee       	ldi	r24, 0xE1	; 225
 488:	94 e0       	ldi	r25, 0x04	; 4
 48a:	21 50       	subi	r18, 0x01	; 1
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	90 40       	sbci	r25, 0x00	; 0
 490:	e1 f7       	brne	.-8      	; 0x48a <goUp+0x34>
 492:	00 c0       	rjmp	.+0      	; 0x494 <goUp+0x3e>
 494:	00 00       	nop
 496:	29 98       	cbi	0x05, 1	; 5
 498:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <afstandStil>
 49c:	2a 9a       	sbi	0x05, 2	; 5
 49e:	08 95       	ret

000004a0 <manual_uit>:
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 4a8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
 4ac:	84 e1       	ldi	r24, 0x14	; 20
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <afstand_up+0x1>
 4b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <afstand_up>
 4b8:	85 e0       	ldi	r24, 0x05	; 5
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 4c4:	08 95       	ret

000004c6 <newRegel>:
 4c6:	8d e0       	ldi	r24, 0x0D	; 13
 4c8:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 4cc:	8a e0       	ldi	r24, 0x0A	; 10
 4ce:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 4d2:	08 95       	ret

000004d4 <__vector_18>:
ISR ( USART_RX_vect ){
 4d4:	1f 92       	push	r1
 4d6:	0f 92       	push	r0
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	0f 92       	push	r0
 4dc:	11 24       	eor	r1, r1
 4de:	2f 93       	push	r18
 4e0:	3f 93       	push	r19
 4e2:	4f 93       	push	r20
 4e4:	5f 93       	push	r21
 4e6:	6f 93       	push	r22
 4e8:	7f 93       	push	r23
 4ea:	8f 93       	push	r24
 4ec:	9f 93       	push	r25
 4ee:	af 93       	push	r26
 4f0:	bf 93       	push	r27
 4f2:	cf 93       	push	r28
 4f4:	ef 93       	push	r30
 4f6:	ff 93       	push	r31
	unsigned char ReceivedByte;
	ReceivedByte = UDR0 ; // Fetch the received byte value into the variable " ByteReceived "
 4f8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	switch(ReceivedByte){
 4fc:	83 33       	cpi	r24, 0x33	; 51
 4fe:	f9 f0       	breq	.+62     	; 0x53e <__vector_18+0x6a>
 500:	28 f4       	brcc	.+10     	; 0x50c <__vector_18+0x38>
 502:	81 33       	cpi	r24, 0x31	; 49
 504:	51 f0       	breq	.+20     	; 0x51a <__vector_18+0x46>
 506:	82 33       	cpi	r24, 0x32	; 50
 508:	89 f0       	breq	.+34     	; 0x52c <__vector_18+0x58>
 50a:	8d c2       	rjmp	.+1306   	; 0xa26 <__stack+0x127>
 50c:	87 33       	cpi	r24, 0x37	; 55
 50e:	09 f4       	brne	.+2      	; 0x512 <__vector_18+0x3e>
 510:	70 c2       	rjmp	.+1248   	; 0x9f2 <__stack+0xf3>
 512:	88 33       	cpi	r24, 0x38	; 56
 514:	09 f4       	brne	.+2      	; 0x518 <__vector_18+0x44>
 516:	81 c2       	rjmp	.+1282   	; 0xa1a <__stack+0x11b>
 518:	86 c2       	rjmp	.+1292   	; 0xa26 <__stack+0x127>
		// 1 = rolluik UITrollen // Rood
		case '1':
			manual = 1;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 522:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			goDown();
 526:	0e 94 06 02 	call	0x40c	; 0x40c <goDown>
			return;
 52a:	7d c2       	rjmp	.+1274   	; 0xa26 <__stack+0x127>
			
		// 2 = rolluik OProllen // Groen
		case '2':
			manual = 1;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 534:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			goUp();
 538:	0e 94 2b 02 	call	0x456	; 0x456 <goUp>
			return;
 53c:	74 c2       	rjmp	.+1256   	; 0xa26 <__stack+0x127>
			
		// 3 = set
		case '3':
			manual_uit();
 53e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <manual_uit>
			temp_down = combine((int)USART_receive()-48, (int) USART_receive()-48);
 542:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 546:	c8 2f       	mov	r28, r24
 548:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 54c:	2c 2f       	mov	r18, r28
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	20 53       	subi	r18, 0x30	; 48
 552:	31 09       	sbc	r19, r1
 554:	a9 01       	movw	r20, r18
 556:	44 0f       	add	r20, r20
 558:	55 1f       	adc	r21, r21
 55a:	22 0f       	add	r18, r18
 55c:	33 1f       	adc	r19, r19
 55e:	22 0f       	add	r18, r18
 560:	33 1f       	adc	r19, r19
 562:	22 0f       	add	r18, r18
 564:	33 1f       	adc	r19, r19
 566:	24 0f       	add	r18, r20
 568:	35 1f       	adc	r19, r21
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	c0 97       	sbiw	r24, 0x30	; 48
 56e:	28 0f       	add	r18, r24
 570:	39 1f       	adc	r19, r25
 572:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <temp_down+0x1>
 576:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <temp_down>
			temp_up = combine((int)USART_receive()-48, (int) USART_receive()-48);;
 57a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 57e:	c8 2f       	mov	r28, r24
 580:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 584:	2c 2f       	mov	r18, r28
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	20 53       	subi	r18, 0x30	; 48
 58a:	31 09       	sbc	r19, r1
 58c:	a9 01       	movw	r20, r18
 58e:	44 0f       	add	r20, r20
 590:	55 1f       	adc	r21, r21
 592:	22 0f       	add	r18, r18
 594:	33 1f       	adc	r19, r19
 596:	22 0f       	add	r18, r18
 598:	33 1f       	adc	r19, r19
 59a:	22 0f       	add	r18, r18
 59c:	33 1f       	adc	r19, r19
 59e:	24 0f       	add	r18, r20
 5a0:	35 1f       	adc	r19, r21
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	c0 97       	sbiw	r24, 0x30	; 48
 5a6:	28 0f       	add	r18, r24
 5a8:	39 1f       	adc	r19, r25
 5aa:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <temp_up+0x1>
 5ae:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <temp_up>
			licht_down = combine((int)USART_receive()-48, (int) USART_receive()-48);;
 5b2:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5b6:	c8 2f       	mov	r28, r24
 5b8:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5bc:	2c 2f       	mov	r18, r28
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	20 53       	subi	r18, 0x30	; 48
 5c2:	31 09       	sbc	r19, r1
 5c4:	a9 01       	movw	r20, r18
 5c6:	44 0f       	add	r20, r20
 5c8:	55 1f       	adc	r21, r21
 5ca:	22 0f       	add	r18, r18
 5cc:	33 1f       	adc	r19, r19
 5ce:	22 0f       	add	r18, r18
 5d0:	33 1f       	adc	r19, r19
 5d2:	22 0f       	add	r18, r18
 5d4:	33 1f       	adc	r19, r19
 5d6:	24 0f       	add	r18, r20
 5d8:	35 1f       	adc	r19, r21
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	c0 97       	sbiw	r24, 0x30	; 48
 5de:	28 0f       	add	r18, r24
 5e0:	39 1f       	adc	r19, r25
 5e2:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <licht_down+0x1>
 5e6:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <licht_down>
			licht_up = combine((int)USART_receive()-48, (int) USART_receive()-48);;
 5ea:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5ee:	c8 2f       	mov	r28, r24
 5f0:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5f4:	2c 2f       	mov	r18, r28
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	20 53       	subi	r18, 0x30	; 48
 5fa:	31 09       	sbc	r19, r1
 5fc:	a9 01       	movw	r20, r18
 5fe:	44 0f       	add	r20, r20
 600:	55 1f       	adc	r21, r21
 602:	22 0f       	add	r18, r18
 604:	33 1f       	adc	r19, r19
 606:	22 0f       	add	r18, r18
 608:	33 1f       	adc	r19, r19
 60a:	22 0f       	add	r18, r18
 60c:	33 1f       	adc	r19, r19
 60e:	24 0f       	add	r18, r20
 610:	35 1f       	adc	r19, r21
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	c0 97       	sbiw	r24, 0x30	; 48
 616:	28 0f       	add	r18, r24
 618:	39 1f       	adc	r19, r25
 61a:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <licht_up+0x1>
 61e:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <licht_up>
			
			if (temp_up == 16){
 622:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <temp_up>
 626:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <temp_up+0x1>
 62a:	40 97       	sbiw	r24, 0x10	; 16
 62c:	09 f0       	breq	.+2      	; 0x630 <__vector_18+0x15c>
 62e:	fb c1       	rjmp	.+1014   	; 0xa26 <__stack+0x127>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 630:	2f ef       	ldi	r18, 0xFF	; 255
 632:	81 ee       	ldi	r24, 0xE1	; 225
 634:	94 e0       	ldi	r25, 0x04	; 4
 636:	21 50       	subi	r18, 0x01	; 1
 638:	80 40       	sbci	r24, 0x00	; 0
 63a:	90 40       	sbci	r25, 0x00	; 0
 63c:	e1 f7       	brne	.-8      	; 0x636 <__vector_18+0x162>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <__vector_18+0x16c>
 640:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 642:	29 9a       	sbi	0x05, 1	; 5
 644:	2f ef       	ldi	r18, 0xFF	; 255
 646:	81 ee       	ldi	r24, 0xE1	; 225
 648:	94 e0       	ldi	r25, 0x04	; 4
 64a:	21 50       	subi	r18, 0x01	; 1
 64c:	80 40       	sbci	r24, 0x00	; 0
 64e:	90 40       	sbci	r25, 0x00	; 0
 650:	e1 f7       	brne	.-8      	; 0x64a <__vector_18+0x176>
 652:	00 c0       	rjmp	.+0      	; 0x654 <__vector_18+0x180>
 654:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 656:	29 98       	cbi	0x05, 1	; 5
 658:	2f ef       	ldi	r18, 0xFF	; 255
 65a:	81 ee       	ldi	r24, 0xE1	; 225
 65c:	94 e0       	ldi	r25, 0x04	; 4
 65e:	21 50       	subi	r18, 0x01	; 1
 660:	80 40       	sbci	r24, 0x00	; 0
 662:	90 40       	sbci	r25, 0x00	; 0
 664:	e1 f7       	brne	.-8      	; 0x65e <__vector_18+0x18a>
 666:	00 c0       	rjmp	.+0      	; 0x668 <__vector_18+0x194>
 668:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 66a:	29 9a       	sbi	0x05, 1	; 5
 66c:	2f ef       	ldi	r18, 0xFF	; 255
 66e:	81 ee       	ldi	r24, 0xE1	; 225
 670:	94 e0       	ldi	r25, 0x04	; 4
 672:	21 50       	subi	r18, 0x01	; 1
 674:	80 40       	sbci	r24, 0x00	; 0
 676:	90 40       	sbci	r25, 0x00	; 0
 678:	e1 f7       	brne	.-8      	; 0x672 <__vector_18+0x19e>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <__vector_18+0x1a8>
 67c:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 67e:	29 98       	cbi	0x05, 1	; 5
 680:	2f ef       	ldi	r18, 0xFF	; 255
 682:	81 ee       	ldi	r24, 0xE1	; 225
 684:	94 e0       	ldi	r25, 0x04	; 4
 686:	21 50       	subi	r18, 0x01	; 1
 688:	80 40       	sbci	r24, 0x00	; 0
 68a:	90 40       	sbci	r25, 0x00	; 0
 68c:	e1 f7       	brne	.-8      	; 0x686 <__vector_18+0x1b2>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <__vector_18+0x1bc>
 690:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 692:	29 9a       	sbi	0x05, 1	; 5
 694:	2f ef       	ldi	r18, 0xFF	; 255
 696:	81 ee       	ldi	r24, 0xE1	; 225
 698:	94 e0       	ldi	r25, 0x04	; 4
 69a:	21 50       	subi	r18, 0x01	; 1
 69c:	80 40       	sbci	r24, 0x00	; 0
 69e:	90 40       	sbci	r25, 0x00	; 0
 6a0:	e1 f7       	brne	.-8      	; 0x69a <__vector_18+0x1c6>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <__vector_18+0x1d0>
 6a4:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 6a6:	29 98       	cbi	0x05, 1	; 5
 6a8:	2f ef       	ldi	r18, 0xFF	; 255
 6aa:	81 ee       	ldi	r24, 0xE1	; 225
 6ac:	94 e0       	ldi	r25, 0x04	; 4
 6ae:	21 50       	subi	r18, 0x01	; 1
 6b0:	80 40       	sbci	r24, 0x00	; 0
 6b2:	90 40       	sbci	r25, 0x00	; 0
 6b4:	e1 f7       	brne	.-8      	; 0x6ae <__vector_18+0x1da>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <__vector_18+0x1e4>
 6b8:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 6ba:	29 9a       	sbi	0x05, 1	; 5
 6bc:	2f ef       	ldi	r18, 0xFF	; 255
 6be:	81 ee       	ldi	r24, 0xE1	; 225
 6c0:	94 e0       	ldi	r25, 0x04	; 4
 6c2:	21 50       	subi	r18, 0x01	; 1
 6c4:	80 40       	sbci	r24, 0x00	; 0
 6c6:	90 40       	sbci	r25, 0x00	; 0
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <__vector_18+0x1ee>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <__vector_18+0x1f8>
 6cc:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 6ce:	29 98       	cbi	0x05, 1	; 5
 6d0:	2f ef       	ldi	r18, 0xFF	; 255
 6d2:	81 ee       	ldi	r24, 0xE1	; 225
 6d4:	94 e0       	ldi	r25, 0x04	; 4
 6d6:	21 50       	subi	r18, 0x01	; 1
 6d8:	80 40       	sbci	r24, 0x00	; 0
 6da:	90 40       	sbci	r25, 0x00	; 0
 6dc:	e1 f7       	brne	.-8      	; 0x6d6 <__vector_18+0x202>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <__vector_18+0x20c>
 6e0:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 6e2:	29 9a       	sbi	0x05, 1	; 5
 6e4:	2f ef       	ldi	r18, 0xFF	; 255
 6e6:	81 ee       	ldi	r24, 0xE1	; 225
 6e8:	94 e0       	ldi	r25, 0x04	; 4
 6ea:	21 50       	subi	r18, 0x01	; 1
 6ec:	80 40       	sbci	r24, 0x00	; 0
 6ee:	90 40       	sbci	r25, 0x00	; 0
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <__vector_18+0x216>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <__vector_18+0x220>
 6f4:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 6f6:	29 98       	cbi	0x05, 1	; 5
 6f8:	2f ef       	ldi	r18, 0xFF	; 255
 6fa:	81 ee       	ldi	r24, 0xE1	; 225
 6fc:	94 e0       	ldi	r25, 0x04	; 4
 6fe:	21 50       	subi	r18, 0x01	; 1
 700:	80 40       	sbci	r24, 0x00	; 0
 702:	90 40       	sbci	r25, 0x00	; 0
 704:	e1 f7       	brne	.-8      	; 0x6fe <__vector_18+0x22a>
 706:	00 c0       	rjmp	.+0      	; 0x708 <__vector_18+0x234>
 708:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 70a:	29 9a       	sbi	0x05, 1	; 5
 70c:	2f ef       	ldi	r18, 0xFF	; 255
 70e:	81 ee       	ldi	r24, 0xE1	; 225
 710:	94 e0       	ldi	r25, 0x04	; 4
 712:	21 50       	subi	r18, 0x01	; 1
 714:	80 40       	sbci	r24, 0x00	; 0
 716:	90 40       	sbci	r25, 0x00	; 0
 718:	e1 f7       	brne	.-8      	; 0x712 <__vector_18+0x23e>
 71a:	00 c0       	rjmp	.+0      	; 0x71c <__vector_18+0x248>
 71c:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 71e:	29 98       	cbi	0x05, 1	; 5
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	81 ee       	ldi	r24, 0xE1	; 225
 724:	94 e0       	ldi	r25, 0x04	; 4
 726:	21 50       	subi	r18, 0x01	; 1
 728:	80 40       	sbci	r24, 0x00	; 0
 72a:	90 40       	sbci	r25, 0x00	; 0
 72c:	e1 f7       	brne	.-8      	; 0x726 <__vector_18+0x252>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <__vector_18+0x25c>
 730:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 732:	29 9a       	sbi	0x05, 1	; 5
 734:	2f ef       	ldi	r18, 0xFF	; 255
 736:	81 ee       	ldi	r24, 0xE1	; 225
 738:	94 e0       	ldi	r25, 0x04	; 4
 73a:	21 50       	subi	r18, 0x01	; 1
 73c:	80 40       	sbci	r24, 0x00	; 0
 73e:	90 40       	sbci	r25, 0x00	; 0
 740:	e1 f7       	brne	.-8      	; 0x73a <__vector_18+0x266>
 742:	00 c0       	rjmp	.+0      	; 0x744 <__vector_18+0x270>
 744:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 746:	29 98       	cbi	0x05, 1	; 5
 748:	2f ef       	ldi	r18, 0xFF	; 255
 74a:	81 ee       	ldi	r24, 0xE1	; 225
 74c:	94 e0       	ldi	r25, 0x04	; 4
 74e:	21 50       	subi	r18, 0x01	; 1
 750:	80 40       	sbci	r24, 0x00	; 0
 752:	90 40       	sbci	r25, 0x00	; 0
 754:	e1 f7       	brne	.-8      	; 0x74e <__vector_18+0x27a>
 756:	00 c0       	rjmp	.+0      	; 0x758 <__vector_18+0x284>
 758:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 75a:	29 9a       	sbi	0x05, 1	; 5
 75c:	2f ef       	ldi	r18, 0xFF	; 255
 75e:	81 ee       	ldi	r24, 0xE1	; 225
 760:	94 e0       	ldi	r25, 0x04	; 4
 762:	21 50       	subi	r18, 0x01	; 1
 764:	80 40       	sbci	r24, 0x00	; 0
 766:	90 40       	sbci	r25, 0x00	; 0
 768:	e1 f7       	brne	.-8      	; 0x762 <__vector_18+0x28e>
 76a:	00 c0       	rjmp	.+0      	; 0x76c <__vector_18+0x298>
 76c:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 76e:	29 98       	cbi	0x05, 1	; 5
 770:	2f ef       	ldi	r18, 0xFF	; 255
 772:	81 ee       	ldi	r24, 0xE1	; 225
 774:	94 e0       	ldi	r25, 0x04	; 4
 776:	21 50       	subi	r18, 0x01	; 1
 778:	80 40       	sbci	r24, 0x00	; 0
 77a:	90 40       	sbci	r25, 0x00	; 0
 77c:	e1 f7       	brne	.-8      	; 0x776 <__vector_18+0x2a2>
 77e:	00 c0       	rjmp	.+0      	; 0x780 <__vector_18+0x2ac>
 780:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 782:	29 9a       	sbi	0x05, 1	; 5
 784:	2f ef       	ldi	r18, 0xFF	; 255
 786:	81 ee       	ldi	r24, 0xE1	; 225
 788:	94 e0       	ldi	r25, 0x04	; 4
 78a:	21 50       	subi	r18, 0x01	; 1
 78c:	80 40       	sbci	r24, 0x00	; 0
 78e:	90 40       	sbci	r25, 0x00	; 0
 790:	e1 f7       	brne	.-8      	; 0x78a <__vector_18+0x2b6>
 792:	00 c0       	rjmp	.+0      	; 0x794 <__vector_18+0x2c0>
 794:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 796:	29 98       	cbi	0x05, 1	; 5
 798:	2f ef       	ldi	r18, 0xFF	; 255
 79a:	81 ee       	ldi	r24, 0xE1	; 225
 79c:	94 e0       	ldi	r25, 0x04	; 4
 79e:	21 50       	subi	r18, 0x01	; 1
 7a0:	80 40       	sbci	r24, 0x00	; 0
 7a2:	90 40       	sbci	r25, 0x00	; 0
 7a4:	e1 f7       	brne	.-8      	; 0x79e <__vector_18+0x2ca>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <__vector_18+0x2d4>
 7a8:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 7aa:	29 9a       	sbi	0x05, 1	; 5
 7ac:	2f ef       	ldi	r18, 0xFF	; 255
 7ae:	81 ee       	ldi	r24, 0xE1	; 225
 7b0:	94 e0       	ldi	r25, 0x04	; 4
 7b2:	21 50       	subi	r18, 0x01	; 1
 7b4:	80 40       	sbci	r24, 0x00	; 0
 7b6:	90 40       	sbci	r25, 0x00	; 0
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <__vector_18+0x2de>
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <__vector_18+0x2e8>
 7bc:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 7be:	29 98       	cbi	0x05, 1	; 5
 7c0:	2f ef       	ldi	r18, 0xFF	; 255
 7c2:	81 ee       	ldi	r24, 0xE1	; 225
 7c4:	94 e0       	ldi	r25, 0x04	; 4
 7c6:	21 50       	subi	r18, 0x01	; 1
 7c8:	80 40       	sbci	r24, 0x00	; 0
 7ca:	90 40       	sbci	r25, 0x00	; 0
 7cc:	e1 f7       	brne	.-8      	; 0x7c6 <__vector_18+0x2f2>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <__vector_18+0x2fc>
 7d0:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 7d2:	29 9a       	sbi	0x05, 1	; 5
 7d4:	2f ef       	ldi	r18, 0xFF	; 255
 7d6:	81 ee       	ldi	r24, 0xE1	; 225
 7d8:	94 e0       	ldi	r25, 0x04	; 4
 7da:	21 50       	subi	r18, 0x01	; 1
 7dc:	80 40       	sbci	r24, 0x00	; 0
 7de:	90 40       	sbci	r25, 0x00	; 0
 7e0:	e1 f7       	brne	.-8      	; 0x7da <__vector_18+0x306>
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <__vector_18+0x310>
 7e4:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 7e6:	29 98       	cbi	0x05, 1	; 5
 7e8:	2f ef       	ldi	r18, 0xFF	; 255
 7ea:	81 ee       	ldi	r24, 0xE1	; 225
 7ec:	94 e0       	ldi	r25, 0x04	; 4
 7ee:	21 50       	subi	r18, 0x01	; 1
 7f0:	80 40       	sbci	r24, 0x00	; 0
 7f2:	90 40       	sbci	r25, 0x00	; 0
 7f4:	e1 f7       	brne	.-8      	; 0x7ee <__vector_18+0x31a>
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <__vector_18+0x324>
 7f8:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 7fa:	29 9a       	sbi	0x05, 1	; 5
 7fc:	2f ef       	ldi	r18, 0xFF	; 255
 7fe:	81 ee       	ldi	r24, 0xE1	; 225
 800:	94 e0       	ldi	r25, 0x04	; 4
 802:	21 50       	subi	r18, 0x01	; 1
 804:	80 40       	sbci	r24, 0x00	; 0
 806:	90 40       	sbci	r25, 0x00	; 0
 808:	e1 f7       	brne	.-8      	; 0x802 <__vector_18+0x32e>
 80a:	00 c0       	rjmp	.+0      	; 0x80c <__vector_18+0x338>
 80c:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 80e:	29 98       	cbi	0x05, 1	; 5
 810:	2f ef       	ldi	r18, 0xFF	; 255
 812:	81 ee       	ldi	r24, 0xE1	; 225
 814:	94 e0       	ldi	r25, 0x04	; 4
 816:	21 50       	subi	r18, 0x01	; 1
 818:	80 40       	sbci	r24, 0x00	; 0
 81a:	90 40       	sbci	r25, 0x00	; 0
 81c:	e1 f7       	brne	.-8      	; 0x816 <__vector_18+0x342>
 81e:	00 c0       	rjmp	.+0      	; 0x820 <__vector_18+0x34c>
 820:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 822:	29 9a       	sbi	0x05, 1	; 5
 824:	2f ef       	ldi	r18, 0xFF	; 255
 826:	81 ee       	ldi	r24, 0xE1	; 225
 828:	94 e0       	ldi	r25, 0x04	; 4
 82a:	21 50       	subi	r18, 0x01	; 1
 82c:	80 40       	sbci	r24, 0x00	; 0
 82e:	90 40       	sbci	r25, 0x00	; 0
 830:	e1 f7       	brne	.-8      	; 0x82a <__vector_18+0x356>
 832:	00 c0       	rjmp	.+0      	; 0x834 <__vector_18+0x360>
 834:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 836:	29 98       	cbi	0x05, 1	; 5
 838:	2f ef       	ldi	r18, 0xFF	; 255
 83a:	81 ee       	ldi	r24, 0xE1	; 225
 83c:	94 e0       	ldi	r25, 0x04	; 4
 83e:	21 50       	subi	r18, 0x01	; 1
 840:	80 40       	sbci	r24, 0x00	; 0
 842:	90 40       	sbci	r25, 0x00	; 0
 844:	e1 f7       	brne	.-8      	; 0x83e <__vector_18+0x36a>
 846:	00 c0       	rjmp	.+0      	; 0x848 <__vector_18+0x374>
 848:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 84a:	29 9a       	sbi	0x05, 1	; 5
 84c:	2f ef       	ldi	r18, 0xFF	; 255
 84e:	81 ee       	ldi	r24, 0xE1	; 225
 850:	94 e0       	ldi	r25, 0x04	; 4
 852:	21 50       	subi	r18, 0x01	; 1
 854:	80 40       	sbci	r24, 0x00	; 0
 856:	90 40       	sbci	r25, 0x00	; 0
 858:	e1 f7       	brne	.-8      	; 0x852 <__vector_18+0x37e>
 85a:	00 c0       	rjmp	.+0      	; 0x85c <__vector_18+0x388>
 85c:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 85e:	29 98       	cbi	0x05, 1	; 5
 860:	2f ef       	ldi	r18, 0xFF	; 255
 862:	81 ee       	ldi	r24, 0xE1	; 225
 864:	94 e0       	ldi	r25, 0x04	; 4
 866:	21 50       	subi	r18, 0x01	; 1
 868:	80 40       	sbci	r24, 0x00	; 0
 86a:	90 40       	sbci	r25, 0x00	; 0
 86c:	e1 f7       	brne	.-8      	; 0x866 <__vector_18+0x392>
 86e:	00 c0       	rjmp	.+0      	; 0x870 <__vector_18+0x39c>
 870:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 872:	29 9a       	sbi	0x05, 1	; 5
 874:	2f ef       	ldi	r18, 0xFF	; 255
 876:	81 ee       	ldi	r24, 0xE1	; 225
 878:	94 e0       	ldi	r25, 0x04	; 4
 87a:	21 50       	subi	r18, 0x01	; 1
 87c:	80 40       	sbci	r24, 0x00	; 0
 87e:	90 40       	sbci	r25, 0x00	; 0
 880:	e1 f7       	brne	.-8      	; 0x87a <__vector_18+0x3a6>
 882:	00 c0       	rjmp	.+0      	; 0x884 <__vector_18+0x3b0>
 884:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 886:	29 98       	cbi	0x05, 1	; 5
 888:	2f ef       	ldi	r18, 0xFF	; 255
 88a:	81 ee       	ldi	r24, 0xE1	; 225
 88c:	94 e0       	ldi	r25, 0x04	; 4
 88e:	21 50       	subi	r18, 0x01	; 1
 890:	80 40       	sbci	r24, 0x00	; 0
 892:	90 40       	sbci	r25, 0x00	; 0
 894:	e1 f7       	brne	.-8      	; 0x88e <__vector_18+0x3ba>
 896:	00 c0       	rjmp	.+0      	; 0x898 <__vector_18+0x3c4>
 898:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 89a:	29 9a       	sbi	0x05, 1	; 5
 89c:	2f ef       	ldi	r18, 0xFF	; 255
 89e:	81 ee       	ldi	r24, 0xE1	; 225
 8a0:	94 e0       	ldi	r25, 0x04	; 4
 8a2:	21 50       	subi	r18, 0x01	; 1
 8a4:	80 40       	sbci	r24, 0x00	; 0
 8a6:	90 40       	sbci	r25, 0x00	; 0
 8a8:	e1 f7       	brne	.-8      	; 0x8a2 <__vector_18+0x3ce>
 8aa:	00 c0       	rjmp	.+0      	; 0x8ac <__vector_18+0x3d8>
 8ac:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 8ae:	29 98       	cbi	0x05, 1	; 5
 8b0:	2f ef       	ldi	r18, 0xFF	; 255
 8b2:	81 ee       	ldi	r24, 0xE1	; 225
 8b4:	94 e0       	ldi	r25, 0x04	; 4
 8b6:	21 50       	subi	r18, 0x01	; 1
 8b8:	80 40       	sbci	r24, 0x00	; 0
 8ba:	90 40       	sbci	r25, 0x00	; 0
 8bc:	e1 f7       	brne	.-8      	; 0x8b6 <__vector_18+0x3e2>
 8be:	00 c0       	rjmp	.+0      	; 0x8c0 <__vector_18+0x3ec>
 8c0:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 8c2:	29 9a       	sbi	0x05, 1	; 5
 8c4:	2f ef       	ldi	r18, 0xFF	; 255
 8c6:	81 ee       	ldi	r24, 0xE1	; 225
 8c8:	94 e0       	ldi	r25, 0x04	; 4
 8ca:	21 50       	subi	r18, 0x01	; 1
 8cc:	80 40       	sbci	r24, 0x00	; 0
 8ce:	90 40       	sbci	r25, 0x00	; 0
 8d0:	e1 f7       	brne	.-8      	; 0x8ca <__vector_18+0x3f6>
 8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <__vector_18+0x400>
 8d4:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 8d6:	29 98       	cbi	0x05, 1	; 5
 8d8:	2f ef       	ldi	r18, 0xFF	; 255
 8da:	81 ee       	ldi	r24, 0xE1	; 225
 8dc:	94 e0       	ldi	r25, 0x04	; 4
 8de:	21 50       	subi	r18, 0x01	; 1
 8e0:	80 40       	sbci	r24, 0x00	; 0
 8e2:	90 40       	sbci	r25, 0x00	; 0
 8e4:	e1 f7       	brne	.-8      	; 0x8de <__vector_18+0x40a>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <__vector_18+0x414>
 8e8:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 8ea:	29 9a       	sbi	0x05, 1	; 5
 8ec:	2f ef       	ldi	r18, 0xFF	; 255
 8ee:	81 ee       	ldi	r24, 0xE1	; 225
 8f0:	94 e0       	ldi	r25, 0x04	; 4
 8f2:	21 50       	subi	r18, 0x01	; 1
 8f4:	80 40       	sbci	r24, 0x00	; 0
 8f6:	90 40       	sbci	r25, 0x00	; 0
 8f8:	e1 f7       	brne	.-8      	; 0x8f2 <__vector_18+0x41e>
 8fa:	00 c0       	rjmp	.+0      	; 0x8fc <__vector_18+0x428>
 8fc:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 8fe:	29 98       	cbi	0x05, 1	; 5
 900:	2f ef       	ldi	r18, 0xFF	; 255
 902:	81 ee       	ldi	r24, 0xE1	; 225
 904:	94 e0       	ldi	r25, 0x04	; 4
 906:	21 50       	subi	r18, 0x01	; 1
 908:	80 40       	sbci	r24, 0x00	; 0
 90a:	90 40       	sbci	r25, 0x00	; 0
 90c:	e1 f7       	brne	.-8      	; 0x906 <__stack+0x7>
 90e:	00 c0       	rjmp	.+0      	; 0x910 <__stack+0x11>
 910:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 912:	29 9a       	sbi	0x05, 1	; 5
 914:	2f ef       	ldi	r18, 0xFF	; 255
 916:	81 ee       	ldi	r24, 0xE1	; 225
 918:	94 e0       	ldi	r25, 0x04	; 4
 91a:	21 50       	subi	r18, 0x01	; 1
 91c:	80 40       	sbci	r24, 0x00	; 0
 91e:	90 40       	sbci	r25, 0x00	; 0
 920:	e1 f7       	brne	.-8      	; 0x91a <__stack+0x1b>
 922:	00 c0       	rjmp	.+0      	; 0x924 <__stack+0x25>
 924:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 926:	29 98       	cbi	0x05, 1	; 5
 928:	2f ef       	ldi	r18, 0xFF	; 255
 92a:	81 ee       	ldi	r24, 0xE1	; 225
 92c:	94 e0       	ldi	r25, 0x04	; 4
 92e:	21 50       	subi	r18, 0x01	; 1
 930:	80 40       	sbci	r24, 0x00	; 0
 932:	90 40       	sbci	r25, 0x00	; 0
 934:	e1 f7       	brne	.-8      	; 0x92e <__stack+0x2f>
 936:	00 c0       	rjmp	.+0      	; 0x938 <__stack+0x39>
 938:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 93a:	29 9a       	sbi	0x05, 1	; 5
 93c:	2f ef       	ldi	r18, 0xFF	; 255
 93e:	81 ee       	ldi	r24, 0xE1	; 225
 940:	94 e0       	ldi	r25, 0x04	; 4
 942:	21 50       	subi	r18, 0x01	; 1
 944:	80 40       	sbci	r24, 0x00	; 0
 946:	90 40       	sbci	r25, 0x00	; 0
 948:	e1 f7       	brne	.-8      	; 0x942 <__stack+0x43>
 94a:	00 c0       	rjmp	.+0      	; 0x94c <__stack+0x4d>
 94c:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 94e:	29 98       	cbi	0x05, 1	; 5
 950:	2f ef       	ldi	r18, 0xFF	; 255
 952:	81 ee       	ldi	r24, 0xE1	; 225
 954:	94 e0       	ldi	r25, 0x04	; 4
 956:	21 50       	subi	r18, 0x01	; 1
 958:	80 40       	sbci	r24, 0x00	; 0
 95a:	90 40       	sbci	r25, 0x00	; 0
 95c:	e1 f7       	brne	.-8      	; 0x956 <__stack+0x57>
 95e:	00 c0       	rjmp	.+0      	; 0x960 <__stack+0x61>
 960:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 962:	29 9a       	sbi	0x05, 1	; 5
 964:	2f ef       	ldi	r18, 0xFF	; 255
 966:	81 ee       	ldi	r24, 0xE1	; 225
 968:	94 e0       	ldi	r25, 0x04	; 4
 96a:	21 50       	subi	r18, 0x01	; 1
 96c:	80 40       	sbci	r24, 0x00	; 0
 96e:	90 40       	sbci	r25, 0x00	; 0
 970:	e1 f7       	brne	.-8      	; 0x96a <__stack+0x6b>
 972:	00 c0       	rjmp	.+0      	; 0x974 <__stack+0x75>
 974:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 976:	29 98       	cbi	0x05, 1	; 5
 978:	2f ef       	ldi	r18, 0xFF	; 255
 97a:	81 ee       	ldi	r24, 0xE1	; 225
 97c:	94 e0       	ldi	r25, 0x04	; 4
 97e:	21 50       	subi	r18, 0x01	; 1
 980:	80 40       	sbci	r24, 0x00	; 0
 982:	90 40       	sbci	r25, 0x00	; 0
 984:	e1 f7       	brne	.-8      	; 0x97e <__stack+0x7f>
 986:	00 c0       	rjmp	.+0      	; 0x988 <__stack+0x89>
 988:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 98a:	29 9a       	sbi	0x05, 1	; 5
 98c:	2f ef       	ldi	r18, 0xFF	; 255
 98e:	81 ee       	ldi	r24, 0xE1	; 225
 990:	94 e0       	ldi	r25, 0x04	; 4
 992:	21 50       	subi	r18, 0x01	; 1
 994:	80 40       	sbci	r24, 0x00	; 0
 996:	90 40       	sbci	r25, 0x00	; 0
 998:	e1 f7       	brne	.-8      	; 0x992 <__stack+0x93>
 99a:	00 c0       	rjmp	.+0      	; 0x99c <__stack+0x9d>
 99c:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 99e:	29 98       	cbi	0x05, 1	; 5
 9a0:	2f ef       	ldi	r18, 0xFF	; 255
 9a2:	81 ee       	ldi	r24, 0xE1	; 225
 9a4:	94 e0       	ldi	r25, 0x04	; 4
 9a6:	21 50       	subi	r18, 0x01	; 1
 9a8:	80 40       	sbci	r24, 0x00	; 0
 9aa:	90 40       	sbci	r25, 0x00	; 0
 9ac:	e1 f7       	brne	.-8      	; 0x9a6 <__stack+0xa7>
 9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <__stack+0xb1>
 9b0:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 9b2:	29 9a       	sbi	0x05, 1	; 5
 9b4:	2f ef       	ldi	r18, 0xFF	; 255
 9b6:	81 ee       	ldi	r24, 0xE1	; 225
 9b8:	94 e0       	ldi	r25, 0x04	; 4
 9ba:	21 50       	subi	r18, 0x01	; 1
 9bc:	80 40       	sbci	r24, 0x00	; 0
 9be:	90 40       	sbci	r25, 0x00	; 0
 9c0:	e1 f7       	brne	.-8      	; 0x9ba <__stack+0xbb>
 9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <__stack+0xc5>
 9c4:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 9c6:	29 98       	cbi	0x05, 1	; 5
 9c8:	2f ef       	ldi	r18, 0xFF	; 255
 9ca:	81 ee       	ldi	r24, 0xE1	; 225
 9cc:	94 e0       	ldi	r25, 0x04	; 4
 9ce:	21 50       	subi	r18, 0x01	; 1
 9d0:	80 40       	sbci	r24, 0x00	; 0
 9d2:	90 40       	sbci	r25, 0x00	; 0
 9d4:	e1 f7       	brne	.-8      	; 0x9ce <__stack+0xcf>
 9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <__stack+0xd9>
 9d8:	00 00       	nop
				_delay_ms(100);
				PORTB |= (1 << PB1); // geel lampje aan
 9da:	29 9a       	sbi	0x05, 1	; 5
 9dc:	2f ef       	ldi	r18, 0xFF	; 255
 9de:	81 ee       	ldi	r24, 0xE1	; 225
 9e0:	94 e0       	ldi	r25, 0x04	; 4
 9e2:	21 50       	subi	r18, 0x01	; 1
 9e4:	80 40       	sbci	r24, 0x00	; 0
 9e6:	90 40       	sbci	r25, 0x00	; 0
 9e8:	e1 f7       	brne	.-8      	; 0x9e2 <__stack+0xe3>
 9ea:	00 c0       	rjmp	.+0      	; 0x9ec <__stack+0xed>
 9ec:	00 00       	nop
				_delay_ms(100);
				PORTB &= ~(1 << PB1); // geel lampje uit
 9ee:	29 98       	cbi	0x05, 1	; 5
 9f0:	1a c0       	rjmp	.+52     	; 0xa26 <__stack+0x127>
			}
			return;
			
		// 7 = uit-/oprol afstand
		case '7':
			manual = 1;
 9f2:	81 e0       	ldi	r24, 0x01	; 1
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 9fa:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			int uitoprol = USART_receive();
 9fe:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 a02:	90 e0       	ldi	r25, 0x00	; 0
			afstand_up = uitoprol;
 a04:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <afstand_up+0x1>
 a08:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <afstand_up>
			afstand_down = uitoprol;
 a0c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a10:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			goDown();
 a14:	0e 94 06 02 	call	0x40c	; 0x40c <goDown>
			return;
 a18:	06 c0       	rjmp	.+12     	; 0xa26 <__stack+0x127>
			
		// 8 = set manual
		case '8':
			manual = 1;
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 a22:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			return;
			
		default:
			return;
	}
 a26:	ff 91       	pop	r31
 a28:	ef 91       	pop	r30
 a2a:	cf 91       	pop	r28
 a2c:	bf 91       	pop	r27
 a2e:	af 91       	pop	r26
 a30:	9f 91       	pop	r25
 a32:	8f 91       	pop	r24
 a34:	7f 91       	pop	r23
 a36:	6f 91       	pop	r22
 a38:	5f 91       	pop	r21
 a3a:	4f 91       	pop	r20
 a3c:	3f 91       	pop	r19
 a3e:	2f 91       	pop	r18
 a40:	0f 90       	pop	r0
 a42:	0f be       	out	0x3f, r0	; 63
 a44:	0f 90       	pop	r0
 a46:	1f 90       	pop	r1
 a48:	18 95       	reti

00000a4a <init_connectie>:
void init_scheduler();
void init_lampjes();

void init_connectie(){
	// disable U2X mode
	UCSR0A = 0;
 a4a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// Set frame format: 8data, 2stop bit 
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 a4e:	8e e0       	ldi	r24, 0x0E	; 14
 a50:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 a54:	08 95       	ret

00000a56 <init_USART>:
}

void init_USART(){
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 a56:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 a5a:	87 e6       	ldi	r24, 0x67	; 103
 a5c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 a60:	e1 ec       	ldi	r30, 0xC1	; 193
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	88 e1       	ldi	r24, 0x18	; 24
 a66:	80 83       	st	Z, r24
	
	UCSR0C = (3<<UCSZ00);
 a68:	86 e0       	ldi	r24, 0x06	; 6
 a6a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	UCSR0B |= (1 << RXCIE0 ); // Enable the USART Recieve Complete interrupt ( USART_RXC )
 a6e:	80 81       	ld	r24, Z
 a70:	80 68       	ori	r24, 0x80	; 128
 a72:	80 83       	st	Z, r24
	sei (); // Enable the Global Interrupt Enable flag so that interrupts can be processed
 a74:	78 94       	sei
 a76:	08 95       	ret

00000a78 <init_scheduler>:
}

void init_scheduler()
{
	SCH_Init_T1();
 a78:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	//SCH_Add_Task(check_input,0,1); // kan weg straks, interrupt neemt deze op zich
	SCH_Add_Task(temperatuur,1,100);
 a7c:	44 e6       	ldi	r20, 0x64	; 100
 a7e:	50 e0       	ldi	r21, 0x00	; 0
 a80:	61 e0       	ldi	r22, 0x01	; 1
 a82:	70 e0       	ldi	r23, 0x00	; 0
 a84:	80 e4       	ldi	r24, 0x40	; 64
 a86:	91 e0       	ldi	r25, 0x01	; 1
 a88:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(ldr,2,100);
 a8c:	44 e6       	ldi	r20, 0x64	; 100
 a8e:	50 e0       	ldi	r21, 0x00	; 0
 a90:	62 e0       	ldi	r22, 0x02	; 2
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	8a e7       	ldi	r24, 0x7A	; 122
 a96:	91 e0       	ldi	r25, 0x01	; 1
 a98:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(afstand,3,100);
 a9c:	44 e6       	ldi	r20, 0x64	; 100
 a9e:	50 e0       	ldi	r21, 0x00	; 0
 aa0:	63 e0       	ldi	r22, 0x03	; 3
 aa2:	70 e0       	ldi	r23, 0x00	; 0
 aa4:	8e ea       	ldi	r24, 0xAE	; 174
 aa6:	91 e0       	ldi	r25, 0x01	; 1
 aa8:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	//SCH_Add_Task(upDown,4,10);
	SCH_Add_Task(newRegel,6,100);
 aac:	44 e6       	ldi	r20, 0x64	; 100
 aae:	50 e0       	ldi	r21, 0x00	; 0
 ab0:	66 e0       	ldi	r22, 0x06	; 6
 ab2:	70 e0       	ldi	r23, 0x00	; 0
 ab4:	83 e6       	ldi	r24, 0x63	; 99
 ab6:	92 e0       	ldi	r25, 0x02	; 2
 ab8:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Start();
 abc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 ac0:	08 95       	ret

00000ac2 <init_adc>:
}

void init_adc(){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
 ac2:	ea e7       	ldi	r30, 0x7A	; 122
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	80 81       	ld	r24, Z
 ac8:	87 60       	ori	r24, 0x07	; 7
 aca:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
 acc:	ac e7       	ldi	r26, 0x7C	; 124
 ace:	b0 e0       	ldi	r27, 0x00	; 0
 ad0:	8c 91       	ld	r24, X
 ad2:	80 64       	ori	r24, 0x40	; 64
 ad4:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
 ad6:	80 81       	ld	r24, Z
 ad8:	80 68       	ori	r24, 0x80	; 128
 ada:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 adc:	80 81       	ld	r24, Z
 ade:	80 64       	ori	r24, 0x40	; 64
 ae0:	80 83       	st	Z, r24
 ae2:	08 95       	ret

00000ae4 <init_dist>:
}

void init_dist(){
	DDRD |= _BV(PD3); // Pin 3 Trigger Output
 ae4:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~_BV(PD2); // Pin 2 Echo Input
 ae6:	52 98       	cbi	0x0a, 2	; 10
 ae8:	08 95       	ret

00000aea <init_lampjes>:
}

void init_lampjes(){
	DDRB |= _BV(PB0);	// pin0 B = output
 aea:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1);	// pin1 B = output
 aec:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(PB2);	// pin2 B = output
 aee:	22 9a       	sbi	0x04, 2	; 4
	
	PORTB = 0; // lampjes uitzetten
 af0:	15 b8       	out	0x05, r1	; 5
 af2:	08 95       	ret

00000af4 <setup>:
		SCH_Dispatch_Tasks();
	}
}

void setup(){
	init_connectie();
 af4:	0e 94 25 05 	call	0xa4a	; 0xa4a <init_connectie>
	init_adc();			// Setup the ADC
 af8:	0e 94 61 05 	call	0xac2	; 0xac2 <init_adc>
	init_USART();			// Setup the USART
 afc:	0e 94 2b 05 	call	0xa56	; 0xa56 <init_USART>
	init_dist();
 b00:	0e 94 72 05 	call	0xae4	; 0xae4 <init_dist>
	init_scheduler();
 b04:	0e 94 3c 05 	call	0xa78	; 0xa78 <init_scheduler>
	init_lampjes();
 b08:	0e 94 75 05 	call	0xaea	; 0xaea <init_lampjes>
 b0c:	08 95       	ret

00000b0e <main>:

int main(void);
void setup();

int main(void){
	setup();
 b0e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <setup>
	while(1) {
		SCH_Dispatch_Tasks();
 b12:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 b16:	fd cf       	rjmp	.-6      	; 0xb12 <main+0x4>

00000b18 <__subsf3>:
 b18:	50 58       	subi	r21, 0x80	; 128

00000b1a <__addsf3>:
 b1a:	bb 27       	eor	r27, r27
 b1c:	aa 27       	eor	r26, r26
 b1e:	0e 94 a4 05 	call	0xb48	; 0xb48 <__addsf3x>
 b22:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__fp_round>
 b26:	0e 94 75 06 	call	0xcea	; 0xcea <__fp_pscA>
 b2a:	38 f0       	brcs	.+14     	; 0xb3a <__addsf3+0x20>
 b2c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_pscB>
 b30:	20 f0       	brcs	.+8      	; 0xb3a <__addsf3+0x20>
 b32:	39 f4       	brne	.+14     	; 0xb42 <__addsf3+0x28>
 b34:	9f 3f       	cpi	r25, 0xFF	; 255
 b36:	19 f4       	brne	.+6      	; 0xb3e <__addsf3+0x24>
 b38:	26 f4       	brtc	.+8      	; 0xb42 <__addsf3+0x28>
 b3a:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__fp_nan>
 b3e:	0e f4       	brtc	.+2      	; 0xb42 <__addsf3+0x28>
 b40:	e0 95       	com	r30
 b42:	e7 fb       	bst	r30, 7
 b44:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_inf>

00000b48 <__addsf3x>:
 b48:	e9 2f       	mov	r30, r25
 b4a:	0e 94 94 06 	call	0xd28	; 0xd28 <__fp_split3>
 b4e:	58 f3       	brcs	.-42     	; 0xb26 <__addsf3+0xc>
 b50:	ba 17       	cp	r27, r26
 b52:	62 07       	cpc	r22, r18
 b54:	73 07       	cpc	r23, r19
 b56:	84 07       	cpc	r24, r20
 b58:	95 07       	cpc	r25, r21
 b5a:	20 f0       	brcs	.+8      	; 0xb64 <__addsf3x+0x1c>
 b5c:	79 f4       	brne	.+30     	; 0xb7c <__addsf3x+0x34>
 b5e:	a6 f5       	brtc	.+104    	; 0xbc8 <__addsf3x+0x80>
 b60:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_zero>
 b64:	0e f4       	brtc	.+2      	; 0xb68 <__addsf3x+0x20>
 b66:	e0 95       	com	r30
 b68:	0b 2e       	mov	r0, r27
 b6a:	ba 2f       	mov	r27, r26
 b6c:	a0 2d       	mov	r26, r0
 b6e:	0b 01       	movw	r0, r22
 b70:	b9 01       	movw	r22, r18
 b72:	90 01       	movw	r18, r0
 b74:	0c 01       	movw	r0, r24
 b76:	ca 01       	movw	r24, r20
 b78:	a0 01       	movw	r20, r0
 b7a:	11 24       	eor	r1, r1
 b7c:	ff 27       	eor	r31, r31
 b7e:	59 1b       	sub	r21, r25
 b80:	99 f0       	breq	.+38     	; 0xba8 <__addsf3x+0x60>
 b82:	59 3f       	cpi	r21, 0xF9	; 249
 b84:	50 f4       	brcc	.+20     	; 0xb9a <__addsf3x+0x52>
 b86:	50 3e       	cpi	r21, 0xE0	; 224
 b88:	68 f1       	brcs	.+90     	; 0xbe4 <__addsf3x+0x9c>
 b8a:	1a 16       	cp	r1, r26
 b8c:	f0 40       	sbci	r31, 0x00	; 0
 b8e:	a2 2f       	mov	r26, r18
 b90:	23 2f       	mov	r18, r19
 b92:	34 2f       	mov	r19, r20
 b94:	44 27       	eor	r20, r20
 b96:	58 5f       	subi	r21, 0xF8	; 248
 b98:	f3 cf       	rjmp	.-26     	; 0xb80 <__addsf3x+0x38>
 b9a:	46 95       	lsr	r20
 b9c:	37 95       	ror	r19
 b9e:	27 95       	ror	r18
 ba0:	a7 95       	ror	r26
 ba2:	f0 40       	sbci	r31, 0x00	; 0
 ba4:	53 95       	inc	r21
 ba6:	c9 f7       	brne	.-14     	; 0xb9a <__addsf3x+0x52>
 ba8:	7e f4       	brtc	.+30     	; 0xbc8 <__addsf3x+0x80>
 baa:	1f 16       	cp	r1, r31
 bac:	ba 0b       	sbc	r27, r26
 bae:	62 0b       	sbc	r22, r18
 bb0:	73 0b       	sbc	r23, r19
 bb2:	84 0b       	sbc	r24, r20
 bb4:	ba f0       	brmi	.+46     	; 0xbe4 <__addsf3x+0x9c>
 bb6:	91 50       	subi	r25, 0x01	; 1
 bb8:	a1 f0       	breq	.+40     	; 0xbe2 <__addsf3x+0x9a>
 bba:	ff 0f       	add	r31, r31
 bbc:	bb 1f       	adc	r27, r27
 bbe:	66 1f       	adc	r22, r22
 bc0:	77 1f       	adc	r23, r23
 bc2:	88 1f       	adc	r24, r24
 bc4:	c2 f7       	brpl	.-16     	; 0xbb6 <__addsf3x+0x6e>
 bc6:	0e c0       	rjmp	.+28     	; 0xbe4 <__addsf3x+0x9c>
 bc8:	ba 0f       	add	r27, r26
 bca:	62 1f       	adc	r22, r18
 bcc:	73 1f       	adc	r23, r19
 bce:	84 1f       	adc	r24, r20
 bd0:	48 f4       	brcc	.+18     	; 0xbe4 <__addsf3x+0x9c>
 bd2:	87 95       	ror	r24
 bd4:	77 95       	ror	r23
 bd6:	67 95       	ror	r22
 bd8:	b7 95       	ror	r27
 bda:	f7 95       	ror	r31
 bdc:	9e 3f       	cpi	r25, 0xFE	; 254
 bde:	08 f0       	brcs	.+2      	; 0xbe2 <__addsf3x+0x9a>
 be0:	b0 cf       	rjmp	.-160    	; 0xb42 <__addsf3+0x28>
 be2:	93 95       	inc	r25
 be4:	88 0f       	add	r24, r24
 be6:	08 f0       	brcs	.+2      	; 0xbea <__addsf3x+0xa2>
 be8:	99 27       	eor	r25, r25
 bea:	ee 0f       	add	r30, r30
 bec:	97 95       	ror	r25
 bee:	87 95       	ror	r24
 bf0:	08 95       	ret

00000bf2 <__fixsfsi>:
 bf2:	0e 94 00 06 	call	0xc00	; 0xc00 <__fixunssfsi>
 bf6:	68 94       	set
 bf8:	b1 11       	cpse	r27, r1
 bfa:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_szero>
 bfe:	08 95       	ret

00000c00 <__fixunssfsi>:
 c00:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_splitA>
 c04:	88 f0       	brcs	.+34     	; 0xc28 <__fixunssfsi+0x28>
 c06:	9f 57       	subi	r25, 0x7F	; 127
 c08:	98 f0       	brcs	.+38     	; 0xc30 <__fixunssfsi+0x30>
 c0a:	b9 2f       	mov	r27, r25
 c0c:	99 27       	eor	r25, r25
 c0e:	b7 51       	subi	r27, 0x17	; 23
 c10:	b0 f0       	brcs	.+44     	; 0xc3e <__fixunssfsi+0x3e>
 c12:	e1 f0       	breq	.+56     	; 0xc4c <__fixunssfsi+0x4c>
 c14:	66 0f       	add	r22, r22
 c16:	77 1f       	adc	r23, r23
 c18:	88 1f       	adc	r24, r24
 c1a:	99 1f       	adc	r25, r25
 c1c:	1a f0       	brmi	.+6      	; 0xc24 <__fixunssfsi+0x24>
 c1e:	ba 95       	dec	r27
 c20:	c9 f7       	brne	.-14     	; 0xc14 <__fixunssfsi+0x14>
 c22:	14 c0       	rjmp	.+40     	; 0xc4c <__fixunssfsi+0x4c>
 c24:	b1 30       	cpi	r27, 0x01	; 1
 c26:	91 f0       	breq	.+36     	; 0xc4c <__fixunssfsi+0x4c>
 c28:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_zero>
 c2c:	b1 e0       	ldi	r27, 0x01	; 1
 c2e:	08 95       	ret
 c30:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_zero>
 c34:	67 2f       	mov	r22, r23
 c36:	78 2f       	mov	r23, r24
 c38:	88 27       	eor	r24, r24
 c3a:	b8 5f       	subi	r27, 0xF8	; 248
 c3c:	39 f0       	breq	.+14     	; 0xc4c <__fixunssfsi+0x4c>
 c3e:	b9 3f       	cpi	r27, 0xF9	; 249
 c40:	cc f3       	brlt	.-14     	; 0xc34 <__fixunssfsi+0x34>
 c42:	86 95       	lsr	r24
 c44:	77 95       	ror	r23
 c46:	67 95       	ror	r22
 c48:	b3 95       	inc	r27
 c4a:	d9 f7       	brne	.-10     	; 0xc42 <__fixunssfsi+0x42>
 c4c:	3e f4       	brtc	.+14     	; 0xc5c <__fixunssfsi+0x5c>
 c4e:	90 95       	com	r25
 c50:	80 95       	com	r24
 c52:	70 95       	com	r23
 c54:	61 95       	neg	r22
 c56:	7f 4f       	sbci	r23, 0xFF	; 255
 c58:	8f 4f       	sbci	r24, 0xFF	; 255
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	08 95       	ret

00000c5e <__floatunsisf>:
 c5e:	e8 94       	clt
 c60:	09 c0       	rjmp	.+18     	; 0xc74 <__floatsisf+0x12>

00000c62 <__floatsisf>:
 c62:	97 fb       	bst	r25, 7
 c64:	3e f4       	brtc	.+14     	; 0xc74 <__floatsisf+0x12>
 c66:	90 95       	com	r25
 c68:	80 95       	com	r24
 c6a:	70 95       	com	r23
 c6c:	61 95       	neg	r22
 c6e:	7f 4f       	sbci	r23, 0xFF	; 255
 c70:	8f 4f       	sbci	r24, 0xFF	; 255
 c72:	9f 4f       	sbci	r25, 0xFF	; 255
 c74:	99 23       	and	r25, r25
 c76:	a9 f0       	breq	.+42     	; 0xca2 <__floatsisf+0x40>
 c78:	f9 2f       	mov	r31, r25
 c7a:	96 e9       	ldi	r25, 0x96	; 150
 c7c:	bb 27       	eor	r27, r27
 c7e:	93 95       	inc	r25
 c80:	f6 95       	lsr	r31
 c82:	87 95       	ror	r24
 c84:	77 95       	ror	r23
 c86:	67 95       	ror	r22
 c88:	b7 95       	ror	r27
 c8a:	f1 11       	cpse	r31, r1
 c8c:	f8 cf       	rjmp	.-16     	; 0xc7e <__floatsisf+0x1c>
 c8e:	fa f4       	brpl	.+62     	; 0xcce <__floatsisf+0x6c>
 c90:	bb 0f       	add	r27, r27
 c92:	11 f4       	brne	.+4      	; 0xc98 <__floatsisf+0x36>
 c94:	60 ff       	sbrs	r22, 0
 c96:	1b c0       	rjmp	.+54     	; 0xcce <__floatsisf+0x6c>
 c98:	6f 5f       	subi	r22, 0xFF	; 255
 c9a:	7f 4f       	sbci	r23, 0xFF	; 255
 c9c:	8f 4f       	sbci	r24, 0xFF	; 255
 c9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ca0:	16 c0       	rjmp	.+44     	; 0xcce <__floatsisf+0x6c>
 ca2:	88 23       	and	r24, r24
 ca4:	11 f0       	breq	.+4      	; 0xcaa <__floatsisf+0x48>
 ca6:	96 e9       	ldi	r25, 0x96	; 150
 ca8:	11 c0       	rjmp	.+34     	; 0xccc <__floatsisf+0x6a>
 caa:	77 23       	and	r23, r23
 cac:	21 f0       	breq	.+8      	; 0xcb6 <__floatsisf+0x54>
 cae:	9e e8       	ldi	r25, 0x8E	; 142
 cb0:	87 2f       	mov	r24, r23
 cb2:	76 2f       	mov	r23, r22
 cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__floatsisf+0x5e>
 cb6:	66 23       	and	r22, r22
 cb8:	71 f0       	breq	.+28     	; 0xcd6 <__floatsisf+0x74>
 cba:	96 e8       	ldi	r25, 0x86	; 134
 cbc:	86 2f       	mov	r24, r22
 cbe:	70 e0       	ldi	r23, 0x00	; 0
 cc0:	60 e0       	ldi	r22, 0x00	; 0
 cc2:	2a f0       	brmi	.+10     	; 0xcce <__floatsisf+0x6c>
 cc4:	9a 95       	dec	r25
 cc6:	66 0f       	add	r22, r22
 cc8:	77 1f       	adc	r23, r23
 cca:	88 1f       	adc	r24, r24
 ccc:	da f7       	brpl	.-10     	; 0xcc4 <__floatsisf+0x62>
 cce:	88 0f       	add	r24, r24
 cd0:	96 95       	lsr	r25
 cd2:	87 95       	ror	r24
 cd4:	97 f9       	bld	r25, 7
 cd6:	08 95       	ret

00000cd8 <__fp_inf>:
 cd8:	97 f9       	bld	r25, 7
 cda:	9f 67       	ori	r25, 0x7F	; 127
 cdc:	80 e8       	ldi	r24, 0x80	; 128
 cde:	70 e0       	ldi	r23, 0x00	; 0
 ce0:	60 e0       	ldi	r22, 0x00	; 0
 ce2:	08 95       	ret

00000ce4 <__fp_nan>:
 ce4:	9f ef       	ldi	r25, 0xFF	; 255
 ce6:	80 ec       	ldi	r24, 0xC0	; 192
 ce8:	08 95       	ret

00000cea <__fp_pscA>:
 cea:	00 24       	eor	r0, r0
 cec:	0a 94       	dec	r0
 cee:	16 16       	cp	r1, r22
 cf0:	17 06       	cpc	r1, r23
 cf2:	18 06       	cpc	r1, r24
 cf4:	09 06       	cpc	r0, r25
 cf6:	08 95       	ret

00000cf8 <__fp_pscB>:
 cf8:	00 24       	eor	r0, r0
 cfa:	0a 94       	dec	r0
 cfc:	12 16       	cp	r1, r18
 cfe:	13 06       	cpc	r1, r19
 d00:	14 06       	cpc	r1, r20
 d02:	05 06       	cpc	r0, r21
 d04:	08 95       	ret

00000d06 <__fp_round>:
 d06:	09 2e       	mov	r0, r25
 d08:	03 94       	inc	r0
 d0a:	00 0c       	add	r0, r0
 d0c:	11 f4       	brne	.+4      	; 0xd12 <__fp_round+0xc>
 d0e:	88 23       	and	r24, r24
 d10:	52 f0       	brmi	.+20     	; 0xd26 <__fp_round+0x20>
 d12:	bb 0f       	add	r27, r27
 d14:	40 f4       	brcc	.+16     	; 0xd26 <__fp_round+0x20>
 d16:	bf 2b       	or	r27, r31
 d18:	11 f4       	brne	.+4      	; 0xd1e <__fp_round+0x18>
 d1a:	60 ff       	sbrs	r22, 0
 d1c:	04 c0       	rjmp	.+8      	; 0xd26 <__fp_round+0x20>
 d1e:	6f 5f       	subi	r22, 0xFF	; 255
 d20:	7f 4f       	sbci	r23, 0xFF	; 255
 d22:	8f 4f       	sbci	r24, 0xFF	; 255
 d24:	9f 4f       	sbci	r25, 0xFF	; 255
 d26:	08 95       	ret

00000d28 <__fp_split3>:
 d28:	57 fd       	sbrc	r21, 7
 d2a:	90 58       	subi	r25, 0x80	; 128
 d2c:	44 0f       	add	r20, r20
 d2e:	55 1f       	adc	r21, r21
 d30:	59 f0       	breq	.+22     	; 0xd48 <__fp_splitA+0x10>
 d32:	5f 3f       	cpi	r21, 0xFF	; 255
 d34:	71 f0       	breq	.+28     	; 0xd52 <__fp_splitA+0x1a>
 d36:	47 95       	ror	r20

00000d38 <__fp_splitA>:
 d38:	88 0f       	add	r24, r24
 d3a:	97 fb       	bst	r25, 7
 d3c:	99 1f       	adc	r25, r25
 d3e:	61 f0       	breq	.+24     	; 0xd58 <__fp_splitA+0x20>
 d40:	9f 3f       	cpi	r25, 0xFF	; 255
 d42:	79 f0       	breq	.+30     	; 0xd62 <__fp_splitA+0x2a>
 d44:	87 95       	ror	r24
 d46:	08 95       	ret
 d48:	12 16       	cp	r1, r18
 d4a:	13 06       	cpc	r1, r19
 d4c:	14 06       	cpc	r1, r20
 d4e:	55 1f       	adc	r21, r21
 d50:	f2 cf       	rjmp	.-28     	; 0xd36 <__fp_split3+0xe>
 d52:	46 95       	lsr	r20
 d54:	f1 df       	rcall	.-30     	; 0xd38 <__fp_splitA>
 d56:	08 c0       	rjmp	.+16     	; 0xd68 <__fp_splitA+0x30>
 d58:	16 16       	cp	r1, r22
 d5a:	17 06       	cpc	r1, r23
 d5c:	18 06       	cpc	r1, r24
 d5e:	99 1f       	adc	r25, r25
 d60:	f1 cf       	rjmp	.-30     	; 0xd44 <__fp_splitA+0xc>
 d62:	86 95       	lsr	r24
 d64:	71 05       	cpc	r23, r1
 d66:	61 05       	cpc	r22, r1
 d68:	08 94       	sec
 d6a:	08 95       	ret

00000d6c <__fp_zero>:
 d6c:	e8 94       	clt

00000d6e <__fp_szero>:
 d6e:	bb 27       	eor	r27, r27
 d70:	66 27       	eor	r22, r22
 d72:	77 27       	eor	r23, r23
 d74:	cb 01       	movw	r24, r22
 d76:	97 f9       	bld	r25, 7
 d78:	08 95       	ret

00000d7a <__mulsf3>:
 d7a:	0e 94 d0 06 	call	0xda0	; 0xda0 <__mulsf3x>
 d7e:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__fp_round>
 d82:	0e 94 75 06 	call	0xcea	; 0xcea <__fp_pscA>
 d86:	38 f0       	brcs	.+14     	; 0xd96 <__mulsf3+0x1c>
 d88:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_pscB>
 d8c:	20 f0       	brcs	.+8      	; 0xd96 <__mulsf3+0x1c>
 d8e:	95 23       	and	r25, r21
 d90:	11 f0       	breq	.+4      	; 0xd96 <__mulsf3+0x1c>
 d92:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_inf>
 d96:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__fp_nan>
 d9a:	11 24       	eor	r1, r1
 d9c:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_szero>

00000da0 <__mulsf3x>:
 da0:	0e 94 94 06 	call	0xd28	; 0xd28 <__fp_split3>
 da4:	70 f3       	brcs	.-36     	; 0xd82 <__mulsf3+0x8>

00000da6 <__mulsf3_pse>:
 da6:	95 9f       	mul	r25, r21
 da8:	c1 f3       	breq	.-16     	; 0xd9a <__mulsf3+0x20>
 daa:	95 0f       	add	r25, r21
 dac:	50 e0       	ldi	r21, 0x00	; 0
 dae:	55 1f       	adc	r21, r21
 db0:	62 9f       	mul	r22, r18
 db2:	f0 01       	movw	r30, r0
 db4:	72 9f       	mul	r23, r18
 db6:	bb 27       	eor	r27, r27
 db8:	f0 0d       	add	r31, r0
 dba:	b1 1d       	adc	r27, r1
 dbc:	63 9f       	mul	r22, r19
 dbe:	aa 27       	eor	r26, r26
 dc0:	f0 0d       	add	r31, r0
 dc2:	b1 1d       	adc	r27, r1
 dc4:	aa 1f       	adc	r26, r26
 dc6:	64 9f       	mul	r22, r20
 dc8:	66 27       	eor	r22, r22
 dca:	b0 0d       	add	r27, r0
 dcc:	a1 1d       	adc	r26, r1
 dce:	66 1f       	adc	r22, r22
 dd0:	82 9f       	mul	r24, r18
 dd2:	22 27       	eor	r18, r18
 dd4:	b0 0d       	add	r27, r0
 dd6:	a1 1d       	adc	r26, r1
 dd8:	62 1f       	adc	r22, r18
 dda:	73 9f       	mul	r23, r19
 ddc:	b0 0d       	add	r27, r0
 dde:	a1 1d       	adc	r26, r1
 de0:	62 1f       	adc	r22, r18
 de2:	83 9f       	mul	r24, r19
 de4:	a0 0d       	add	r26, r0
 de6:	61 1d       	adc	r22, r1
 de8:	22 1f       	adc	r18, r18
 dea:	74 9f       	mul	r23, r20
 dec:	33 27       	eor	r19, r19
 dee:	a0 0d       	add	r26, r0
 df0:	61 1d       	adc	r22, r1
 df2:	23 1f       	adc	r18, r19
 df4:	84 9f       	mul	r24, r20
 df6:	60 0d       	add	r22, r0
 df8:	21 1d       	adc	r18, r1
 dfa:	82 2f       	mov	r24, r18
 dfc:	76 2f       	mov	r23, r22
 dfe:	6a 2f       	mov	r22, r26
 e00:	11 24       	eor	r1, r1
 e02:	9f 57       	subi	r25, 0x7F	; 127
 e04:	50 40       	sbci	r21, 0x00	; 0
 e06:	9a f0       	brmi	.+38     	; 0xe2e <__mulsf3_pse+0x88>
 e08:	f1 f0       	breq	.+60     	; 0xe46 <__mulsf3_pse+0xa0>
 e0a:	88 23       	and	r24, r24
 e0c:	4a f0       	brmi	.+18     	; 0xe20 <__mulsf3_pse+0x7a>
 e0e:	ee 0f       	add	r30, r30
 e10:	ff 1f       	adc	r31, r31
 e12:	bb 1f       	adc	r27, r27
 e14:	66 1f       	adc	r22, r22
 e16:	77 1f       	adc	r23, r23
 e18:	88 1f       	adc	r24, r24
 e1a:	91 50       	subi	r25, 0x01	; 1
 e1c:	50 40       	sbci	r21, 0x00	; 0
 e1e:	a9 f7       	brne	.-22     	; 0xe0a <__mulsf3_pse+0x64>
 e20:	9e 3f       	cpi	r25, 0xFE	; 254
 e22:	51 05       	cpc	r21, r1
 e24:	80 f0       	brcs	.+32     	; 0xe46 <__mulsf3_pse+0xa0>
 e26:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_inf>
 e2a:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_szero>
 e2e:	5f 3f       	cpi	r21, 0xFF	; 255
 e30:	e4 f3       	brlt	.-8      	; 0xe2a <__mulsf3_pse+0x84>
 e32:	98 3e       	cpi	r25, 0xE8	; 232
 e34:	d4 f3       	brlt	.-12     	; 0xe2a <__mulsf3_pse+0x84>
 e36:	86 95       	lsr	r24
 e38:	77 95       	ror	r23
 e3a:	67 95       	ror	r22
 e3c:	b7 95       	ror	r27
 e3e:	f7 95       	ror	r31
 e40:	e7 95       	ror	r30
 e42:	9f 5f       	subi	r25, 0xFF	; 255
 e44:	c1 f7       	brne	.-16     	; 0xe36 <__mulsf3_pse+0x90>
 e46:	fe 2b       	or	r31, r30
 e48:	88 0f       	add	r24, r24
 e4a:	91 1d       	adc	r25, r1
 e4c:	96 95       	lsr	r25
 e4e:	87 95       	ror	r24
 e50:	97 f9       	bld	r25, 7
 e52:	08 95       	ret

00000e54 <atoi>:
 e54:	fc 01       	movw	r30, r24
 e56:	88 27       	eor	r24, r24
 e58:	99 27       	eor	r25, r25
 e5a:	e8 94       	clt
 e5c:	21 91       	ld	r18, Z+
 e5e:	20 32       	cpi	r18, 0x20	; 32
 e60:	e9 f3       	breq	.-6      	; 0xe5c <atoi+0x8>
 e62:	29 30       	cpi	r18, 0x09	; 9
 e64:	10 f0       	brcs	.+4      	; 0xe6a <atoi+0x16>
 e66:	2e 30       	cpi	r18, 0x0E	; 14
 e68:	c8 f3       	brcs	.-14     	; 0xe5c <atoi+0x8>
 e6a:	2b 32       	cpi	r18, 0x2B	; 43
 e6c:	41 f0       	breq	.+16     	; 0xe7e <atoi+0x2a>
 e6e:	2d 32       	cpi	r18, 0x2D	; 45
 e70:	39 f4       	brne	.+14     	; 0xe80 <atoi+0x2c>
 e72:	68 94       	set
 e74:	04 c0       	rjmp	.+8      	; 0xe7e <atoi+0x2a>
 e76:	0e 94 53 07 	call	0xea6	; 0xea6 <__mulhi_const_10>
 e7a:	82 0f       	add	r24, r18
 e7c:	91 1d       	adc	r25, r1
 e7e:	21 91       	ld	r18, Z+
 e80:	20 53       	subi	r18, 0x30	; 48
 e82:	2a 30       	cpi	r18, 0x0A	; 10
 e84:	c0 f3       	brcs	.-16     	; 0xe76 <atoi+0x22>
 e86:	1e f4       	brtc	.+6      	; 0xe8e <atoi+0x3a>
 e88:	90 95       	com	r25
 e8a:	81 95       	neg	r24
 e8c:	9f 4f       	sbci	r25, 0xFF	; 255
 e8e:	08 95       	ret

00000e90 <__itoa_ncheck>:
 e90:	bb 27       	eor	r27, r27
 e92:	4a 30       	cpi	r20, 0x0A	; 10
 e94:	31 f4       	brne	.+12     	; 0xea2 <__itoa_ncheck+0x12>
 e96:	99 23       	and	r25, r25
 e98:	22 f4       	brpl	.+8      	; 0xea2 <__itoa_ncheck+0x12>
 e9a:	bd e2       	ldi	r27, 0x2D	; 45
 e9c:	90 95       	com	r25
 e9e:	81 95       	neg	r24
 ea0:	9f 4f       	sbci	r25, 0xFF	; 255
 ea2:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__utoa_common>

00000ea6 <__mulhi_const_10>:
 ea6:	7a e0       	ldi	r23, 0x0A	; 10
 ea8:	97 9f       	mul	r25, r23
 eaa:	90 2d       	mov	r25, r0
 eac:	87 9f       	mul	r24, r23
 eae:	80 2d       	mov	r24, r0
 eb0:	91 0d       	add	r25, r1
 eb2:	11 24       	eor	r1, r1
 eb4:	08 95       	ret

00000eb6 <__utoa_ncheck>:
 eb6:	bb 27       	eor	r27, r27

00000eb8 <__utoa_common>:
 eb8:	fb 01       	movw	r30, r22
 eba:	55 27       	eor	r21, r21
 ebc:	aa 27       	eor	r26, r26
 ebe:	88 0f       	add	r24, r24
 ec0:	99 1f       	adc	r25, r25
 ec2:	aa 1f       	adc	r26, r26
 ec4:	a4 17       	cp	r26, r20
 ec6:	10 f0       	brcs	.+4      	; 0xecc <__utoa_common+0x14>
 ec8:	a4 1b       	sub	r26, r20
 eca:	83 95       	inc	r24
 ecc:	50 51       	subi	r21, 0x10	; 16
 ece:	b9 f7       	brne	.-18     	; 0xebe <__utoa_common+0x6>
 ed0:	a0 5d       	subi	r26, 0xD0	; 208
 ed2:	aa 33       	cpi	r26, 0x3A	; 58
 ed4:	08 f0       	brcs	.+2      	; 0xed8 <__utoa_common+0x20>
 ed6:	a9 5d       	subi	r26, 0xD9	; 217
 ed8:	a1 93       	st	Z+, r26
 eda:	00 97       	sbiw	r24, 0x00	; 0
 edc:	79 f7       	brne	.-34     	; 0xebc <__utoa_common+0x4>
 ede:	b1 11       	cpse	r27, r1
 ee0:	b1 93       	st	Z+, r27
 ee2:	11 92       	st	Z+, r1
 ee4:	cb 01       	movw	r24, r22
 ee6:	0c 94 75 07 	jmp	0xeea	; 0xeea <strrev>

00000eea <strrev>:
 eea:	dc 01       	movw	r26, r24
 eec:	fc 01       	movw	r30, r24
 eee:	67 2f       	mov	r22, r23
 ef0:	71 91       	ld	r23, Z+
 ef2:	77 23       	and	r23, r23
 ef4:	e1 f7       	brne	.-8      	; 0xeee <strrev+0x4>
 ef6:	32 97       	sbiw	r30, 0x02	; 2
 ef8:	04 c0       	rjmp	.+8      	; 0xf02 <strrev+0x18>
 efa:	7c 91       	ld	r23, X
 efc:	6d 93       	st	X+, r22
 efe:	70 83       	st	Z, r23
 f00:	62 91       	ld	r22, -Z
 f02:	ae 17       	cp	r26, r30
 f04:	bf 07       	cpc	r27, r31
 f06:	c8 f3       	brcs	.-14     	; 0xefa <strrev+0x10>
 f08:	08 95       	ret

00000f0a <_exit>:
 f0a:	f8 94       	cli

00000f0c <__stop_program>:
 f0c:	ff cf       	rjmp	.-2      	; 0xf0c <__stop_program>
