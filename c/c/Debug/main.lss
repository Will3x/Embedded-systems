
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000a1c  00000ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  0080014a  0080014a  00000afa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015bc  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b11  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a2d  00000000  00000000  00002d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  000037a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000641  00000000  00000000  00003a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006fb  00000000  00000000  0000406d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 34       	cpi	r26, 0x4A	; 74
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e4       	ldi	r26, 0x4A	; 74
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 38       	cpi	r26, 0x82	; 130
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 08 03 	call	0x610	; 0x610 <main>
  9e:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SCH_tasks_G>
  b4:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	ec e4       	ldi	r30, 0x4C	; 76
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e4 5b       	subi	r30, 0xB4	; 180
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e4 5b       	subi	r30, 0xB4	; 180
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cc e4       	ldi	r28, 0x4C	; 76
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	ec e4       	ldi	r30, 0x4C	; 76
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	2f e6       	ldi	r18, 0x6F	; 111
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_send>:
	USART_putstring("status: ");
	if(data == sluiten){USART_putstring("sluiten");}
	if(data == openen){USART_putstring("openen");}
	if(data == running){USART_putstring("running");}
	USART_putstring(" ");
}
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	90 81       	ld	r25, Z
 21e:	95 ff       	sbrs	r25, 5
 220:	fd cf       	rjmp	.-6      	; 0x21c <USART_send+0x4>
 222:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 226:	08 95       	ret

00000228 <USART_putstring>:
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
 22e:	88 81       	ld	r24, Y
 230:	88 23       	and	r24, r24
 232:	31 f0       	breq	.+12     	; 0x240 <USART_putstring+0x18>
 234:	21 96       	adiw	r28, 0x01	; 1
 236:	0e 94 0c 01 	call	0x218	; 0x218 <USART_send>
 23a:	89 91       	ld	r24, Y+
 23c:	81 11       	cpse	r24, r1
 23e:	fb cf       	rjmp	.-10     	; 0x236 <USART_putstring+0xe>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <read_adc>:
 246:	ec e7       	ldi	r30, 0x7C	; 124
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	90 81       	ld	r25, Z
 24c:	90 7f       	andi	r25, 0xF0	; 240
 24e:	90 83       	st	Z, r25
 250:	90 81       	ld	r25, Z
 252:	89 2b       	or	r24, r25
 254:	80 83       	st	Z, r24
 256:	ea e7       	ldi	r30, 0x7A	; 122
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	80 83       	st	Z, r24
 260:	80 81       	ld	r24, Z
 262:	86 fd       	sbrc	r24, 6
 264:	fd cf       	rjmp	.-6      	; 0x260 <read_adc+0x1a>
 266:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 26a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 26e:	08 95       	ret

00000270 <temperatuur>:
 270:	8c e0       	ldi	r24, 0x0C	; 12
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 23 01 	call	0x246	; 0x246 <read_adc>
 27e:	bc 01       	movw	r22, r24
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 b6 03 	call	0x76c	; 0x76c <__floatunsisf>
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e8       	ldi	r20, 0x80	; 128
 28e:	5a e3       	ldi	r21, 0x3A	; 58
 290:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	40 ea       	ldi	r20, 0xA0	; 160
 29a:	50 e4       	ldi	r21, 0x40	; 64
 29c:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	5f e3       	ldi	r21, 0x3F	; 63
 2a8:	0e 94 13 03 	call	0x626	; 0x626 <__subsf3>
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	48 ec       	ldi	r20, 0xC8	; 200
 2b2:	52 e4       	ldi	r21, 0x42	; 66
 2b4:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 2b8:	0e 94 87 03 	call	0x70e	; 0x70e <__fixunssfsi>
 2bc:	dc 01       	movw	r26, r24
 2be:	cb 01       	movw	r24, r22
 2c0:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <adc_value+0x1>
 2c4:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <adc_value>
 2c8:	4a e0       	ldi	r20, 0x0A	; 10
 2ca:	6d e7       	ldi	r22, 0x7D	; 125
 2cc:	71 e0       	ldi	r23, 0x01	; 1
 2ce:	0e 94 cf 04 	call	0x99e	; 0x99e <__itoa_ncheck>
 2d2:	8d e7       	ldi	r24, 0x7D	; 125
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 2da:	84 e1       	ldi	r24, 0x14	; 20
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 2e2:	08 95       	ret

000002e4 <ldr>:
 2e4:	87 e1       	ldi	r24, 0x17	; 23
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 23 01 	call	0x246	; 0x246 <read_adc>
 2f2:	bc 01       	movw	r22, r24
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 b6 03 	call	0x76c	; 0x76c <__floatunsisf>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e8       	ldi	r20, 0x80	; 128
 302:	5a e3       	ldi	r21, 0x3A	; 58
 304:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	48 ec       	ldi	r20, 0xC8	; 200
 30e:	52 e4       	ldi	r21, 0x42	; 66
 310:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 314:	0e 94 87 03 	call	0x70e	; 0x70e <__fixunssfsi>
 318:	dc 01       	movw	r26, r24
 31a:	cb 01       	movw	r24, r22
 31c:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <adc_value+0x1>
 320:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <adc_value>
 324:	4a e0       	ldi	r20, 0x0A	; 10
 326:	68 e7       	ldi	r22, 0x78	; 120
 328:	71 e0       	ldi	r23, 0x01	; 1
 32a:	0e 94 cf 04 	call	0x99e	; 0x99e <__itoa_ncheck>
 32e:	88 e7       	ldi	r24, 0x78	; 120
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 336:	84 e1       	ldi	r24, 0x14	; 20
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 33e:	08 95       	ret

00000340 <afstand>:
 340:	8e e1       	ldi	r24, 0x1E	; 30
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 348:	5b 9a       	sbi	0x0b, 3	; 11
 34a:	85 e3       	ldi	r24, 0x35	; 53
 34c:	8a 95       	dec	r24
 34e:	f1 f7       	brne	.-4      	; 0x34c <afstand+0xc>
 350:	00 00       	nop
 352:	5b 98       	cbi	0x0b, 3	; 11
 354:	4a 9b       	sbis	0x09, 2	; 9
 356:	fe cf       	rjmp	.-4      	; 0x354 <afstand+0x14>
 358:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 35c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 360:	4a 99       	sbic	0x09, 2	; 9
 362:	fe cf       	rjmp	.-4      	; 0x360 <afstand+0x20>
 364:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 368:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 b6 03 	call	0x76c	; 0x76c <__floatunsisf>
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	40 e8       	ldi	r20, 0x80	; 128
 37a:	5e e3       	ldi	r21, 0x3E	; 62
 37c:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 380:	0e 94 80 03 	call	0x700	; 0x700 <__fixsfsi>
 384:	dc 01       	movw	r26, r24
 386:	cb 01       	movw	r24, r22
 388:	4a e0       	ldi	r20, 0x0A	; 10
 38a:	61 e7       	ldi	r22, 0x71	; 113
 38c:	71 e0       	ldi	r23, 0x01	; 1
 38e:	0e 94 cf 04 	call	0x99e	; 0x99e <__itoa_ncheck>
 392:	81 e7       	ldi	r24, 0x71	; 113
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 39a:	84 e1       	ldi	r24, 0x14	; 20
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 3a2:	08 95       	ret

000003a4 <afstandStil>:
 3a4:	5b 9a       	sbi	0x0b, 3	; 11
 3a6:	85 e3       	ldi	r24, 0x35	; 53
 3a8:	8a 95       	dec	r24
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <afstandStil+0x4>
 3ac:	00 00       	nop
 3ae:	5b 98       	cbi	0x0b, 3	; 11
 3b0:	4a 9b       	sbis	0x09, 2	; 9
 3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <afstandStil+0xc>
 3b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3bc:	4a 99       	sbic	0x09, 2	; 9
 3be:	fe cf       	rjmp	.-4      	; 0x3bc <afstandStil+0x18>
 3c0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3c4:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 b6 03 	call	0x76c	; 0x76c <__floatunsisf>
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	40 e8       	ldi	r20, 0x80	; 128
 3d6:	5e e3       	ldi	r21, 0x3E	; 62
 3d8:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 3dc:	0e 94 80 03 	call	0x700	; 0x700 <__fixsfsi>
 3e0:	dc 01       	movw	r26, r24
 3e2:	cb 01       	movw	r24, r22
 3e4:	4a e0       	ldi	r20, 0x0A	; 10
 3e6:	61 e7       	ldi	r22, 0x71	; 113
 3e8:	71 e0       	ldi	r23, 0x01	; 1
 3ea:	0e 94 cf 04 	call	0x99e	; 0x99e <__itoa_ncheck>
 3ee:	08 95       	ret

000003f0 <goDown>:
 3f0:	81 e7       	ldi	r24, 0x71	; 113
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 b1 04 	call	0x962	; 0x962 <atoi>
 3f8:	2a 98       	cbi	0x05, 2	; 5
 3fa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 3fe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 402:	28 17       	cp	r18, r24
 404:	39 07       	cpc	r19, r25
 406:	14 f5       	brge	.+68     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 408:	28 9a       	sbi	0x05, 0	; 5
 40a:	2f ef       	ldi	r18, 0xFF	; 255
 40c:	81 ee       	ldi	r24, 0xE1	; 225
 40e:	94 e0       	ldi	r25, 0x04	; 4
 410:	21 50       	subi	r18, 0x01	; 1
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
 41c:	29 9a       	sbi	0x05, 1	; 5
 41e:	2f ef       	ldi	r18, 0xFF	; 255
 420:	81 ee       	ldi	r24, 0xE1	; 225
 422:	94 e0       	ldi	r25, 0x04	; 4
 424:	21 50       	subi	r18, 0x01	; 1
 426:	80 40       	sbci	r24, 0x00	; 0
 428:	90 40       	sbci	r25, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
 430:	29 98       	cbi	0x05, 1	; 5
 432:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <afstandStil>
 436:	81 e7       	ldi	r24, 0x71	; 113
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	0e 94 b1 04 	call	0x962	; 0x962 <atoi>
 43e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 442:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 446:	28 17       	cp	r18, r24
 448:	39 07       	cpc	r19, r25
 44a:	f4 f2       	brlt	.-68     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 44c:	08 95       	ret

0000044e <goUp>:
 44e:	81 e7       	ldi	r24, 0x71	; 113
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 b1 04 	call	0x962	; 0x962 <atoi>
 456:	28 98       	cbi	0x05, 0	; 5
 458:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <afstand_up>
 45c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <afstand_up+0x1>
 460:	82 17       	cp	r24, r18
 462:	93 07       	cpc	r25, r19
 464:	14 f5       	brge	.+68     	; 0x4aa <goUp+0x5c>
 466:	2a 9a       	sbi	0x05, 2	; 5
 468:	2f ef       	ldi	r18, 0xFF	; 255
 46a:	81 ee       	ldi	r24, 0xE1	; 225
 46c:	94 e0       	ldi	r25, 0x04	; 4
 46e:	21 50       	subi	r18, 0x01	; 1
 470:	80 40       	sbci	r24, 0x00	; 0
 472:	90 40       	sbci	r25, 0x00	; 0
 474:	e1 f7       	brne	.-8      	; 0x46e <goUp+0x20>
 476:	00 c0       	rjmp	.+0      	; 0x478 <goUp+0x2a>
 478:	00 00       	nop
 47a:	29 9a       	sbi	0x05, 1	; 5
 47c:	2f ef       	ldi	r18, 0xFF	; 255
 47e:	81 ee       	ldi	r24, 0xE1	; 225
 480:	94 e0       	ldi	r25, 0x04	; 4
 482:	21 50       	subi	r18, 0x01	; 1
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	90 40       	sbci	r25, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <goUp+0x34>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <goUp+0x3e>
 48c:	00 00       	nop
 48e:	29 98       	cbi	0x05, 1	; 5
 490:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <afstandStil>
 494:	81 e7       	ldi	r24, 0x71	; 113
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 b1 04 	call	0x962	; 0x962 <atoi>
 49c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <afstand_up>
 4a0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <afstand_up+0x1>
 4a4:	82 17       	cp	r24, r18
 4a6:	93 07       	cpc	r25, r19
 4a8:	f4 f2       	brlt	.-68     	; 0x466 <goUp+0x18>
 4aa:	08 95       	ret

000004ac <upDown>:
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	88 e7       	ldi	r24, 0x78	; 120
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	0e 94 b1 04 	call	0x962	; 0x962 <atoi>
 4b8:	ec 01       	movw	r28, r24
 4ba:	8d e7       	ldi	r24, 0x7D	; 125
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 b1 04 	call	0x962	; 0x962 <atoi>
 4c2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <licht_up>
 4c6:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <licht_up+0x1>
 4ca:	c2 17       	cp	r28, r18
 4cc:	d3 07       	cpc	r29, r19
 4ce:	3c f4       	brge	.+14     	; 0x4de <upDown+0x32>
 4d0:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_up>
 4d4:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_up+0x1>
 4d8:	82 17       	cp	r24, r18
 4da:	93 07       	cpc	r25, r19
 4dc:	4c f0       	brlt	.+18     	; 0x4f0 <upDown+0x44>
 4de:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
 4e2:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <__data_end+0x1>
 4e6:	89 2b       	or	r24, r25
 4e8:	c9 f4       	brne	.+50     	; 0x51c <upDown+0x70>
 4ea:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <goDown>
 4ee:	16 c0       	rjmp	.+44     	; 0x51c <upDown+0x70>
 4f0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <licht_down>
 4f4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <licht_down+0x1>
 4f8:	2c 17       	cp	r18, r28
 4fa:	3d 07       	cpc	r19, r29
 4fc:	3c f4       	brge	.+14     	; 0x50c <upDown+0x60>
 4fe:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temp_down>
 502:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temp_down+0x1>
 506:	28 17       	cp	r18, r24
 508:	39 07       	cpc	r19, r25
 50a:	44 f0       	brlt	.+16     	; 0x51c <upDown+0x70>
 50c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
 510:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <__data_end+0x1>
 514:	89 2b       	or	r24, r25
 516:	11 f4       	brne	.+4      	; 0x51c <upDown+0x70>
 518:	0e 94 27 02 	call	0x44e	; 0x44e <goUp>
 51c:	8a e1       	ldi	r24, 0x1A	; 26
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 524:	88 e7       	ldi	r24, 0x78	; 120
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	0e 94 14 01 	call	0x228	; 0x228 <USART_putstring>
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <newRegel>:

void newRegel(){
	USART_send('\r');
 532:	8d e0       	ldi	r24, 0x0D	; 13
 534:	0e 94 0c 01 	call	0x218	; 0x218 <USART_send>
	USART_send('\n');
 538:	8a e0       	ldi	r24, 0x0A	; 10
 53a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_send>
 53e:	08 95       	ret

00000540 <init_connectie>:
void init_scheduler();
void init_lampjes();

void init_connectie(){
	// disable U2X mode
	UCSR0A = 0;
 540:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 544:	88 e1       	ldi	r24, 0x18	; 24
 546:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 54a:	8e e0       	ldi	r24, 0x0E	; 14
 54c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 550:	08 95       	ret

00000552 <init_USART>:
}

void init_USART(){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 552:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 556:	87 e6       	ldi	r24, 0x67	; 103
 558:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 55c:	88 e1       	ldi	r24, 0x18	; 24
 55e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 562:	86 e0       	ldi	r24, 0x06	; 6
 564:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 568:	08 95       	ret

0000056a <init_scheduler>:
}

void init_scheduler()
{
	SCH_Init_T1();
 56a:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temperatuur,0,1);	// moet 4000 worden@@@
 56e:	41 e0       	ldi	r20, 0x01	; 1
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	88 e3       	ldi	r24, 0x38	; 56
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(ldr,0,1);			// moet 3000 worden
 57e:	41 e0       	ldi	r20, 0x01	; 1
 580:	50 e0       	ldi	r21, 0x00	; 0
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	82 e7       	ldi	r24, 0x72	; 114
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(afstand,0,1);
 58e:	41 e0       	ldi	r20, 0x01	; 1
 590:	50 e0       	ldi	r21, 0x00	; 0
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	80 ea       	ldi	r24, 0xA0	; 160
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(upDown,0,1);
 59e:	41 e0       	ldi	r20, 0x01	; 1
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	86 e5       	ldi	r24, 0x56	; 86
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Add_Task(newRegel,0,1);
 5ae:	41 e0       	ldi	r20, 0x01	; 1
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	89 e9       	ldi	r24, 0x99	; 153
 5b8:	92 e0       	ldi	r25, 0x02	; 2
 5ba:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
//	SCH_Add_Task(check_input,0,1);
	SCH_Start();
 5be:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 5c2:	08 95       	ret

000005c4 <init_adc>:
}

void init_adc(){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
 5c4:	ea e7       	ldi	r30, 0x7A	; 122
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	87 60       	ori	r24, 0x07	; 7
 5cc:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
 5ce:	ac e7       	ldi	r26, 0x7C	; 124
 5d0:	b0 e0       	ldi	r27, 0x00	; 0
 5d2:	8c 91       	ld	r24, X
 5d4:	80 64       	ori	r24, 0x40	; 64
 5d6:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
 5d8:	80 81       	ld	r24, Z
 5da:	80 68       	ori	r24, 0x80	; 128
 5dc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 5de:	80 81       	ld	r24, Z
 5e0:	80 64       	ori	r24, 0x40	; 64
 5e2:	80 83       	st	Z, r24
 5e4:	08 95       	ret

000005e6 <init_dist>:
}

void init_dist(){
	DDRD |= _BV(PD3); // Pin 3 Trigger Output
 5e6:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~_BV(PD2); // Pin 2 Echo Input
 5e8:	52 98       	cbi	0x0a, 2	; 10
 5ea:	08 95       	ret

000005ec <init_lampjes>:
}

void init_lampjes(){
	DDRB |= _BV(PB0);	// pin0 B = output
 5ec:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1);	// pin1 B = output
 5ee:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(PB2);	// pin2 B = output
 5f0:	22 9a       	sbi	0x04, 2	; 4
	
	PORTB = 0; // lampjes uitzetten
 5f2:	15 b8       	out	0x05, r1	; 5
 5f4:	08 95       	ret

000005f6 <setup>:
		SCH_Dispatch_Tasks();
	}
}

void setup(){
	init_connectie();
 5f6:	0e 94 a0 02 	call	0x540	; 0x540 <init_connectie>
	init_adc();			// Setup the ADC
 5fa:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <init_adc>
	init_USART();			// Setup the USART
 5fe:	0e 94 a9 02 	call	0x552	; 0x552 <init_USART>
	init_dist();
 602:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <init_dist>
	init_scheduler();
 606:	0e 94 b5 02 	call	0x56a	; 0x56a <init_scheduler>
	init_lampjes();
 60a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <init_lampjes>
 60e:	08 95       	ret

00000610 <main>:

int main(void);
void setup();

int main(void){
	setup();
 610:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <setup>
	
	temperatuur();
 614:	0e 94 38 01 	call	0x270	; 0x270 <temperatuur>
	ldr();
 618:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ldr>
	afstand();
 61c:	0e 94 a0 01 	call	0x340	; 0x340 <afstand>
	while(1) {
		SCH_Dispatch_Tasks();
 620:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 624:	fd cf       	rjmp	.-6      	; 0x620 <main+0x10>

00000626 <__subsf3>:
 626:	50 58       	subi	r21, 0x80	; 128

00000628 <__addsf3>:
 628:	bb 27       	eor	r27, r27
 62a:	aa 27       	eor	r26, r26
 62c:	0e 94 2b 03 	call	0x656	; 0x656 <__addsf3x>
 630:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_round>
 634:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fp_pscA>
 638:	38 f0       	brcs	.+14     	; 0x648 <__addsf3+0x20>
 63a:	0e 94 03 04 	call	0x806	; 0x806 <__fp_pscB>
 63e:	20 f0       	brcs	.+8      	; 0x648 <__addsf3+0x20>
 640:	39 f4       	brne	.+14     	; 0x650 <__addsf3+0x28>
 642:	9f 3f       	cpi	r25, 0xFF	; 255
 644:	19 f4       	brne	.+6      	; 0x64c <__addsf3+0x24>
 646:	26 f4       	brtc	.+8      	; 0x650 <__addsf3+0x28>
 648:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__fp_nan>
 64c:	0e f4       	brtc	.+2      	; 0x650 <__addsf3+0x28>
 64e:	e0 95       	com	r30
 650:	e7 fb       	bst	r30, 7
 652:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_inf>

00000656 <__addsf3x>:
 656:	e9 2f       	mov	r30, r25
 658:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_split3>
 65c:	58 f3       	brcs	.-42     	; 0x634 <__addsf3+0xc>
 65e:	ba 17       	cp	r27, r26
 660:	62 07       	cpc	r22, r18
 662:	73 07       	cpc	r23, r19
 664:	84 07       	cpc	r24, r20
 666:	95 07       	cpc	r25, r21
 668:	20 f0       	brcs	.+8      	; 0x672 <__addsf3x+0x1c>
 66a:	79 f4       	brne	.+30     	; 0x68a <__addsf3x+0x34>
 66c:	a6 f5       	brtc	.+104    	; 0x6d6 <__addsf3x+0x80>
 66e:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_zero>
 672:	0e f4       	brtc	.+2      	; 0x676 <__addsf3x+0x20>
 674:	e0 95       	com	r30
 676:	0b 2e       	mov	r0, r27
 678:	ba 2f       	mov	r27, r26
 67a:	a0 2d       	mov	r26, r0
 67c:	0b 01       	movw	r0, r22
 67e:	b9 01       	movw	r22, r18
 680:	90 01       	movw	r18, r0
 682:	0c 01       	movw	r0, r24
 684:	ca 01       	movw	r24, r20
 686:	a0 01       	movw	r20, r0
 688:	11 24       	eor	r1, r1
 68a:	ff 27       	eor	r31, r31
 68c:	59 1b       	sub	r21, r25
 68e:	99 f0       	breq	.+38     	; 0x6b6 <__addsf3x+0x60>
 690:	59 3f       	cpi	r21, 0xF9	; 249
 692:	50 f4       	brcc	.+20     	; 0x6a8 <__addsf3x+0x52>
 694:	50 3e       	cpi	r21, 0xE0	; 224
 696:	68 f1       	brcs	.+90     	; 0x6f2 <__addsf3x+0x9c>
 698:	1a 16       	cp	r1, r26
 69a:	f0 40       	sbci	r31, 0x00	; 0
 69c:	a2 2f       	mov	r26, r18
 69e:	23 2f       	mov	r18, r19
 6a0:	34 2f       	mov	r19, r20
 6a2:	44 27       	eor	r20, r20
 6a4:	58 5f       	subi	r21, 0xF8	; 248
 6a6:	f3 cf       	rjmp	.-26     	; 0x68e <__addsf3x+0x38>
 6a8:	46 95       	lsr	r20
 6aa:	37 95       	ror	r19
 6ac:	27 95       	ror	r18
 6ae:	a7 95       	ror	r26
 6b0:	f0 40       	sbci	r31, 0x00	; 0
 6b2:	53 95       	inc	r21
 6b4:	c9 f7       	brne	.-14     	; 0x6a8 <__addsf3x+0x52>
 6b6:	7e f4       	brtc	.+30     	; 0x6d6 <__addsf3x+0x80>
 6b8:	1f 16       	cp	r1, r31
 6ba:	ba 0b       	sbc	r27, r26
 6bc:	62 0b       	sbc	r22, r18
 6be:	73 0b       	sbc	r23, r19
 6c0:	84 0b       	sbc	r24, r20
 6c2:	ba f0       	brmi	.+46     	; 0x6f2 <__addsf3x+0x9c>
 6c4:	91 50       	subi	r25, 0x01	; 1
 6c6:	a1 f0       	breq	.+40     	; 0x6f0 <__addsf3x+0x9a>
 6c8:	ff 0f       	add	r31, r31
 6ca:	bb 1f       	adc	r27, r27
 6cc:	66 1f       	adc	r22, r22
 6ce:	77 1f       	adc	r23, r23
 6d0:	88 1f       	adc	r24, r24
 6d2:	c2 f7       	brpl	.-16     	; 0x6c4 <__addsf3x+0x6e>
 6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <__addsf3x+0x9c>
 6d6:	ba 0f       	add	r27, r26
 6d8:	62 1f       	adc	r22, r18
 6da:	73 1f       	adc	r23, r19
 6dc:	84 1f       	adc	r24, r20
 6de:	48 f4       	brcc	.+18     	; 0x6f2 <__addsf3x+0x9c>
 6e0:	87 95       	ror	r24
 6e2:	77 95       	ror	r23
 6e4:	67 95       	ror	r22
 6e6:	b7 95       	ror	r27
 6e8:	f7 95       	ror	r31
 6ea:	9e 3f       	cpi	r25, 0xFE	; 254
 6ec:	08 f0       	brcs	.+2      	; 0x6f0 <__addsf3x+0x9a>
 6ee:	b0 cf       	rjmp	.-160    	; 0x650 <__addsf3+0x28>
 6f0:	93 95       	inc	r25
 6f2:	88 0f       	add	r24, r24
 6f4:	08 f0       	brcs	.+2      	; 0x6f8 <__addsf3x+0xa2>
 6f6:	99 27       	eor	r25, r25
 6f8:	ee 0f       	add	r30, r30
 6fa:	97 95       	ror	r25
 6fc:	87 95       	ror	r24
 6fe:	08 95       	ret

00000700 <__fixsfsi>:
 700:	0e 94 87 03 	call	0x70e	; 0x70e <__fixunssfsi>
 704:	68 94       	set
 706:	b1 11       	cpse	r27, r1
 708:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__fp_szero>
 70c:	08 95       	ret

0000070e <__fixunssfsi>:
 70e:	0e 94 23 04 	call	0x846	; 0x846 <__fp_splitA>
 712:	88 f0       	brcs	.+34     	; 0x736 <__fixunssfsi+0x28>
 714:	9f 57       	subi	r25, 0x7F	; 127
 716:	98 f0       	brcs	.+38     	; 0x73e <__fixunssfsi+0x30>
 718:	b9 2f       	mov	r27, r25
 71a:	99 27       	eor	r25, r25
 71c:	b7 51       	subi	r27, 0x17	; 23
 71e:	b0 f0       	brcs	.+44     	; 0x74c <__fixunssfsi+0x3e>
 720:	e1 f0       	breq	.+56     	; 0x75a <__fixunssfsi+0x4c>
 722:	66 0f       	add	r22, r22
 724:	77 1f       	adc	r23, r23
 726:	88 1f       	adc	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	1a f0       	brmi	.+6      	; 0x732 <__fixunssfsi+0x24>
 72c:	ba 95       	dec	r27
 72e:	c9 f7       	brne	.-14     	; 0x722 <__fixunssfsi+0x14>
 730:	14 c0       	rjmp	.+40     	; 0x75a <__fixunssfsi+0x4c>
 732:	b1 30       	cpi	r27, 0x01	; 1
 734:	91 f0       	breq	.+36     	; 0x75a <__fixunssfsi+0x4c>
 736:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_zero>
 73a:	b1 e0       	ldi	r27, 0x01	; 1
 73c:	08 95       	ret
 73e:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_zero>
 742:	67 2f       	mov	r22, r23
 744:	78 2f       	mov	r23, r24
 746:	88 27       	eor	r24, r24
 748:	b8 5f       	subi	r27, 0xF8	; 248
 74a:	39 f0       	breq	.+14     	; 0x75a <__fixunssfsi+0x4c>
 74c:	b9 3f       	cpi	r27, 0xF9	; 249
 74e:	cc f3       	brlt	.-14     	; 0x742 <__fixunssfsi+0x34>
 750:	86 95       	lsr	r24
 752:	77 95       	ror	r23
 754:	67 95       	ror	r22
 756:	b3 95       	inc	r27
 758:	d9 f7       	brne	.-10     	; 0x750 <__fixunssfsi+0x42>
 75a:	3e f4       	brtc	.+14     	; 0x76a <__fixunssfsi+0x5c>
 75c:	90 95       	com	r25
 75e:	80 95       	com	r24
 760:	70 95       	com	r23
 762:	61 95       	neg	r22
 764:	7f 4f       	sbci	r23, 0xFF	; 255
 766:	8f 4f       	sbci	r24, 0xFF	; 255
 768:	9f 4f       	sbci	r25, 0xFF	; 255
 76a:	08 95       	ret

0000076c <__floatunsisf>:
 76c:	e8 94       	clt
 76e:	09 c0       	rjmp	.+18     	; 0x782 <__floatsisf+0x12>

00000770 <__floatsisf>:
 770:	97 fb       	bst	r25, 7
 772:	3e f4       	brtc	.+14     	; 0x782 <__floatsisf+0x12>
 774:	90 95       	com	r25
 776:	80 95       	com	r24
 778:	70 95       	com	r23
 77a:	61 95       	neg	r22
 77c:	7f 4f       	sbci	r23, 0xFF	; 255
 77e:	8f 4f       	sbci	r24, 0xFF	; 255
 780:	9f 4f       	sbci	r25, 0xFF	; 255
 782:	99 23       	and	r25, r25
 784:	a9 f0       	breq	.+42     	; 0x7b0 <__floatsisf+0x40>
 786:	f9 2f       	mov	r31, r25
 788:	96 e9       	ldi	r25, 0x96	; 150
 78a:	bb 27       	eor	r27, r27
 78c:	93 95       	inc	r25
 78e:	f6 95       	lsr	r31
 790:	87 95       	ror	r24
 792:	77 95       	ror	r23
 794:	67 95       	ror	r22
 796:	b7 95       	ror	r27
 798:	f1 11       	cpse	r31, r1
 79a:	f8 cf       	rjmp	.-16     	; 0x78c <__floatsisf+0x1c>
 79c:	fa f4       	brpl	.+62     	; 0x7dc <__floatsisf+0x6c>
 79e:	bb 0f       	add	r27, r27
 7a0:	11 f4       	brne	.+4      	; 0x7a6 <__floatsisf+0x36>
 7a2:	60 ff       	sbrs	r22, 0
 7a4:	1b c0       	rjmp	.+54     	; 0x7dc <__floatsisf+0x6c>
 7a6:	6f 5f       	subi	r22, 0xFF	; 255
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	8f 4f       	sbci	r24, 0xFF	; 255
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	16 c0       	rjmp	.+44     	; 0x7dc <__floatsisf+0x6c>
 7b0:	88 23       	and	r24, r24
 7b2:	11 f0       	breq	.+4      	; 0x7b8 <__floatsisf+0x48>
 7b4:	96 e9       	ldi	r25, 0x96	; 150
 7b6:	11 c0       	rjmp	.+34     	; 0x7da <__floatsisf+0x6a>
 7b8:	77 23       	and	r23, r23
 7ba:	21 f0       	breq	.+8      	; 0x7c4 <__floatsisf+0x54>
 7bc:	9e e8       	ldi	r25, 0x8E	; 142
 7be:	87 2f       	mov	r24, r23
 7c0:	76 2f       	mov	r23, r22
 7c2:	05 c0       	rjmp	.+10     	; 0x7ce <__floatsisf+0x5e>
 7c4:	66 23       	and	r22, r22
 7c6:	71 f0       	breq	.+28     	; 0x7e4 <__floatsisf+0x74>
 7c8:	96 e8       	ldi	r25, 0x86	; 134
 7ca:	86 2f       	mov	r24, r22
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	60 e0       	ldi	r22, 0x00	; 0
 7d0:	2a f0       	brmi	.+10     	; 0x7dc <__floatsisf+0x6c>
 7d2:	9a 95       	dec	r25
 7d4:	66 0f       	add	r22, r22
 7d6:	77 1f       	adc	r23, r23
 7d8:	88 1f       	adc	r24, r24
 7da:	da f7       	brpl	.-10     	; 0x7d2 <__floatsisf+0x62>
 7dc:	88 0f       	add	r24, r24
 7de:	96 95       	lsr	r25
 7e0:	87 95       	ror	r24
 7e2:	97 f9       	bld	r25, 7
 7e4:	08 95       	ret

000007e6 <__fp_inf>:
 7e6:	97 f9       	bld	r25, 7
 7e8:	9f 67       	ori	r25, 0x7F	; 127
 7ea:	80 e8       	ldi	r24, 0x80	; 128
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	08 95       	ret

000007f2 <__fp_nan>:
 7f2:	9f ef       	ldi	r25, 0xFF	; 255
 7f4:	80 ec       	ldi	r24, 0xC0	; 192
 7f6:	08 95       	ret

000007f8 <__fp_pscA>:
 7f8:	00 24       	eor	r0, r0
 7fa:	0a 94       	dec	r0
 7fc:	16 16       	cp	r1, r22
 7fe:	17 06       	cpc	r1, r23
 800:	18 06       	cpc	r1, r24
 802:	09 06       	cpc	r0, r25
 804:	08 95       	ret

00000806 <__fp_pscB>:
 806:	00 24       	eor	r0, r0
 808:	0a 94       	dec	r0
 80a:	12 16       	cp	r1, r18
 80c:	13 06       	cpc	r1, r19
 80e:	14 06       	cpc	r1, r20
 810:	05 06       	cpc	r0, r21
 812:	08 95       	ret

00000814 <__fp_round>:
 814:	09 2e       	mov	r0, r25
 816:	03 94       	inc	r0
 818:	00 0c       	add	r0, r0
 81a:	11 f4       	brne	.+4      	; 0x820 <__fp_round+0xc>
 81c:	88 23       	and	r24, r24
 81e:	52 f0       	brmi	.+20     	; 0x834 <__fp_round+0x20>
 820:	bb 0f       	add	r27, r27
 822:	40 f4       	brcc	.+16     	; 0x834 <__fp_round+0x20>
 824:	bf 2b       	or	r27, r31
 826:	11 f4       	brne	.+4      	; 0x82c <__fp_round+0x18>
 828:	60 ff       	sbrs	r22, 0
 82a:	04 c0       	rjmp	.+8      	; 0x834 <__fp_round+0x20>
 82c:	6f 5f       	subi	r22, 0xFF	; 255
 82e:	7f 4f       	sbci	r23, 0xFF	; 255
 830:	8f 4f       	sbci	r24, 0xFF	; 255
 832:	9f 4f       	sbci	r25, 0xFF	; 255
 834:	08 95       	ret

00000836 <__fp_split3>:
 836:	57 fd       	sbrc	r21, 7
 838:	90 58       	subi	r25, 0x80	; 128
 83a:	44 0f       	add	r20, r20
 83c:	55 1f       	adc	r21, r21
 83e:	59 f0       	breq	.+22     	; 0x856 <__fp_splitA+0x10>
 840:	5f 3f       	cpi	r21, 0xFF	; 255
 842:	71 f0       	breq	.+28     	; 0x860 <__fp_splitA+0x1a>
 844:	47 95       	ror	r20

00000846 <__fp_splitA>:
 846:	88 0f       	add	r24, r24
 848:	97 fb       	bst	r25, 7
 84a:	99 1f       	adc	r25, r25
 84c:	61 f0       	breq	.+24     	; 0x866 <__fp_splitA+0x20>
 84e:	9f 3f       	cpi	r25, 0xFF	; 255
 850:	79 f0       	breq	.+30     	; 0x870 <__fp_splitA+0x2a>
 852:	87 95       	ror	r24
 854:	08 95       	ret
 856:	12 16       	cp	r1, r18
 858:	13 06       	cpc	r1, r19
 85a:	14 06       	cpc	r1, r20
 85c:	55 1f       	adc	r21, r21
 85e:	f2 cf       	rjmp	.-28     	; 0x844 <__fp_split3+0xe>
 860:	46 95       	lsr	r20
 862:	f1 df       	rcall	.-30     	; 0x846 <__fp_splitA>
 864:	08 c0       	rjmp	.+16     	; 0x876 <__fp_splitA+0x30>
 866:	16 16       	cp	r1, r22
 868:	17 06       	cpc	r1, r23
 86a:	18 06       	cpc	r1, r24
 86c:	99 1f       	adc	r25, r25
 86e:	f1 cf       	rjmp	.-30     	; 0x852 <__fp_splitA+0xc>
 870:	86 95       	lsr	r24
 872:	71 05       	cpc	r23, r1
 874:	61 05       	cpc	r22, r1
 876:	08 94       	sec
 878:	08 95       	ret

0000087a <__fp_zero>:
 87a:	e8 94       	clt

0000087c <__fp_szero>:
 87c:	bb 27       	eor	r27, r27
 87e:	66 27       	eor	r22, r22
 880:	77 27       	eor	r23, r23
 882:	cb 01       	movw	r24, r22
 884:	97 f9       	bld	r25, 7
 886:	08 95       	ret

00000888 <__mulsf3>:
 888:	0e 94 57 04 	call	0x8ae	; 0x8ae <__mulsf3x>
 88c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_round>
 890:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fp_pscA>
 894:	38 f0       	brcs	.+14     	; 0x8a4 <__mulsf3+0x1c>
 896:	0e 94 03 04 	call	0x806	; 0x806 <__fp_pscB>
 89a:	20 f0       	brcs	.+8      	; 0x8a4 <__mulsf3+0x1c>
 89c:	95 23       	and	r25, r21
 89e:	11 f0       	breq	.+4      	; 0x8a4 <__mulsf3+0x1c>
 8a0:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_inf>
 8a4:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__fp_nan>
 8a8:	11 24       	eor	r1, r1
 8aa:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__fp_szero>

000008ae <__mulsf3x>:
 8ae:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_split3>
 8b2:	70 f3       	brcs	.-36     	; 0x890 <__mulsf3+0x8>

000008b4 <__mulsf3_pse>:
 8b4:	95 9f       	mul	r25, r21
 8b6:	c1 f3       	breq	.-16     	; 0x8a8 <__mulsf3+0x20>
 8b8:	95 0f       	add	r25, r21
 8ba:	50 e0       	ldi	r21, 0x00	; 0
 8bc:	55 1f       	adc	r21, r21
 8be:	62 9f       	mul	r22, r18
 8c0:	f0 01       	movw	r30, r0
 8c2:	72 9f       	mul	r23, r18
 8c4:	bb 27       	eor	r27, r27
 8c6:	f0 0d       	add	r31, r0
 8c8:	b1 1d       	adc	r27, r1
 8ca:	63 9f       	mul	r22, r19
 8cc:	aa 27       	eor	r26, r26
 8ce:	f0 0d       	add	r31, r0
 8d0:	b1 1d       	adc	r27, r1
 8d2:	aa 1f       	adc	r26, r26
 8d4:	64 9f       	mul	r22, r20
 8d6:	66 27       	eor	r22, r22
 8d8:	b0 0d       	add	r27, r0
 8da:	a1 1d       	adc	r26, r1
 8dc:	66 1f       	adc	r22, r22
 8de:	82 9f       	mul	r24, r18
 8e0:	22 27       	eor	r18, r18
 8e2:	b0 0d       	add	r27, r0
 8e4:	a1 1d       	adc	r26, r1
 8e6:	62 1f       	adc	r22, r18
 8e8:	73 9f       	mul	r23, r19
 8ea:	b0 0d       	add	r27, r0
 8ec:	a1 1d       	adc	r26, r1
 8ee:	62 1f       	adc	r22, r18
 8f0:	83 9f       	mul	r24, r19
 8f2:	a0 0d       	add	r26, r0
 8f4:	61 1d       	adc	r22, r1
 8f6:	22 1f       	adc	r18, r18
 8f8:	74 9f       	mul	r23, r20
 8fa:	33 27       	eor	r19, r19
 8fc:	a0 0d       	add	r26, r0
 8fe:	61 1d       	adc	r22, r1
 900:	23 1f       	adc	r18, r19
 902:	84 9f       	mul	r24, r20
 904:	60 0d       	add	r22, r0
 906:	21 1d       	adc	r18, r1
 908:	82 2f       	mov	r24, r18
 90a:	76 2f       	mov	r23, r22
 90c:	6a 2f       	mov	r22, r26
 90e:	11 24       	eor	r1, r1
 910:	9f 57       	subi	r25, 0x7F	; 127
 912:	50 40       	sbci	r21, 0x00	; 0
 914:	9a f0       	brmi	.+38     	; 0x93c <__stack+0x3d>
 916:	f1 f0       	breq	.+60     	; 0x954 <__stack+0x55>
 918:	88 23       	and	r24, r24
 91a:	4a f0       	brmi	.+18     	; 0x92e <__stack+0x2f>
 91c:	ee 0f       	add	r30, r30
 91e:	ff 1f       	adc	r31, r31
 920:	bb 1f       	adc	r27, r27
 922:	66 1f       	adc	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	91 50       	subi	r25, 0x01	; 1
 92a:	50 40       	sbci	r21, 0x00	; 0
 92c:	a9 f7       	brne	.-22     	; 0x918 <__stack+0x19>
 92e:	9e 3f       	cpi	r25, 0xFE	; 254
 930:	51 05       	cpc	r21, r1
 932:	80 f0       	brcs	.+32     	; 0x954 <__stack+0x55>
 934:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_inf>
 938:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__fp_szero>
 93c:	5f 3f       	cpi	r21, 0xFF	; 255
 93e:	e4 f3       	brlt	.-8      	; 0x938 <__stack+0x39>
 940:	98 3e       	cpi	r25, 0xE8	; 232
 942:	d4 f3       	brlt	.-12     	; 0x938 <__stack+0x39>
 944:	86 95       	lsr	r24
 946:	77 95       	ror	r23
 948:	67 95       	ror	r22
 94a:	b7 95       	ror	r27
 94c:	f7 95       	ror	r31
 94e:	e7 95       	ror	r30
 950:	9f 5f       	subi	r25, 0xFF	; 255
 952:	c1 f7       	brne	.-16     	; 0x944 <__stack+0x45>
 954:	fe 2b       	or	r31, r30
 956:	88 0f       	add	r24, r24
 958:	91 1d       	adc	r25, r1
 95a:	96 95       	lsr	r25
 95c:	87 95       	ror	r24
 95e:	97 f9       	bld	r25, 7
 960:	08 95       	ret

00000962 <atoi>:
 962:	fc 01       	movw	r30, r24
 964:	88 27       	eor	r24, r24
 966:	99 27       	eor	r25, r25
 968:	e8 94       	clt
 96a:	21 91       	ld	r18, Z+
 96c:	20 32       	cpi	r18, 0x20	; 32
 96e:	e9 f3       	breq	.-6      	; 0x96a <atoi+0x8>
 970:	29 30       	cpi	r18, 0x09	; 9
 972:	10 f0       	brcs	.+4      	; 0x978 <atoi+0x16>
 974:	2e 30       	cpi	r18, 0x0E	; 14
 976:	c8 f3       	brcs	.-14     	; 0x96a <atoi+0x8>
 978:	2b 32       	cpi	r18, 0x2B	; 43
 97a:	41 f0       	breq	.+16     	; 0x98c <atoi+0x2a>
 97c:	2d 32       	cpi	r18, 0x2D	; 45
 97e:	39 f4       	brne	.+14     	; 0x98e <atoi+0x2c>
 980:	68 94       	set
 982:	04 c0       	rjmp	.+8      	; 0x98c <atoi+0x2a>
 984:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__mulhi_const_10>
 988:	82 0f       	add	r24, r18
 98a:	91 1d       	adc	r25, r1
 98c:	21 91       	ld	r18, Z+
 98e:	20 53       	subi	r18, 0x30	; 48
 990:	2a 30       	cpi	r18, 0x0A	; 10
 992:	c0 f3       	brcs	.-16     	; 0x984 <atoi+0x22>
 994:	1e f4       	brtc	.+6      	; 0x99c <atoi+0x3a>
 996:	90 95       	com	r25
 998:	81 95       	neg	r24
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	08 95       	ret

0000099e <__itoa_ncheck>:
 99e:	bb 27       	eor	r27, r27
 9a0:	4a 30       	cpi	r20, 0x0A	; 10
 9a2:	31 f4       	brne	.+12     	; 0x9b0 <__itoa_ncheck+0x12>
 9a4:	99 23       	and	r25, r25
 9a6:	22 f4       	brpl	.+8      	; 0x9b0 <__itoa_ncheck+0x12>
 9a8:	bd e2       	ldi	r27, 0x2D	; 45
 9aa:	90 95       	com	r25
 9ac:	81 95       	neg	r24
 9ae:	9f 4f       	sbci	r25, 0xFF	; 255
 9b0:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__utoa_common>

000009b4 <__mulhi_const_10>:
 9b4:	7a e0       	ldi	r23, 0x0A	; 10
 9b6:	97 9f       	mul	r25, r23
 9b8:	90 2d       	mov	r25, r0
 9ba:	87 9f       	mul	r24, r23
 9bc:	80 2d       	mov	r24, r0
 9be:	91 0d       	add	r25, r1
 9c0:	11 24       	eor	r1, r1
 9c2:	08 95       	ret

000009c4 <__utoa_ncheck>:
 9c4:	bb 27       	eor	r27, r27

000009c6 <__utoa_common>:
 9c6:	fb 01       	movw	r30, r22
 9c8:	55 27       	eor	r21, r21
 9ca:	aa 27       	eor	r26, r26
 9cc:	88 0f       	add	r24, r24
 9ce:	99 1f       	adc	r25, r25
 9d0:	aa 1f       	adc	r26, r26
 9d2:	a4 17       	cp	r26, r20
 9d4:	10 f0       	brcs	.+4      	; 0x9da <__utoa_common+0x14>
 9d6:	a4 1b       	sub	r26, r20
 9d8:	83 95       	inc	r24
 9da:	50 51       	subi	r21, 0x10	; 16
 9dc:	b9 f7       	brne	.-18     	; 0x9cc <__utoa_common+0x6>
 9de:	a0 5d       	subi	r26, 0xD0	; 208
 9e0:	aa 33       	cpi	r26, 0x3A	; 58
 9e2:	08 f0       	brcs	.+2      	; 0x9e6 <__utoa_common+0x20>
 9e4:	a9 5d       	subi	r26, 0xD9	; 217
 9e6:	a1 93       	st	Z+, r26
 9e8:	00 97       	sbiw	r24, 0x00	; 0
 9ea:	79 f7       	brne	.-34     	; 0x9ca <__utoa_common+0x4>
 9ec:	b1 11       	cpse	r27, r1
 9ee:	b1 93       	st	Z+, r27
 9f0:	11 92       	st	Z+, r1
 9f2:	cb 01       	movw	r24, r22
 9f4:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <strrev>

000009f8 <strrev>:
 9f8:	dc 01       	movw	r26, r24
 9fa:	fc 01       	movw	r30, r24
 9fc:	67 2f       	mov	r22, r23
 9fe:	71 91       	ld	r23, Z+
 a00:	77 23       	and	r23, r23
 a02:	e1 f7       	brne	.-8      	; 0x9fc <strrev+0x4>
 a04:	32 97       	sbiw	r30, 0x02	; 2
 a06:	04 c0       	rjmp	.+8      	; 0xa10 <strrev+0x18>
 a08:	7c 91       	ld	r23, X
 a0a:	6d 93       	st	X+, r22
 a0c:	70 83       	st	Z, r23
 a0e:	62 91       	ld	r22, -Z
 a10:	ae 17       	cp	r26, r30
 a12:	bf 07       	cpc	r27, r31
 a14:	c8 f3       	brcs	.-14     	; 0xa08 <strrev+0x10>
 a16:	08 95       	ret

00000a18 <_exit>:
 a18:	f8 94       	cli

00000a1a <__stop_program>:
 a1a:	ff cf       	rjmp	.-2      	; 0xa1a <__stop_program>
