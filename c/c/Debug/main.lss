
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000d2e  00000dc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  0080012e  0080012e  00000df0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000196e  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d73  00000000  00000000  00002936  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da9  00000000  00000000  000036a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00004454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069b  00000000  00000000  00004758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  00004df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000580d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 36       	cpi	r26, 0x6D	; 109
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c5 03 	call	0x78a	; 0x78a <main>
  9e:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
  b0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <SCH_tasks_G>
  b4:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e2 e3       	ldi	r30, 0x32	; 50
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	82 2f       	mov	r24, r18
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	ee 5c       	subi	r30, 0xCE	; 206
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
 104:	16 82       	std	Z+6, r1	; 0x06
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	ee 5c       	subi	r30, 0xCE	; 206
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
 12a:	16 82       	std	Z+6, r1	; 0x06
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c2 e3       	ldi	r28, 0x32	; 50
 13c:	d1 e0       	ldi	r29, 0x01	; 1
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 14e:	09 95       	icall
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
 178:	cf 93       	push	r28
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e2 e3       	ldi	r30, 0x32	; 50
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	25 e5       	ldi	r18, 0x55	; 85
 1c8:	31 e0       	ldi	r19, 0x01	; 1
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_receive>:
#define F_CPU 16000000UL
#include <util/delay.h>

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1<<RXC0)));
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <USART_receive+0x4>
	return UDR0 - 48;
 222:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 226:	80 53       	subi	r24, 0x30	; 48
 228:	08 95       	ret

0000022a <USART_send>:

void USART_send(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 22a:	e0 ec       	ldi	r30, 0xC0	; 192
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	90 81       	ld	r25, Z
 230:	95 ff       	sbrs	r25, 5
 232:	fd cf       	rjmp	.-6      	; 0x22e <USART_send+0x4>
	UDR0 = data;
 234:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 238:	08 95       	ret

0000023a <USART_putstring>:
}

void USART_putstring(char* StringPtr)
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
 240:	88 81       	ld	r24, Y
 242:	88 23       	and	r24, r24
 244:	31 f0       	breq	.+12     	; 0x252 <USART_putstring+0x18>
 246:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 248:	0e 94 15 01 	call	0x22a	; 0x22a <USART_send>
	UDR0 = data;
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00){
 24c:	89 91       	ld	r24, Y+
 24e:	81 11       	cpse	r24, r1
 250:	fb cf       	rjmp	.-10     	; 0x248 <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <newLine>:

void newLine()
{
	USART_send('\r');
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	0e 94 15 01 	call	0x22a	; 0x22a <USART_send>
	USART_send('\n');
 25e:	8a e0       	ldi	r24, 0x0A	; 10
 260:	0e 94 15 01 	call	0x22a	; 0x22a <USART_send>
 264:	08 95       	ret

00000266 <read_adc>:
}

uint16_t read_adc(uint8_t channel)
{
	ADMUX &= 0xF0;                    //Clear the older channel that was read
 266:	ec e7       	ldi	r30, 0x7C	; 124
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	90 81       	ld	r25, Z
 26c:	90 7f       	andi	r25, 0xF0	; 240
 26e:	90 83       	st	Z, r25
	ADMUX |= channel;                 //Defines the new ADC channel to be read
 270:	90 81       	ld	r25, Z
 272:	89 2b       	or	r24, r25
 274:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);              //Starts a new conversion
 276:	ea e7       	ldi	r30, 0x7A	; 122
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));        //Wait until the conversion is done
 280:	80 81       	ld	r24, Z
 282:	86 fd       	sbrc	r24, 6
 284:	fd cf       	rjmp	.-6      	; 0x280 <read_adc+0x1a>
	return ADCW;                      //Returns the ADC value of the chosen channel
 286:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 28a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 28e:	08 95       	ret

00000290 <upDown>:
int unsigned combine3(unsigned x, unsigned y, unsigned z)
{
	unsigned pow1 = 10;
	unsigned pow2 = 100;
	return (z * pow2) + (y * pow1) + x;
}
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	85 e5       	ldi	r24, 0x55	; 85
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 3a 06 	call	0xc74	; 0xc74 <atoi>
 2a0:	ec 01       	movw	r28, r24
 2a2:	88 e6       	ldi	r24, 0x68	; 104
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 3a 06 	call	0xc74	; 0xc74 <atoi>
 2aa:	8c 01       	movw	r16, r24
 2ac:	0e 94 70 04 	call	0x8e0	; 0x8e0 <distanceStill>
 2b0:	8e e5       	ldi	r24, 0x5E	; 94
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 3a 06 	call	0xc74	; 0xc74 <atoi>
 2b8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <LDR_down>
 2bc:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <LDR_down+0x1>
 2c0:	c2 17       	cp	r28, r18
 2c2:	d3 07       	cpc	r29, r19
 2c4:	3c f4       	brge	.+14     	; 0x2d4 <upDown+0x44>
 2c6:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_down>
 2ca:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_down+0x1>
 2ce:	02 17       	cp	r16, r18
 2d0:	13 07       	cpc	r17, r19
 2d2:	34 f0       	brlt	.+12     	; 0x2e0 <upDown+0x50>
 2d4:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__data_end>
 2d8:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__data_end+0x1>
 2dc:	23 2b       	or	r18, r19
 2de:	a1 f0       	breq	.+40     	; 0x308 <upDown+0x78>
 2e0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <distance_manual>
 2e4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <distance_manual+0x1>
 2e8:	21 15       	cp	r18, r1
 2ea:	31 05       	cpc	r19, r1
 2ec:	81 f5       	brne	.+96     	; 0x34e <upDown+0xbe>
 2ee:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <onoff>
 2f2:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <onoff+0x1>
 2f6:	45 2b       	or	r20, r21
 2f8:	51 f1       	breq	.+84     	; 0x34e <upDown+0xbe>
 2fa:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <__data_end>
 2fe:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <__data_end+0x1>
 302:	45 2b       	or	r20, r21
 304:	09 f4       	brne	.+2      	; 0x308 <upDown+0x78>
 306:	b2 c0       	rjmp	.+356    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 308:	2a 98       	cbi	0x05, 2	; 5
 30a:	28 9a       	sbi	0x05, 0	; 5
 30c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 310:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 314:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <distance_down>
 318:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <distance_down+0x1>
 31c:	28 17       	cp	r18, r24
 31e:	39 07       	cpc	r19, r25
 320:	0c f0       	brlt	.+2      	; 0x324 <upDown+0x94>
 322:	c1 c0       	rjmp	.+386    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 324:	29 9a       	sbi	0x05, 1	; 5
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	81 ee       	ldi	r24, 0xE1	; 225
 32a:	94 e0       	ldi	r25, 0x04	; 4
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <upDown+0x9c>
 334:	00 c0       	rjmp	.+0      	; 0x336 <upDown+0xa6>
 336:	00 00       	nop
 338:	29 98       	cbi	0x05, 1	; 5
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	81 ee       	ldi	r24, 0xE1	; 225
 33e:	94 e0       	ldi	r25, 0x04	; 4
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <upDown+0xb0>
 348:	00 c0       	rjmp	.+0      	; 0x34a <upDown+0xba>
 34a:	00 00       	nop
 34c:	ac c0       	rjmp	.+344    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 34e:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <LDR_up>
 352:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <LDR_up+0x1>
 356:	4c 17       	cp	r20, r28
 358:	5d 07       	cpc	r21, r29
 35a:	3c f4       	brge	.+14     	; 0x36a <upDown+0xda>
 35c:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_up>
 360:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_up+0x1>
 364:	40 17       	cp	r20, r16
 366:	51 07       	cpc	r21, r17
 368:	44 f0       	brlt	.+16     	; 0x37a <upDown+0xea>
 36a:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <__data_end>
 36e:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <__data_end+0x1>
 372:	45 2b       	or	r20, r21
 374:	09 f0       	breq	.+2      	; 0x378 <upDown+0xe8>
 376:	83 c0       	rjmp	.+262    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 378:	0e c0       	rjmp	.+28     	; 0x396 <upDown+0x106>
 37a:	23 2b       	or	r18, r19
 37c:	89 f1       	breq	.+98     	; 0x3e0 <upDown+0x150>
 37e:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <onoff>
 382:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <onoff+0x1>
 386:	23 2b       	or	r18, r19
 388:	59 f1       	breq	.+86     	; 0x3e0 <upDown+0x150>
 38a:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__data_end>
 38e:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__data_end+0x1>
 392:	23 2b       	or	r18, r19
 394:	61 f1       	breq	.+88     	; 0x3ee <upDown+0x15e>
 396:	28 98       	cbi	0x05, 0	; 5
 398:	2a 9a       	sbi	0x05, 2	; 5
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 3a2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 3a6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <distance_up>
 3aa:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <distance_up+0x1>
 3ae:	82 17       	cp	r24, r18
 3b0:	93 07       	cpc	r25, r19
 3b2:	0c f0       	brlt	.+2      	; 0x3b6 <upDown+0x126>
 3b4:	78 c0       	rjmp	.+240    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 3b6:	29 9a       	sbi	0x05, 1	; 5
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	81 ee       	ldi	r24, 0xE1	; 225
 3bc:	94 e0       	ldi	r25, 0x04	; 4
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <upDown+0x12e>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <upDown+0x138>
 3c8:	00 00       	nop
 3ca:	29 98       	cbi	0x05, 1	; 5
 3cc:	2f ef       	ldi	r18, 0xFF	; 255
 3ce:	81 ee       	ldi	r24, 0xE1	; 225
 3d0:	94 e0       	ldi	r25, 0x04	; 4
 3d2:	21 50       	subi	r18, 0x01	; 1
 3d4:	80 40       	sbci	r24, 0x00	; 0
 3d6:	90 40       	sbci	r25, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <upDown+0x142>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <upDown+0x14c>
 3dc:	00 00       	nop
 3de:	63 c0       	rjmp	.+198    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 3e0:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__data_end>
 3e4:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__data_end+0x1>
 3e8:	23 2b       	or	r18, r19
 3ea:	09 f0       	breq	.+2      	; 0x3ee <upDown+0x15e>
 3ec:	5c c0       	rjmp	.+184    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 3ee:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 3f2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 3f6:	23 2b       	or	r18, r19
 3f8:	e9 f0       	breq	.+58     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3fa:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <distance_up>
 3fe:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <distance_up+0x1>
 402:	82 17       	cp	r24, r18
 404:	93 07       	cpc	r25, r19
 406:	0c f0       	brlt	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	4e c0       	rjmp	.+156    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 40a:	29 9a       	sbi	0x05, 1	; 5
 40c:	2f ef       	ldi	r18, 0xFF	; 255
 40e:	81 ee       	ldi	r24, 0xE1	; 225
 410:	94 e0       	ldi	r25, 0x04	; 4
 412:	21 50       	subi	r18, 0x01	; 1
 414:	80 40       	sbci	r24, 0x00	; 0
 416:	90 40       	sbci	r25, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	29 98       	cbi	0x05, 1	; 5
 420:	2f ef       	ldi	r18, 0xFF	; 255
 422:	81 ee       	ldi	r24, 0xE1	; 225
 424:	94 e0       	ldi	r25, 0x04	; 4
 426:	21 50       	subi	r18, 0x01	; 1
 428:	80 40       	sbci	r24, 0x00	; 0
 42a:	90 40       	sbci	r25, 0x00	; 0
 42c:	e1 f7       	brne	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 430:	00 00       	nop
 432:	39 c0       	rjmp	.+114    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 434:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <distance_down>
 438:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <distance_down+0x1>
 43c:	28 17       	cp	r18, r24
 43e:	39 07       	cpc	r19, r25
 440:	94 f5       	brge	.+100    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 442:	29 9a       	sbi	0x05, 1	; 5
 444:	2f ef       	ldi	r18, 0xFF	; 255
 446:	81 ee       	ldi	r24, 0xE1	; 225
 448:	94 e0       	ldi	r25, 0x04	; 4
 44a:	21 50       	subi	r18, 0x01	; 1
 44c:	80 40       	sbci	r24, 0x00	; 0
 44e:	90 40       	sbci	r25, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 454:	00 00       	nop
 456:	29 98       	cbi	0x05, 1	; 5
 458:	2f ef       	ldi	r18, 0xFF	; 255
 45a:	81 ee       	ldi	r24, 0xE1	; 225
 45c:	94 e0       	ldi	r25, 0x04	; 4
 45e:	21 50       	subi	r18, 0x01	; 1
 460:	80 40       	sbci	r24, 0x00	; 0
 462:	90 40       	sbci	r25, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 468:	00 00       	nop
 46a:	1d c0       	rjmp	.+58     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 46c:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <LDR_up>
 470:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <LDR_up+0x1>
 474:	4c 17       	cp	r20, r28
 476:	5d 07       	cpc	r21, r29
 478:	0c f0       	brlt	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	8d cf       	rjmp	.-230    	; 0x396 <upDown+0x106>
 47c:	03 c0       	rjmp	.+6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 47e:	23 2b       	or	r18, r19
 480:	51 f4       	brne	.+20     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 482:	11 c0       	rjmp	.+34     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 484:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_up>
 488:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_up+0x1>
 48c:	40 17       	cp	r20, r16
 48e:	51 07       	cpc	r21, r17
 490:	0c f0       	brlt	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 492:	81 cf       	rjmp	.-254    	; 0x396 <upDown+0x106>
 494:	72 cf       	rjmp	.-284    	; 0x37a <upDown+0xea>
 496:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <onoff>
 49a:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <onoff+0x1>
 49e:	23 2b       	or	r18, r19
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a2:	9e cf       	rjmp	.-196    	; 0x3e0 <upDown+0x150>
 4a4:	78 cf       	rjmp	.-272    	; 0x396 <upDown+0x106>
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	08 95       	ret

000004b0 <__vector_18>:

ISR ( USART_RX_vect )
{
 4b0:	1f 92       	push	r1
 4b2:	0f 92       	push	r0
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	0f 92       	push	r0
 4b8:	11 24       	eor	r1, r1
 4ba:	2f 93       	push	r18
 4bc:	3f 93       	push	r19
 4be:	4f 93       	push	r20
 4c0:	5f 93       	push	r21
 4c2:	6f 93       	push	r22
 4c4:	7f 93       	push	r23
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
 4ca:	af 93       	push	r26
 4cc:	bf 93       	push	r27
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	ef 93       	push	r30
 4d4:	ff 93       	push	r31
	unsigned char ReceivedByte;
	ReceivedByte = UDR0;						// Set ReceivedByte to the received byte from the controller (GUI)
 4d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	switch(ReceivedByte)
 4da:	83 33       	cpi	r24, 0x33	; 51
 4dc:	59 f1       	breq	.+86     	; 0x534 <__vector_18+0x84>
 4de:	28 f4       	brcc	.+10     	; 0x4ea <__vector_18+0x3a>
 4e0:	81 33       	cpi	r24, 0x31	; 49
 4e2:	51 f0       	breq	.+20     	; 0x4f8 <__vector_18+0x48>
 4e4:	82 33       	cpi	r24, 0x32	; 50
 4e6:	b9 f0       	breq	.+46     	; 0x516 <__vector_18+0x66>
 4e8:	ca c0       	rjmp	.+404    	; 0x67e <__vector_18+0x1ce>
 4ea:	87 33       	cpi	r24, 0x37	; 55
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <__vector_18+0x40>
 4ee:	87 c0       	rjmp	.+270    	; 0x5fe <__vector_18+0x14e>
 4f0:	88 33       	cpi	r24, 0x38	; 56
 4f2:	09 f4       	brne	.+2      	; 0x4f6 <__vector_18+0x46>
 4f4:	af c0       	rjmp	.+350    	; 0x654 <__vector_18+0x1a4>
 4f6:	c3 c0       	rjmp	.+390    	; 0x67e <__vector_18+0x1ce>
	{
		case '1':								// 1 = Shut the sunshade // Red
			manual = 1;
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 500:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			onoff = 1;
 504:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <onoff+0x1>
 508:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <onoff>
			distance_manual = 0;
 50c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <distance_manual+0x1>
 510:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <distance_manual>
			return;
 514:	b4 c0       	rjmp	.+360    	; 0x67e <__vector_18+0x1ce>
			
		case '2':								// 2 = Open the sunshade // Green
			manual = 1;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 51e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			onoff = 1;
 522:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <onoff+0x1>
 526:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <onoff>
			distance_manual = 1;
 52a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <distance_manual+0x1>
 52e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <distance_manual>
			return;
 532:	a5 c0       	rjmp	.+330    	; 0x67e <__vector_18+0x1ce>
			
		case '3':								// 3 = set
			manual = 0;
 534:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__data_end+0x1>
 538:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
			temp_down = combine((int) USART_receive(), (int) USART_receive());
 53c:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 540:	c8 2f       	mov	r28, r24
 542:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 546:	2c 2f       	mov	r18, r28
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	a9 01       	movw	r20, r18
 54c:	44 0f       	add	r20, r20
 54e:	55 1f       	adc	r21, r21
 550:	22 0f       	add	r18, r18
 552:	33 1f       	adc	r19, r19
 554:	22 0f       	add	r18, r18
 556:	33 1f       	adc	r19, r19
 558:	22 0f       	add	r18, r18
 55a:	33 1f       	adc	r19, r19
 55c:	24 0f       	add	r18, r20
 55e:	35 1f       	adc	r19, r21
 560:	28 0f       	add	r18, r24
 562:	31 1d       	adc	r19, r1
 564:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <temp_down+0x1>
 568:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <temp_down>
			temp_up = combine((int) USART_receive(), (int) USART_receive());
 56c:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 570:	c8 2f       	mov	r28, r24
 572:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 576:	2c 2f       	mov	r18, r28
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	a9 01       	movw	r20, r18
 57c:	44 0f       	add	r20, r20
 57e:	55 1f       	adc	r21, r21
 580:	22 0f       	add	r18, r18
 582:	33 1f       	adc	r19, r19
 584:	22 0f       	add	r18, r18
 586:	33 1f       	adc	r19, r19
 588:	22 0f       	add	r18, r18
 58a:	33 1f       	adc	r19, r19
 58c:	24 0f       	add	r18, r20
 58e:	35 1f       	adc	r19, r21
 590:	28 0f       	add	r18, r24
 592:	31 1d       	adc	r19, r1
 594:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <temp_up+0x1>
 598:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <temp_up>
			LDR_down = combine((int) USART_receive(), (int) USART_receive());
 59c:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5a0:	c8 2f       	mov	r28, r24
 5a2:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5a6:	2c 2f       	mov	r18, r28
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	a9 01       	movw	r20, r18
 5ac:	44 0f       	add	r20, r20
 5ae:	55 1f       	adc	r21, r21
 5b0:	22 0f       	add	r18, r18
 5b2:	33 1f       	adc	r19, r19
 5b4:	22 0f       	add	r18, r18
 5b6:	33 1f       	adc	r19, r19
 5b8:	22 0f       	add	r18, r18
 5ba:	33 1f       	adc	r19, r19
 5bc:	24 0f       	add	r18, r20
 5be:	35 1f       	adc	r19, r21
 5c0:	28 0f       	add	r18, r24
 5c2:	31 1d       	adc	r19, r1
 5c4:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <LDR_down+0x1>
 5c8:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <LDR_down>
			LDR_up = combine((int) USART_receive(), (int) USART_receive());
 5cc:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5d0:	c8 2f       	mov	r28, r24
 5d2:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5d6:	2c 2f       	mov	r18, r28
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	a9 01       	movw	r20, r18
 5dc:	44 0f       	add	r20, r20
 5de:	55 1f       	adc	r21, r21
 5e0:	22 0f       	add	r18, r18
 5e2:	33 1f       	adc	r19, r19
 5e4:	22 0f       	add	r18, r18
 5e6:	33 1f       	adc	r19, r19
 5e8:	22 0f       	add	r18, r18
 5ea:	33 1f       	adc	r19, r19
 5ec:	24 0f       	add	r18, r20
 5ee:	35 1f       	adc	r19, r21
 5f0:	28 0f       	add	r18, r24
 5f2:	31 1d       	adc	r19, r1
 5f4:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <LDR_up+0x1>
 5f8:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <LDR_up>
			return;
 5fc:	40 c0       	rjmp	.+128    	; 0x67e <__vector_18+0x1ce>
			
		case '7':								// 7 = open/closing distance
			manual = 1;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 606:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			onoff = 0;
 60a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <onoff+0x1>
 60e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <onoff>
			int closeopen = combine3((int) USART_receive(), (int) USART_receive(), (int) USART_receive());
 612:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 616:	d8 2f       	mov	r29, r24
 618:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 61c:	c8 2f       	mov	r28, r24
 61e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
			distance_up = closeopen;
 622:	2c 2f       	mov	r18, r28
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	a9 01       	movw	r20, r18
 628:	44 0f       	add	r20, r20
 62a:	55 1f       	adc	r21, r21
 62c:	22 0f       	add	r18, r18
 62e:	33 1f       	adc	r19, r19
 630:	22 0f       	add	r18, r18
 632:	33 1f       	adc	r19, r19
 634:	22 0f       	add	r18, r18
 636:	33 1f       	adc	r19, r19
 638:	24 0f       	add	r18, r20
 63a:	35 1f       	adc	r19, r21
 63c:	94 e6       	ldi	r25, 0x64	; 100
 63e:	d9 9f       	mul	r29, r25
 640:	20 0d       	add	r18, r0
 642:	31 1d       	adc	r19, r1
 644:	11 24       	eor	r1, r1
 646:	28 0f       	add	r18, r24
 648:	31 1d       	adc	r19, r1
 64a:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <distance_up+0x1>
 64e:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <distance_up>
			return;
 652:	15 c0       	rjmp	.+42     	; 0x67e <__vector_18+0x1ce>
			
		case '8':								// 8 = set manual ON / OFF
			onoff = 0;
 654:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <onoff+0x1>
 658:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <onoff>
			manual = (int) USART_receive();		// 1/0
 65c:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 666:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			if (manual == 1)					// manual mode on
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	41 f4       	brne	.+16     	; 0x67e <__vector_18+0x1ce>
			{
				distance_manual = (int)atoi(distance_sensor);
 66e:	8e e5       	ldi	r24, 0x5E	; 94
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 3a 06 	call	0xc74	; 0xc74 <atoi>
 676:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <distance_manual+0x1>
 67a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <distance_manual>
			return;
		
		default:
			return;
	}
 67e:	ff 91       	pop	r31
 680:	ef 91       	pop	r30
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	bf 91       	pop	r27
 688:	af 91       	pop	r26
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	7f 91       	pop	r23
 690:	6f 91       	pop	r22
 692:	5f 91       	pop	r21
 694:	4f 91       	pop	r20
 696:	3f 91       	pop	r19
 698:	2f 91       	pop	r18
 69a:	0f 90       	pop	r0
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	0f 90       	pop	r0
 6a0:	1f 90       	pop	r1
 6a2:	18 95       	reti

000006a4 <init_connectie>:
#define BAUDRATE 9600
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)

void init_connectie()
{
	UCSR0A = 0;							// disable U2X mode
 6a4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);	// Set frame format: 8data, 2stop bit 
 6a8:	8e e0       	ldi	r24, 0x0E	; 14
 6aa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 6ae:	08 95       	ret

000006b0 <init_USART>:
}

void init_USART()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 6b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 6b4:	87 e6       	ldi	r24, 0x67	; 103
 6b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);		// Enable receiver and transmitter
 6ba:	e1 ec       	ldi	r30, 0xC1	; 193
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	88 e1       	ldi	r24, 0x18	; 24
 6c0:	80 83       	st	Z, r24
	UCSR0C = (3<<UCSZ00);
 6c2:	86 e0       	ldi	r24, 0x06	; 6
 6c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << RXCIE0 );			// Enable the USART Receive Complete interrupt ( USART_RXC )
 6c8:	80 81       	ld	r24, Z
 6ca:	80 68       	ori	r24, 0x80	; 128
 6cc:	80 83       	st	Z, r24
	sei ();								// Enable the Global Interrupt Enable flag so that interrupts can be processed
 6ce:	78 94       	sei
 6d0:	08 95       	ret

000006d2 <init_scheduler>:
}

void init_scheduler()
{
	SCH_Init_T1();
 6d2:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temperature,1,25);
 6d6:	49 e1       	ldi	r20, 0x19	; 25
 6d8:	50 e0       	ldi	r21, 0x00	; 0
 6da:	61 e0       	ldi	r22, 0x01	; 1
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	8a ec       	ldi	r24, 0xCA	; 202
 6e0:	93 e0       	ldi	r25, 0x03	; 3
 6e2:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(ldr,2,25);
 6e6:	49 e1       	ldi	r20, 0x19	; 25
 6e8:	50 e0       	ldi	r21, 0x00	; 0
 6ea:	62 e0       	ldi	r22, 0x02	; 2
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	84 e0       	ldi	r24, 0x04	; 4
 6f0:	94 e0       	ldi	r25, 0x04	; 4
 6f2:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(distance,3,25);
 6f6:	49 e1       	ldi	r20, 0x19	; 25
 6f8:	50 e0       	ldi	r21, 0x00	; 0
 6fa:	63 e0       	ldi	r22, 0x03	; 3
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	88 e3       	ldi	r24, 0x38	; 56
 700:	94 e0       	ldi	r25, 0x04	; 4
 702:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(newLine,4,25);
 706:	49 e1       	ldi	r20, 0x19	; 25
 708:	50 e0       	ldi	r21, 0x00	; 0
 70a:	64 e0       	ldi	r22, 0x04	; 4
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	8c e2       	ldi	r24, 0x2C	; 44
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(upDown,0,10);
 716:	4a e0       	ldi	r20, 0x0A	; 10
 718:	50 e0       	ldi	r21, 0x00	; 0
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	88 e4       	ldi	r24, 0x48	; 72
 720:	91 e0       	ldi	r25, 0x01	; 1
 722:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 726:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 72a:	08 95       	ret

0000072c <init_adc>:
}

void init_adc()
{
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    // 16Mhz/128 = 125Khz the ADC reference clock
 72c:	ea e7       	ldi	r30, 0x7A	; 122
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 81       	ld	r24, Z
 732:	87 60       	ori	r24, 0x07	; 7
 734:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);							 // Voltage reference from AVCC (5v)
 736:	ac e7       	ldi	r26, 0x7C	; 124
 738:	b0 e0       	ldi	r27, 0x00	; 0
 73a:	8c 91       	ld	r24, X
 73c:	80 64       	ori	r24, 0x40	; 64
 73e:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);							 // Turn on ADC
 740:	80 81       	ld	r24, Z
 742:	80 68       	ori	r24, 0x80	; 128
 744:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							 // Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 746:	80 81       	ld	r24, Z
 748:	80 64       	ori	r24, 0x40	; 64
 74a:	80 83       	st	Z, r24
 74c:	08 95       	ret

0000074e <init_dist>:
}

void init_dist()
{
	DDRD |= _BV(PD3);			// Pin 3 Trigger Output
 74e:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~_BV(PD2);			// Pin 2 Echo Input
 750:	52 98       	cbi	0x0a, 2	; 10
 752:	08 95       	ret

00000754 <init_LEDS>:
}

void init_LEDS()
{ 
	DDRB |= _BV(PB0);			// pin0 B = output
 754:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1);			// pin1 B = output
 756:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(PB2);			// pin2 B = output
 758:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << PB2);		// Green LED on
 75a:	2a 9a       	sbi	0x05, 2	; 5
 75c:	08 95       	ret

0000075e <setup>:
 75e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <init_connectie>
 762:	0e 94 96 03 	call	0x72c	; 0x72c <init_adc>
 766:	0e 94 58 03 	call	0x6b0	; 0x6b0 <init_USART>
 76a:	0e 94 a7 03 	call	0x74e	; 0x74e <init_dist>
 76e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <init_scheduler>
 772:	0e 94 aa 03 	call	0x754	; 0x754 <init_LEDS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 776:	2f ef       	ldi	r18, 0xFF	; 255
 778:	89 e6       	ldi	r24, 0x69	; 105
 77a:	98 e1       	ldi	r25, 0x18	; 24
 77c:	21 50       	subi	r18, 0x01	; 1
 77e:	80 40       	sbci	r24, 0x00	; 0
 780:	90 40       	sbci	r25, 0x00	; 0
 782:	e1 f7       	brne	.-8      	; 0x77c <setup+0x1e>
 784:	00 c0       	rjmp	.+0      	; 0x786 <setup+0x28>
 786:	00 00       	nop
 788:	08 95       	ret

0000078a <main>:
 78a:	0e 94 af 03 	call	0x75e	; 0x75e <setup>
 78e:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 792:	fd cf       	rjmp	.-6      	; 0x78e <main+0x4>

00000794 <temperature>:
#include "sensors.h"
#include "serial.h"

void temperature()
{
	USART_putstring("Temp : ");
 794:	80 e1       	ldi	r24, 0x10	; 16
 796:	91 e0       	ldi	r25, 0x01	; 1
 798:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	adc_value = read_adc(0);
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	0e 94 33 01 	call	0x266	; 0x266 <read_adc>
	adc_value = (((((double)adc_value / 1024) * 5) - 0.5) * 100); // Calculate temperature
 7a2:	bc 01       	movw	r22, r24
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__floatunsisf>
 7ac:	20 e0       	ldi	r18, 0x00	; 0
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	40 e8       	ldi	r20, 0x80	; 128
 7b2:	5a e3       	ldi	r21, 0x3A	; 58
 7b4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__mulsf3>
 7b8:	20 e0       	ldi	r18, 0x00	; 0
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	40 ea       	ldi	r20, 0xA0	; 160
 7be:	50 e4       	ldi	r21, 0x40	; 64
 7c0:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__mulsf3>
 7c4:	20 e0       	ldi	r18, 0x00	; 0
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	40 e0       	ldi	r20, 0x00	; 0
 7ca:	5f e3       	ldi	r21, 0x3F	; 63
 7cc:	0e 94 9c 04 	call	0x938	; 0x938 <__subsf3>
 7d0:	20 e0       	ldi	r18, 0x00	; 0
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	48 ec       	ldi	r20, 0xC8	; 200
 7d6:	52 e4       	ldi	r21, 0x42	; 66
 7d8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__mulsf3>
 7dc:	0e 94 10 05 	call	0xa20	; 0xa20 <__fixunssfsi>
 7e0:	dc 01       	movw	r26, r24
 7e2:	cb 01       	movw	r24, r22
 7e4:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <adc_value+0x1>
 7e8:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <adc_value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7ec:	4a e0       	ldi	r20, 0x0A	; 10
 7ee:	68 e6       	ldi	r22, 0x68	; 104
 7f0:	71 e0       	ldi	r23, 0x01	; 1
 7f2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__itoa_ncheck>
	itoa(adc_value, temp_sensor, 10);							  //Convert the read value to an ascii string
	USART_putstring(temp_sensor);								  //Send the converted value to the terminal
 7f6:	88 e6       	ldi	r24, 0x68	; 104
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	USART_putstring("  ");
 7fe:	88 e1       	ldi	r24, 0x18	; 24
 800:	91 e0       	ldi	r25, 0x01	; 1
 802:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
 806:	08 95       	ret

00000808 <ldr>:
}

void ldr()
{
	USART_putstring("LDR : ");
 808:	8b e1       	ldi	r24, 0x1B	; 27
 80a:	91 e0       	ldi	r25, 0x01	; 1
 80c:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	adc_value = read_adc(1);
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	0e 94 33 01 	call	0x266	; 0x266 <read_adc>
	adc_value = ((((double)adc_value)/1024)*100 *1.5);			  // Calculate the amount of light
 816:	bc 01       	movw	r22, r24
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__floatunsisf>
 820:	20 e0       	ldi	r18, 0x00	; 0
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	40 e8       	ldi	r20, 0x80	; 128
 826:	5a e3       	ldi	r21, 0x3A	; 58
 828:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__mulsf3>
 82c:	20 e0       	ldi	r18, 0x00	; 0
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	48 ec       	ldi	r20, 0xC8	; 200
 832:	52 e4       	ldi	r21, 0x42	; 66
 834:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__mulsf3>
 838:	20 e0       	ldi	r18, 0x00	; 0
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	40 ec       	ldi	r20, 0xC0	; 192
 83e:	5f e3       	ldi	r21, 0x3F	; 63
 840:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__mulsf3>
 844:	0e 94 10 05 	call	0xa20	; 0xa20 <__fixunssfsi>
 848:	dc 01       	movw	r26, r24
 84a:	cb 01       	movw	r24, r22
 84c:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <adc_value+0x1>
 850:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <adc_value>
 854:	4a e0       	ldi	r20, 0x0A	; 10
 856:	65 e5       	ldi	r22, 0x55	; 85
 858:	71 e0       	ldi	r23, 0x01	; 1
 85a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__itoa_ncheck>
	itoa(adc_value, LDR_sensor, 10);							  // Convert the read value to an ascii string
	USART_putstring(LDR_sensor);								  // Send the converted value to the terminal
 85e:	85 e5       	ldi	r24, 0x55	; 85
 860:	91 e0       	ldi	r25, 0x01	; 1
 862:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	USART_putstring("  ");
 866:	88 e1       	ldi	r24, 0x18	; 24
 868:	91 e0       	ldi	r25, 0x01	; 1
 86a:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
 86e:	08 95       	ret

00000870 <distance>:
}

void distance()
{
	OCR1A = 0x640;								// Max length = 400 cm * 4 = Dec.1600 == Hex 640
 870:	80 e4       	ldi	r24, 0x40	; 64
 872:	96 e0       	ldi	r25, 0x06	; 6
 874:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 878:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	USART_putstring("distance : ");
 87c:	82 e2       	ldi	r24, 0x22	; 34
 87e:	91 e0       	ldi	r25, 0x01	; 1
 880:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	PORTD |= _BV(PD3);
 884:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 886:	85 e3       	ldi	r24, 0x35	; 53
 888:	8a 95       	dec	r24
 88a:	f1 f7       	brne	.-4      	; 0x888 <distance+0x18>
 88c:	00 00       	nop
	_delay_us(10);
	PORTD &= ~_BV(PD3);							// Give pulse from 10us
 88e:	5b 98       	cbi	0x0b, 3	; 11
	
	loop_until_bit_is_set(PIND, PD2);
 890:	4a 9b       	sbis	0x09, 2	; 9
 892:	fe cf       	rjmp	.-4      	; 0x890 <distance+0x20>
	TCNT1 = 0;
 894:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 898:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	loop_until_bit_is_clear(PIND, PD2);
 89c:	4a 99       	sbic	0x09, 2	; 9
 89e:	fe cf       	rjmp	.-4      	; 0x89c <distance+0x2c>
	uint16_t count = TCNT1;
 8a0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 8a4:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__floatunsisf>
 8b0:	20 e0       	ldi	r18, 0x00	; 0
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	40 e8       	ldi	r20, 0x80	; 128
 8b6:	5e e3       	ldi	r21, 0x3E	; 62
 8b8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__mulsf3>
 8bc:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixsfsi>
 8c0:	dc 01       	movw	r26, r24
 8c2:	cb 01       	movw	r24, r22
 8c4:	4a e0       	ldi	r20, 0x0A	; 10
 8c6:	6e e5       	ldi	r22, 0x5E	; 94
 8c8:	71 e0       	ldi	r23, 0x01	; 1
 8ca:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__itoa_ncheck>
	float distance = ((float)count / 4);		// Calculate the distance

	itoa(distance, distance_sensor, 10);        // Convert the read value to an ascii string
	USART_putstring(distance_sensor);			// Send the converted value to the terminal
 8ce:	8e e5       	ldi	r24, 0x5E	; 94
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
	USART_putstring("  ");
 8d6:	88 e1       	ldi	r24, 0x18	; 24
 8d8:	91 e0       	ldi	r25, 0x01	; 1
 8da:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_putstring>
 8de:	08 95       	ret

000008e0 <distanceStill>:
}

void distanceStill()
{
	OCR1A = 0x640;								// Max length = 400 cm * 4 = Dec.1600 == Hex 640
 8e0:	80 e4       	ldi	r24, 0x40	; 64
 8e2:	96 e0       	ldi	r25, 0x06	; 6
 8e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 8e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	PORTD |= _BV(PD3);
 8ec:	5b 9a       	sbi	0x0b, 3	; 11
 8ee:	85 e3       	ldi	r24, 0x35	; 53
 8f0:	8a 95       	dec	r24
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <distanceStill+0x10>
 8f4:	00 00       	nop
	_delay_us(10);
	PORTD &= ~_BV(PD3);							// Give pulse from 10us
 8f6:	5b 98       	cbi	0x0b, 3	; 11
	loop_until_bit_is_set(PIND, PD2);
 8f8:	4a 9b       	sbis	0x09, 2	; 9
 8fa:	fe cf       	rjmp	.-4      	; 0x8f8 <distanceStill+0x18>
	TCNT1 = 0;
 8fc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 900:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	loop_until_bit_is_clear(PIND, PD2);
 904:	4a 99       	sbic	0x09, 2	; 9
 906:	fe cf       	rjmp	.-4      	; 0x904 <__stack+0x5>
	uint16_t count = TCNT1;
 908:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 90c:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__floatunsisf>
 918:	20 e0       	ldi	r18, 0x00	; 0
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	40 e8       	ldi	r20, 0x80	; 128
 91e:	5e e3       	ldi	r21, 0x3E	; 62
 920:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__mulsf3>
 924:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixsfsi>
 928:	dc 01       	movw	r26, r24
 92a:	cb 01       	movw	r24, r22
 92c:	4a e0       	ldi	r20, 0x0A	; 10
 92e:	6e e5       	ldi	r22, 0x5E	; 94
 930:	71 e0       	ldi	r23, 0x01	; 1
 932:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__itoa_ncheck>
 936:	08 95       	ret

00000938 <__subsf3>:
 938:	50 58       	subi	r21, 0x80	; 128

0000093a <__addsf3>:
 93a:	bb 27       	eor	r27, r27
 93c:	aa 27       	eor	r26, r26
 93e:	0e 94 b4 04 	call	0x968	; 0x968 <__addsf3x>
 942:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_round>
 946:	0e 94 85 05 	call	0xb0a	; 0xb0a <__fp_pscA>
 94a:	38 f0       	brcs	.+14     	; 0x95a <__addsf3+0x20>
 94c:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fp_pscB>
 950:	20 f0       	brcs	.+8      	; 0x95a <__addsf3+0x20>
 952:	39 f4       	brne	.+14     	; 0x962 <__addsf3+0x28>
 954:	9f 3f       	cpi	r25, 0xFF	; 255
 956:	19 f4       	brne	.+6      	; 0x95e <__addsf3+0x24>
 958:	26 f4       	brtc	.+8      	; 0x962 <__addsf3+0x28>
 95a:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_nan>
 95e:	0e f4       	brtc	.+2      	; 0x962 <__addsf3+0x28>
 960:	e0 95       	com	r30
 962:	e7 fb       	bst	r30, 7
 964:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_inf>

00000968 <__addsf3x>:
 968:	e9 2f       	mov	r30, r25
 96a:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fp_split3>
 96e:	58 f3       	brcs	.-42     	; 0x946 <__addsf3+0xc>
 970:	ba 17       	cp	r27, r26
 972:	62 07       	cpc	r22, r18
 974:	73 07       	cpc	r23, r19
 976:	84 07       	cpc	r24, r20
 978:	95 07       	cpc	r25, r21
 97a:	20 f0       	brcs	.+8      	; 0x984 <__addsf3x+0x1c>
 97c:	79 f4       	brne	.+30     	; 0x99c <__addsf3x+0x34>
 97e:	a6 f5       	brtc	.+104    	; 0x9e8 <__addsf3x+0x80>
 980:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_zero>
 984:	0e f4       	brtc	.+2      	; 0x988 <__addsf3x+0x20>
 986:	e0 95       	com	r30
 988:	0b 2e       	mov	r0, r27
 98a:	ba 2f       	mov	r27, r26
 98c:	a0 2d       	mov	r26, r0
 98e:	0b 01       	movw	r0, r22
 990:	b9 01       	movw	r22, r18
 992:	90 01       	movw	r18, r0
 994:	0c 01       	movw	r0, r24
 996:	ca 01       	movw	r24, r20
 998:	a0 01       	movw	r20, r0
 99a:	11 24       	eor	r1, r1
 99c:	ff 27       	eor	r31, r31
 99e:	59 1b       	sub	r21, r25
 9a0:	99 f0       	breq	.+38     	; 0x9c8 <__addsf3x+0x60>
 9a2:	59 3f       	cpi	r21, 0xF9	; 249
 9a4:	50 f4       	brcc	.+20     	; 0x9ba <__addsf3x+0x52>
 9a6:	50 3e       	cpi	r21, 0xE0	; 224
 9a8:	68 f1       	brcs	.+90     	; 0xa04 <__addsf3x+0x9c>
 9aa:	1a 16       	cp	r1, r26
 9ac:	f0 40       	sbci	r31, 0x00	; 0
 9ae:	a2 2f       	mov	r26, r18
 9b0:	23 2f       	mov	r18, r19
 9b2:	34 2f       	mov	r19, r20
 9b4:	44 27       	eor	r20, r20
 9b6:	58 5f       	subi	r21, 0xF8	; 248
 9b8:	f3 cf       	rjmp	.-26     	; 0x9a0 <__addsf3x+0x38>
 9ba:	46 95       	lsr	r20
 9bc:	37 95       	ror	r19
 9be:	27 95       	ror	r18
 9c0:	a7 95       	ror	r26
 9c2:	f0 40       	sbci	r31, 0x00	; 0
 9c4:	53 95       	inc	r21
 9c6:	c9 f7       	brne	.-14     	; 0x9ba <__addsf3x+0x52>
 9c8:	7e f4       	brtc	.+30     	; 0x9e8 <__addsf3x+0x80>
 9ca:	1f 16       	cp	r1, r31
 9cc:	ba 0b       	sbc	r27, r26
 9ce:	62 0b       	sbc	r22, r18
 9d0:	73 0b       	sbc	r23, r19
 9d2:	84 0b       	sbc	r24, r20
 9d4:	ba f0       	brmi	.+46     	; 0xa04 <__addsf3x+0x9c>
 9d6:	91 50       	subi	r25, 0x01	; 1
 9d8:	a1 f0       	breq	.+40     	; 0xa02 <__addsf3x+0x9a>
 9da:	ff 0f       	add	r31, r31
 9dc:	bb 1f       	adc	r27, r27
 9de:	66 1f       	adc	r22, r22
 9e0:	77 1f       	adc	r23, r23
 9e2:	88 1f       	adc	r24, r24
 9e4:	c2 f7       	brpl	.-16     	; 0x9d6 <__addsf3x+0x6e>
 9e6:	0e c0       	rjmp	.+28     	; 0xa04 <__addsf3x+0x9c>
 9e8:	ba 0f       	add	r27, r26
 9ea:	62 1f       	adc	r22, r18
 9ec:	73 1f       	adc	r23, r19
 9ee:	84 1f       	adc	r24, r20
 9f0:	48 f4       	brcc	.+18     	; 0xa04 <__addsf3x+0x9c>
 9f2:	87 95       	ror	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b7 95       	ror	r27
 9fa:	f7 95       	ror	r31
 9fc:	9e 3f       	cpi	r25, 0xFE	; 254
 9fe:	08 f0       	brcs	.+2      	; 0xa02 <__addsf3x+0x9a>
 a00:	b0 cf       	rjmp	.-160    	; 0x962 <__addsf3+0x28>
 a02:	93 95       	inc	r25
 a04:	88 0f       	add	r24, r24
 a06:	08 f0       	brcs	.+2      	; 0xa0a <__addsf3x+0xa2>
 a08:	99 27       	eor	r25, r25
 a0a:	ee 0f       	add	r30, r30
 a0c:	97 95       	ror	r25
 a0e:	87 95       	ror	r24
 a10:	08 95       	ret

00000a12 <__fixsfsi>:
 a12:	0e 94 10 05 	call	0xa20	; 0xa20 <__fixunssfsi>
 a16:	68 94       	set
 a18:	b1 11       	cpse	r27, r1
 a1a:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_szero>
 a1e:	08 95       	ret

00000a20 <__fixunssfsi>:
 a20:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fp_splitA>
 a24:	88 f0       	brcs	.+34     	; 0xa48 <__fixunssfsi+0x28>
 a26:	9f 57       	subi	r25, 0x7F	; 127
 a28:	98 f0       	brcs	.+38     	; 0xa50 <__fixunssfsi+0x30>
 a2a:	b9 2f       	mov	r27, r25
 a2c:	99 27       	eor	r25, r25
 a2e:	b7 51       	subi	r27, 0x17	; 23
 a30:	b0 f0       	brcs	.+44     	; 0xa5e <__fixunssfsi+0x3e>
 a32:	e1 f0       	breq	.+56     	; 0xa6c <__fixunssfsi+0x4c>
 a34:	66 0f       	add	r22, r22
 a36:	77 1f       	adc	r23, r23
 a38:	88 1f       	adc	r24, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	1a f0       	brmi	.+6      	; 0xa44 <__fixunssfsi+0x24>
 a3e:	ba 95       	dec	r27
 a40:	c9 f7       	brne	.-14     	; 0xa34 <__fixunssfsi+0x14>
 a42:	14 c0       	rjmp	.+40     	; 0xa6c <__fixunssfsi+0x4c>
 a44:	b1 30       	cpi	r27, 0x01	; 1
 a46:	91 f0       	breq	.+36     	; 0xa6c <__fixunssfsi+0x4c>
 a48:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__fp_zero>
 a4c:	b1 e0       	ldi	r27, 0x01	; 1
 a4e:	08 95       	ret
 a50:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_zero>
 a54:	67 2f       	mov	r22, r23
 a56:	78 2f       	mov	r23, r24
 a58:	88 27       	eor	r24, r24
 a5a:	b8 5f       	subi	r27, 0xF8	; 248
 a5c:	39 f0       	breq	.+14     	; 0xa6c <__fixunssfsi+0x4c>
 a5e:	b9 3f       	cpi	r27, 0xF9	; 249
 a60:	cc f3       	brlt	.-14     	; 0xa54 <__fixunssfsi+0x34>
 a62:	86 95       	lsr	r24
 a64:	77 95       	ror	r23
 a66:	67 95       	ror	r22
 a68:	b3 95       	inc	r27
 a6a:	d9 f7       	brne	.-10     	; 0xa62 <__fixunssfsi+0x42>
 a6c:	3e f4       	brtc	.+14     	; 0xa7c <__fixunssfsi+0x5c>
 a6e:	90 95       	com	r25
 a70:	80 95       	com	r24
 a72:	70 95       	com	r23
 a74:	61 95       	neg	r22
 a76:	7f 4f       	sbci	r23, 0xFF	; 255
 a78:	8f 4f       	sbci	r24, 0xFF	; 255
 a7a:	9f 4f       	sbci	r25, 0xFF	; 255
 a7c:	08 95       	ret

00000a7e <__floatunsisf>:
 a7e:	e8 94       	clt
 a80:	09 c0       	rjmp	.+18     	; 0xa94 <__floatsisf+0x12>

00000a82 <__floatsisf>:
 a82:	97 fb       	bst	r25, 7
 a84:	3e f4       	brtc	.+14     	; 0xa94 <__floatsisf+0x12>
 a86:	90 95       	com	r25
 a88:	80 95       	com	r24
 a8a:	70 95       	com	r23
 a8c:	61 95       	neg	r22
 a8e:	7f 4f       	sbci	r23, 0xFF	; 255
 a90:	8f 4f       	sbci	r24, 0xFF	; 255
 a92:	9f 4f       	sbci	r25, 0xFF	; 255
 a94:	99 23       	and	r25, r25
 a96:	a9 f0       	breq	.+42     	; 0xac2 <__floatsisf+0x40>
 a98:	f9 2f       	mov	r31, r25
 a9a:	96 e9       	ldi	r25, 0x96	; 150
 a9c:	bb 27       	eor	r27, r27
 a9e:	93 95       	inc	r25
 aa0:	f6 95       	lsr	r31
 aa2:	87 95       	ror	r24
 aa4:	77 95       	ror	r23
 aa6:	67 95       	ror	r22
 aa8:	b7 95       	ror	r27
 aaa:	f1 11       	cpse	r31, r1
 aac:	f8 cf       	rjmp	.-16     	; 0xa9e <__floatsisf+0x1c>
 aae:	fa f4       	brpl	.+62     	; 0xaee <__floatsisf+0x6c>
 ab0:	bb 0f       	add	r27, r27
 ab2:	11 f4       	brne	.+4      	; 0xab8 <__floatsisf+0x36>
 ab4:	60 ff       	sbrs	r22, 0
 ab6:	1b c0       	rjmp	.+54     	; 0xaee <__floatsisf+0x6c>
 ab8:	6f 5f       	subi	r22, 0xFF	; 255
 aba:	7f 4f       	sbci	r23, 0xFF	; 255
 abc:	8f 4f       	sbci	r24, 0xFF	; 255
 abe:	9f 4f       	sbci	r25, 0xFF	; 255
 ac0:	16 c0       	rjmp	.+44     	; 0xaee <__floatsisf+0x6c>
 ac2:	88 23       	and	r24, r24
 ac4:	11 f0       	breq	.+4      	; 0xaca <__floatsisf+0x48>
 ac6:	96 e9       	ldi	r25, 0x96	; 150
 ac8:	11 c0       	rjmp	.+34     	; 0xaec <__floatsisf+0x6a>
 aca:	77 23       	and	r23, r23
 acc:	21 f0       	breq	.+8      	; 0xad6 <__floatsisf+0x54>
 ace:	9e e8       	ldi	r25, 0x8E	; 142
 ad0:	87 2f       	mov	r24, r23
 ad2:	76 2f       	mov	r23, r22
 ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__floatsisf+0x5e>
 ad6:	66 23       	and	r22, r22
 ad8:	71 f0       	breq	.+28     	; 0xaf6 <__floatsisf+0x74>
 ada:	96 e8       	ldi	r25, 0x86	; 134
 adc:	86 2f       	mov	r24, r22
 ade:	70 e0       	ldi	r23, 0x00	; 0
 ae0:	60 e0       	ldi	r22, 0x00	; 0
 ae2:	2a f0       	brmi	.+10     	; 0xaee <__floatsisf+0x6c>
 ae4:	9a 95       	dec	r25
 ae6:	66 0f       	add	r22, r22
 ae8:	77 1f       	adc	r23, r23
 aea:	88 1f       	adc	r24, r24
 aec:	da f7       	brpl	.-10     	; 0xae4 <__floatsisf+0x62>
 aee:	88 0f       	add	r24, r24
 af0:	96 95       	lsr	r25
 af2:	87 95       	ror	r24
 af4:	97 f9       	bld	r25, 7
 af6:	08 95       	ret

00000af8 <__fp_inf>:
 af8:	97 f9       	bld	r25, 7
 afa:	9f 67       	ori	r25, 0x7F	; 127
 afc:	80 e8       	ldi	r24, 0x80	; 128
 afe:	70 e0       	ldi	r23, 0x00	; 0
 b00:	60 e0       	ldi	r22, 0x00	; 0
 b02:	08 95       	ret

00000b04 <__fp_nan>:
 b04:	9f ef       	ldi	r25, 0xFF	; 255
 b06:	80 ec       	ldi	r24, 0xC0	; 192
 b08:	08 95       	ret

00000b0a <__fp_pscA>:
 b0a:	00 24       	eor	r0, r0
 b0c:	0a 94       	dec	r0
 b0e:	16 16       	cp	r1, r22
 b10:	17 06       	cpc	r1, r23
 b12:	18 06       	cpc	r1, r24
 b14:	09 06       	cpc	r0, r25
 b16:	08 95       	ret

00000b18 <__fp_pscB>:
 b18:	00 24       	eor	r0, r0
 b1a:	0a 94       	dec	r0
 b1c:	12 16       	cp	r1, r18
 b1e:	13 06       	cpc	r1, r19
 b20:	14 06       	cpc	r1, r20
 b22:	05 06       	cpc	r0, r21
 b24:	08 95       	ret

00000b26 <__fp_round>:
 b26:	09 2e       	mov	r0, r25
 b28:	03 94       	inc	r0
 b2a:	00 0c       	add	r0, r0
 b2c:	11 f4       	brne	.+4      	; 0xb32 <__fp_round+0xc>
 b2e:	88 23       	and	r24, r24
 b30:	52 f0       	brmi	.+20     	; 0xb46 <__fp_round+0x20>
 b32:	bb 0f       	add	r27, r27
 b34:	40 f4       	brcc	.+16     	; 0xb46 <__fp_round+0x20>
 b36:	bf 2b       	or	r27, r31
 b38:	11 f4       	brne	.+4      	; 0xb3e <__fp_round+0x18>
 b3a:	60 ff       	sbrs	r22, 0
 b3c:	04 c0       	rjmp	.+8      	; 0xb46 <__fp_round+0x20>
 b3e:	6f 5f       	subi	r22, 0xFF	; 255
 b40:	7f 4f       	sbci	r23, 0xFF	; 255
 b42:	8f 4f       	sbci	r24, 0xFF	; 255
 b44:	9f 4f       	sbci	r25, 0xFF	; 255
 b46:	08 95       	ret

00000b48 <__fp_split3>:
 b48:	57 fd       	sbrc	r21, 7
 b4a:	90 58       	subi	r25, 0x80	; 128
 b4c:	44 0f       	add	r20, r20
 b4e:	55 1f       	adc	r21, r21
 b50:	59 f0       	breq	.+22     	; 0xb68 <__fp_splitA+0x10>
 b52:	5f 3f       	cpi	r21, 0xFF	; 255
 b54:	71 f0       	breq	.+28     	; 0xb72 <__fp_splitA+0x1a>
 b56:	47 95       	ror	r20

00000b58 <__fp_splitA>:
 b58:	88 0f       	add	r24, r24
 b5a:	97 fb       	bst	r25, 7
 b5c:	99 1f       	adc	r25, r25
 b5e:	61 f0       	breq	.+24     	; 0xb78 <__fp_splitA+0x20>
 b60:	9f 3f       	cpi	r25, 0xFF	; 255
 b62:	79 f0       	breq	.+30     	; 0xb82 <__fp_splitA+0x2a>
 b64:	87 95       	ror	r24
 b66:	08 95       	ret
 b68:	12 16       	cp	r1, r18
 b6a:	13 06       	cpc	r1, r19
 b6c:	14 06       	cpc	r1, r20
 b6e:	55 1f       	adc	r21, r21
 b70:	f2 cf       	rjmp	.-28     	; 0xb56 <__fp_split3+0xe>
 b72:	46 95       	lsr	r20
 b74:	f1 df       	rcall	.-30     	; 0xb58 <__fp_splitA>
 b76:	08 c0       	rjmp	.+16     	; 0xb88 <__fp_splitA+0x30>
 b78:	16 16       	cp	r1, r22
 b7a:	17 06       	cpc	r1, r23
 b7c:	18 06       	cpc	r1, r24
 b7e:	99 1f       	adc	r25, r25
 b80:	f1 cf       	rjmp	.-30     	; 0xb64 <__fp_splitA+0xc>
 b82:	86 95       	lsr	r24
 b84:	71 05       	cpc	r23, r1
 b86:	61 05       	cpc	r22, r1
 b88:	08 94       	sec
 b8a:	08 95       	ret

00000b8c <__fp_zero>:
 b8c:	e8 94       	clt

00000b8e <__fp_szero>:
 b8e:	bb 27       	eor	r27, r27
 b90:	66 27       	eor	r22, r22
 b92:	77 27       	eor	r23, r23
 b94:	cb 01       	movw	r24, r22
 b96:	97 f9       	bld	r25, 7
 b98:	08 95       	ret

00000b9a <__mulsf3>:
 b9a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__mulsf3x>
 b9e:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_round>
 ba2:	0e 94 85 05 	call	0xb0a	; 0xb0a <__fp_pscA>
 ba6:	38 f0       	brcs	.+14     	; 0xbb6 <__mulsf3+0x1c>
 ba8:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fp_pscB>
 bac:	20 f0       	brcs	.+8      	; 0xbb6 <__mulsf3+0x1c>
 bae:	95 23       	and	r25, r21
 bb0:	11 f0       	breq	.+4      	; 0xbb6 <__mulsf3+0x1c>
 bb2:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_inf>
 bb6:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_nan>
 bba:	11 24       	eor	r1, r1
 bbc:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_szero>

00000bc0 <__mulsf3x>:
 bc0:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fp_split3>
 bc4:	70 f3       	brcs	.-36     	; 0xba2 <__mulsf3+0x8>

00000bc6 <__mulsf3_pse>:
 bc6:	95 9f       	mul	r25, r21
 bc8:	c1 f3       	breq	.-16     	; 0xbba <__mulsf3+0x20>
 bca:	95 0f       	add	r25, r21
 bcc:	50 e0       	ldi	r21, 0x00	; 0
 bce:	55 1f       	adc	r21, r21
 bd0:	62 9f       	mul	r22, r18
 bd2:	f0 01       	movw	r30, r0
 bd4:	72 9f       	mul	r23, r18
 bd6:	bb 27       	eor	r27, r27
 bd8:	f0 0d       	add	r31, r0
 bda:	b1 1d       	adc	r27, r1
 bdc:	63 9f       	mul	r22, r19
 bde:	aa 27       	eor	r26, r26
 be0:	f0 0d       	add	r31, r0
 be2:	b1 1d       	adc	r27, r1
 be4:	aa 1f       	adc	r26, r26
 be6:	64 9f       	mul	r22, r20
 be8:	66 27       	eor	r22, r22
 bea:	b0 0d       	add	r27, r0
 bec:	a1 1d       	adc	r26, r1
 bee:	66 1f       	adc	r22, r22
 bf0:	82 9f       	mul	r24, r18
 bf2:	22 27       	eor	r18, r18
 bf4:	b0 0d       	add	r27, r0
 bf6:	a1 1d       	adc	r26, r1
 bf8:	62 1f       	adc	r22, r18
 bfa:	73 9f       	mul	r23, r19
 bfc:	b0 0d       	add	r27, r0
 bfe:	a1 1d       	adc	r26, r1
 c00:	62 1f       	adc	r22, r18
 c02:	83 9f       	mul	r24, r19
 c04:	a0 0d       	add	r26, r0
 c06:	61 1d       	adc	r22, r1
 c08:	22 1f       	adc	r18, r18
 c0a:	74 9f       	mul	r23, r20
 c0c:	33 27       	eor	r19, r19
 c0e:	a0 0d       	add	r26, r0
 c10:	61 1d       	adc	r22, r1
 c12:	23 1f       	adc	r18, r19
 c14:	84 9f       	mul	r24, r20
 c16:	60 0d       	add	r22, r0
 c18:	21 1d       	adc	r18, r1
 c1a:	82 2f       	mov	r24, r18
 c1c:	76 2f       	mov	r23, r22
 c1e:	6a 2f       	mov	r22, r26
 c20:	11 24       	eor	r1, r1
 c22:	9f 57       	subi	r25, 0x7F	; 127
 c24:	50 40       	sbci	r21, 0x00	; 0
 c26:	9a f0       	brmi	.+38     	; 0xc4e <__mulsf3_pse+0x88>
 c28:	f1 f0       	breq	.+60     	; 0xc66 <__mulsf3_pse+0xa0>
 c2a:	88 23       	and	r24, r24
 c2c:	4a f0       	brmi	.+18     	; 0xc40 <__mulsf3_pse+0x7a>
 c2e:	ee 0f       	add	r30, r30
 c30:	ff 1f       	adc	r31, r31
 c32:	bb 1f       	adc	r27, r27
 c34:	66 1f       	adc	r22, r22
 c36:	77 1f       	adc	r23, r23
 c38:	88 1f       	adc	r24, r24
 c3a:	91 50       	subi	r25, 0x01	; 1
 c3c:	50 40       	sbci	r21, 0x00	; 0
 c3e:	a9 f7       	brne	.-22     	; 0xc2a <__mulsf3_pse+0x64>
 c40:	9e 3f       	cpi	r25, 0xFE	; 254
 c42:	51 05       	cpc	r21, r1
 c44:	80 f0       	brcs	.+32     	; 0xc66 <__mulsf3_pse+0xa0>
 c46:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_inf>
 c4a:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_szero>
 c4e:	5f 3f       	cpi	r21, 0xFF	; 255
 c50:	e4 f3       	brlt	.-8      	; 0xc4a <__mulsf3_pse+0x84>
 c52:	98 3e       	cpi	r25, 0xE8	; 232
 c54:	d4 f3       	brlt	.-12     	; 0xc4a <__mulsf3_pse+0x84>
 c56:	86 95       	lsr	r24
 c58:	77 95       	ror	r23
 c5a:	67 95       	ror	r22
 c5c:	b7 95       	ror	r27
 c5e:	f7 95       	ror	r31
 c60:	e7 95       	ror	r30
 c62:	9f 5f       	subi	r25, 0xFF	; 255
 c64:	c1 f7       	brne	.-16     	; 0xc56 <__mulsf3_pse+0x90>
 c66:	fe 2b       	or	r31, r30
 c68:	88 0f       	add	r24, r24
 c6a:	91 1d       	adc	r25, r1
 c6c:	96 95       	lsr	r25
 c6e:	87 95       	ror	r24
 c70:	97 f9       	bld	r25, 7
 c72:	08 95       	ret

00000c74 <atoi>:
 c74:	fc 01       	movw	r30, r24
 c76:	88 27       	eor	r24, r24
 c78:	99 27       	eor	r25, r25
 c7a:	e8 94       	clt
 c7c:	21 91       	ld	r18, Z+
 c7e:	20 32       	cpi	r18, 0x20	; 32
 c80:	e9 f3       	breq	.-6      	; 0xc7c <atoi+0x8>
 c82:	29 30       	cpi	r18, 0x09	; 9
 c84:	10 f0       	brcs	.+4      	; 0xc8a <atoi+0x16>
 c86:	2e 30       	cpi	r18, 0x0E	; 14
 c88:	c8 f3       	brcs	.-14     	; 0xc7c <atoi+0x8>
 c8a:	2b 32       	cpi	r18, 0x2B	; 43
 c8c:	41 f0       	breq	.+16     	; 0xc9e <atoi+0x2a>
 c8e:	2d 32       	cpi	r18, 0x2D	; 45
 c90:	39 f4       	brne	.+14     	; 0xca0 <atoi+0x2c>
 c92:	68 94       	set
 c94:	04 c0       	rjmp	.+8      	; 0xc9e <atoi+0x2a>
 c96:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__mulhi_const_10>
 c9a:	82 0f       	add	r24, r18
 c9c:	91 1d       	adc	r25, r1
 c9e:	21 91       	ld	r18, Z+
 ca0:	20 53       	subi	r18, 0x30	; 48
 ca2:	2a 30       	cpi	r18, 0x0A	; 10
 ca4:	c0 f3       	brcs	.-16     	; 0xc96 <atoi+0x22>
 ca6:	1e f4       	brtc	.+6      	; 0xcae <atoi+0x3a>
 ca8:	90 95       	com	r25
 caa:	81 95       	neg	r24
 cac:	9f 4f       	sbci	r25, 0xFF	; 255
 cae:	08 95       	ret

00000cb0 <__itoa_ncheck>:
 cb0:	bb 27       	eor	r27, r27
 cb2:	4a 30       	cpi	r20, 0x0A	; 10
 cb4:	31 f4       	brne	.+12     	; 0xcc2 <__itoa_ncheck+0x12>
 cb6:	99 23       	and	r25, r25
 cb8:	22 f4       	brpl	.+8      	; 0xcc2 <__itoa_ncheck+0x12>
 cba:	bd e2       	ldi	r27, 0x2D	; 45
 cbc:	90 95       	com	r25
 cbe:	81 95       	neg	r24
 cc0:	9f 4f       	sbci	r25, 0xFF	; 255
 cc2:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__utoa_common>

00000cc6 <__mulhi_const_10>:
 cc6:	7a e0       	ldi	r23, 0x0A	; 10
 cc8:	97 9f       	mul	r25, r23
 cca:	90 2d       	mov	r25, r0
 ccc:	87 9f       	mul	r24, r23
 cce:	80 2d       	mov	r24, r0
 cd0:	91 0d       	add	r25, r1
 cd2:	11 24       	eor	r1, r1
 cd4:	08 95       	ret

00000cd6 <__utoa_ncheck>:
 cd6:	bb 27       	eor	r27, r27

00000cd8 <__utoa_common>:
 cd8:	fb 01       	movw	r30, r22
 cda:	55 27       	eor	r21, r21
 cdc:	aa 27       	eor	r26, r26
 cde:	88 0f       	add	r24, r24
 ce0:	99 1f       	adc	r25, r25
 ce2:	aa 1f       	adc	r26, r26
 ce4:	a4 17       	cp	r26, r20
 ce6:	10 f0       	brcs	.+4      	; 0xcec <__utoa_common+0x14>
 ce8:	a4 1b       	sub	r26, r20
 cea:	83 95       	inc	r24
 cec:	50 51       	subi	r21, 0x10	; 16
 cee:	b9 f7       	brne	.-18     	; 0xcde <__utoa_common+0x6>
 cf0:	a0 5d       	subi	r26, 0xD0	; 208
 cf2:	aa 33       	cpi	r26, 0x3A	; 58
 cf4:	08 f0       	brcs	.+2      	; 0xcf8 <__utoa_common+0x20>
 cf6:	a9 5d       	subi	r26, 0xD9	; 217
 cf8:	a1 93       	st	Z+, r26
 cfa:	00 97       	sbiw	r24, 0x00	; 0
 cfc:	79 f7       	brne	.-34     	; 0xcdc <__utoa_common+0x4>
 cfe:	b1 11       	cpse	r27, r1
 d00:	b1 93       	st	Z+, r27
 d02:	11 92       	st	Z+, r1
 d04:	cb 01       	movw	r24, r22
 d06:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <strrev>

00000d0a <strrev>:
 d0a:	dc 01       	movw	r26, r24
 d0c:	fc 01       	movw	r30, r24
 d0e:	67 2f       	mov	r22, r23
 d10:	71 91       	ld	r23, Z+
 d12:	77 23       	and	r23, r23
 d14:	e1 f7       	brne	.-8      	; 0xd0e <strrev+0x4>
 d16:	32 97       	sbiw	r30, 0x02	; 2
 d18:	04 c0       	rjmp	.+8      	; 0xd22 <strrev+0x18>
 d1a:	7c 91       	ld	r23, X
 d1c:	6d 93       	st	X+, r22
 d1e:	70 83       	st	Z, r23
 d20:	62 91       	ld	r22, -Z
 d22:	ae 17       	cp	r26, r30
 d24:	bf 07       	cpc	r27, r31
 d26:	c8 f3       	brcs	.-14     	; 0xd1a <strrev+0x10>
 d28:	08 95       	ret

00000d2a <_exit>:
 d2a:	f8 94       	cli

00000d2c <__stop_program>:
 d2c:	ff cf       	rjmp	.-2      	; 0xd2c <__stop_program>
