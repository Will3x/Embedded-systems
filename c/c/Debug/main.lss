
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000c86  00000d1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  0080012c  0080012c  00000d46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c10  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4a  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c9b  00000000  00000000  0000397a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00004618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ab  00000000  00000000  00004928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000940  00000000  00000000  00004fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005913  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 36       	cpi	r26, 0x64	; 100
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a3 03 	call	0x746	; 0x746 <main>
  9e:	0c 94 41 06 	jmp	0xc82	; 0xc82 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
  b0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <SCH_tasks_G>
  b4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	ee e2       	ldi	r30, 0x2E	; 46
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	82 2f       	mov	r24, r18
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e2 5d       	subi	r30, 0xD2	; 210
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
 104:	16 82       	std	Z+6, r1	; 0x06
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e2 5d       	subi	r30, 0xD2	; 210
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
 12a:	16 82       	std	Z+6, r1	; 0x06
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ce e2       	ldi	r28, 0x2E	; 46
 13c:	d1 e0       	ldi	r29, 0x01	; 1
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 14e:	09 95       	icall
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
 178:	cf 93       	push	r28
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	ee e2       	ldi	r30, 0x2E	; 46
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	21 e5       	ldi	r18, 0x51	; 81
 1c8:	31 e0       	ldi	r19, 0x01	; 1
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_receive>:
#include "sensors.h"
#include "serial.h"

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1<<RXC0)));
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <USART_receive+0x4>
	return UDR0;
 222:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 226:	08 95       	ret

00000228 <USART_send>:

void USART_send(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 228:	e0 ec       	ldi	r30, 0xC0	; 192
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	90 81       	ld	r25, Z
 22e:	95 ff       	sbrs	r25, 5
 230:	fd cf       	rjmp	.-6      	; 0x22c <USART_send+0x4>
	UDR0 = data;
 232:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 236:	08 95       	ret

00000238 <USART_putstring>:
}

void USART_putstring(char* StringPtr)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <USART_putstring+0x18>
 244:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 246:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
	UDR0 = data;
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00){
 24a:	89 91       	ld	r24, Y+
 24c:	81 11       	cpse	r24, r1
 24e:	fb cf       	rjmp	.-10     	; 0x246 <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <newLine>:

void newLine()
{
	USART_send('\r');
 256:	8d e0       	ldi	r24, 0x0D	; 13
 258:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
	USART_send('\n');
 25c:	8a e0       	ldi	r24, 0x0A	; 10
 25e:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 262:	08 95       	ret

00000264 <read_adc>:
}

uint16_t read_adc(uint8_t channel)
{
	ADMUX &= 0xF0;                    //Clear the older channel that was read
 264:	ec e7       	ldi	r30, 0x7C	; 124
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	90 81       	ld	r25, Z
 26a:	90 7f       	andi	r25, 0xF0	; 240
 26c:	90 83       	st	Z, r25
	ADMUX |= channel;                 //Defines the new ADC channel to be read
 26e:	90 81       	ld	r25, Z
 270:	89 2b       	or	r24, r25
 272:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);              //Starts a new conversion
 274:	ea e7       	ldi	r30, 0x7A	; 122
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));        //Wait until the conversion is done
 27e:	80 81       	ld	r24, Z
 280:	86 fd       	sbrc	r24, 6
 282:	fd cf       	rjmp	.-6      	; 0x27e <read_adc+0x1a>
	return ADCW;                      //Returns the ADC value of the chosen channel
 284:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 288:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 28c:	08 95       	ret

0000028e <distanceStill>:
{
	x -= 48;
	y -= 48;
	unsigned pow = 10;
	return (y * pow) + x;
}
 28e:	5b 9a       	sbi	0x0b, 3	; 11
 290:	85 e3       	ldi	r24, 0x35	; 53
 292:	8a 95       	dec	r24
 294:	f1 f7       	brne	.-4      	; 0x292 <distanceStill+0x4>
 296:	00 00       	nop
 298:	5b 98       	cbi	0x0b, 3	; 11
 29a:	4a 9b       	sbis	0x09, 2	; 9
 29c:	fe cf       	rjmp	.-4      	; 0x29a <distanceStill+0xc>
 29e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2a2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2a6:	4a 99       	sbic	0x09, 2	; 9
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <distanceStill+0x18>
 2aa:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2ae:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__floatunsisf>
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	40 e8       	ldi	r20, 0x80	; 128
 2c0:	5e e3       	ldi	r21, 0x3E	; 62
 2c2:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__mulsf3>
 2c6:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
 2ca:	dc 01       	movw	r26, r24
 2cc:	cb 01       	movw	r24, r22
 2ce:	4a e0       	ldi	r20, 0x0A	; 10
 2d0:	6a e5       	ldi	r22, 0x5A	; 90
 2d2:	71 e0       	ldi	r23, 0x01	; 1
 2d4:	0e 94 04 06 	call	0xc08	; 0xc08 <__itoa_ncheck>
 2d8:	08 95       	ret

000002da <upDown>:
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	81 e5       	ldi	r24, 0x51	; 81
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <atoi>
 2ea:	ec 01       	movw	r28, r24
 2ec:	8f e5       	ldi	r24, 0x5F	; 95
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 e6 05 	call	0xbcc	; 0xbcc <atoi>
 2f4:	8c 01       	movw	r16, r24
 2f6:	0e 94 47 01 	call	0x28e	; 0x28e <distanceStill>
 2fa:	8a e5       	ldi	r24, 0x5A	; 90
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 e6 05 	call	0xbcc	; 0xbcc <atoi>
 302:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 306:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 30a:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <distance_up+0x1>
 30e:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <distance_up>
 312:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <LDR_down>
 316:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <LDR_down+0x1>
 31a:	c4 17       	cp	r28, r20
 31c:	d5 07       	cpc	r29, r21
 31e:	3c f4       	brge	.+14     	; 0x32e <upDown+0x54>
 320:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_down>
 324:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_down+0x1>
 328:	04 17       	cp	r16, r20
 32a:	15 07       	cpc	r17, r21
 32c:	3c f0       	brlt	.+14     	; 0x33c <upDown+0x62>
 32e:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 332:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 336:	45 2b       	or	r20, r21
 338:	71 f0       	breq	.+28     	; 0x356 <upDown+0x7c>
 33a:	6c c0       	rjmp	.+216    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 33c:	a9 01       	movw	r20, r18
 33e:	4f 5f       	subi	r20, 0xFF	; 255
 340:	5f 4f       	sbci	r21, 0xFF	; 255
 342:	48 17       	cp	r20, r24
 344:	59 07       	cpc	r21, r25
 346:	34 f5       	brge	.+76     	; 0x394 <upDown+0xba>
 348:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 34c:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 350:	45 2b       	or	r20, r21
 352:	09 f4       	brne	.+2      	; 0x356 <upDown+0x7c>
 354:	66 c0       	rjmp	.+204    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 356:	2a 98       	cbi	0x05, 2	; 5
 358:	28 9a       	sbi	0x05, 0	; 5
 35a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <distance_down>
 35e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <distance_down+0x1>
 362:	28 17       	cp	r18, r24
 364:	39 07       	cpc	r19, r25
 366:	0c f0       	brlt	.+2      	; 0x36a <upDown+0x90>
 368:	7b c0       	rjmp	.+246    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 36a:	29 9a       	sbi	0x05, 1	; 5
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	81 ee       	ldi	r24, 0xE1	; 225
 370:	94 e0       	ldi	r25, 0x04	; 4
 372:	21 50       	subi	r18, 0x01	; 1
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	90 40       	sbci	r25, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <upDown+0x98>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <upDown+0xa2>
 37c:	00 00       	nop
 37e:	29 98       	cbi	0x05, 1	; 5
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	81 ee       	ldi	r24, 0xE1	; 225
 384:	94 e0       	ldi	r25, 0x04	; 4
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <upDown+0xac>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <upDown+0xb6>
 390:	00 00       	nop
 392:	66 c0       	rjmp	.+204    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 394:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <LDR_up>
 398:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <LDR_up+0x1>
 39c:	4c 17       	cp	r20, r28
 39e:	5d 07       	cpc	r21, r29
 3a0:	3c f4       	brge	.+14     	; 0x3b0 <upDown+0xd6>
 3a2:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_up>
 3a6:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_up+0x1>
 3aa:	40 17       	cp	r20, r16
 3ac:	51 07       	cpc	r21, r17
 3ae:	3c f0       	brlt	.+14     	; 0x3be <upDown+0xe4>
 3b0:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 3b4:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 3b8:	45 2b       	or	r20, r21
 3ba:	d9 f5       	brne	.+118    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3bc:	0d c0       	rjmp	.+26     	; 0x3d8 <upDown+0xfe>
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	31 09       	sbc	r19, r1
 3c2:	82 17       	cp	r24, r18
 3c4:	93 07       	cpc	r25, r19
 3c6:	0c f0       	brlt	.+2      	; 0x3ca <upDown+0xf0>
 3c8:	4b c0       	rjmp	.+150    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 3ca:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <__data_end>
 3ce:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <__data_end+0x1>
 3d2:	23 2b       	or	r18, r19
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <upDown+0xfe>
 3d6:	44 c0       	rjmp	.+136    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 3d8:	28 98       	cbi	0x05, 0	; 5
 3da:	2a 9a       	sbi	0x05, 2	; 5
 3dc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <distance_up>
 3e0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <distance_up+0x1>
 3e4:	82 17       	cp	r24, r18
 3e6:	93 07       	cpc	r25, r19
 3e8:	dc f5       	brge	.+118    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 3ea:	29 9a       	sbi	0x05, 1	; 5
 3ec:	2f ef       	ldi	r18, 0xFF	; 255
 3ee:	81 ee       	ldi	r24, 0xE1	; 225
 3f0:	94 e0       	ldi	r25, 0x04	; 4
 3f2:	21 50       	subi	r18, 0x01	; 1
 3f4:	80 40       	sbci	r24, 0x00	; 0
 3f6:	90 40       	sbci	r25, 0x00	; 0
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <upDown+0x118>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <upDown+0x122>
 3fc:	00 00       	nop
 3fe:	29 98       	cbi	0x05, 1	; 5
 400:	2f ef       	ldi	r18, 0xFF	; 255
 402:	81 ee       	ldi	r24, 0xE1	; 225
 404:	94 e0       	ldi	r25, 0x04	; 4
 406:	21 50       	subi	r18, 0x01	; 1
 408:	80 40       	sbci	r24, 0x00	; 0
 40a:	90 40       	sbci	r25, 0x00	; 0
 40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 410:	00 00       	nop
 412:	26 c0       	rjmp	.+76     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 414:	a9 01       	movw	r20, r18
 416:	4f 5f       	subi	r20, 0xFF	; 255
 418:	5f 4f       	sbci	r21, 0xFF	; 255
 41a:	48 17       	cp	r20, r24
 41c:	59 07       	cpc	r21, r25
 41e:	7c f4       	brge	.+30     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 420:	9a cf       	rjmp	.-204    	; 0x356 <upDown+0x7c>
 422:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <LDR_up>
 426:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <LDR_up+0x1>
 42a:	4c 17       	cp	r20, r28
 42c:	5d 07       	cpc	r21, r29
 42e:	a4 f6       	brge	.-88     	; 0x3d8 <upDown+0xfe>
 430:	0e c0       	rjmp	.+28     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 432:	21 50       	subi	r18, 0x01	; 1
 434:	31 09       	sbc	r19, r1
 436:	82 17       	cp	r24, r18
 438:	93 07       	cpc	r25, r19
 43a:	74 f2       	brlt	.-100    	; 0x3d8 <upDown+0xfe>
 43c:	11 c0       	rjmp	.+34     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 43e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <LDR_up>
 442:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <LDR_up+0x1>
 446:	4c 17       	cp	r20, r28
 448:	5d 07       	cpc	r21, r29
 44a:	9c f7       	brge	.-26     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 44c:	aa cf       	rjmp	.-172    	; 0x3a2 <upDown+0xc8>
 44e:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_up>
 452:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_up+0x1>
 456:	40 17       	cp	r20, r16
 458:	51 07       	cpc	r21, r17
 45a:	0c f0       	brlt	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	bd cf       	rjmp	.-134    	; 0x3d8 <upDown+0xfe>
 45e:	af cf       	rjmp	.-162    	; 0x3be <upDown+0xe4>
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	08 95       	ret

0000046a <combine3>:
	x -= 48;
	y -= 48;
	z -= 48;
	unsigned pow1 = 10;
	unsigned pow2 = 100;
	return (z * pow2) + (y * pow1) + x;
 46a:	40 53       	subi	r20, 0x30	; 48
 46c:	51 09       	sbc	r21, r1
 46e:	e4 e6       	ldi	r30, 0x64	; 100
 470:	e4 9f       	mul	r30, r20
 472:	90 01       	movw	r18, r0
 474:	e5 9f       	mul	r30, r21
 476:	30 0d       	add	r19, r0
 478:	11 24       	eor	r1, r1
 47a:	82 0f       	add	r24, r18
 47c:	93 1f       	adc	r25, r19
 47e:	c0 97       	sbiw	r24, 0x30	; 48
 480:	60 53       	subi	r22, 0x30	; 48
 482:	71 09       	sbc	r23, r1
 484:	9b 01       	movw	r18, r22
 486:	22 0f       	add	r18, r18
 488:	33 1f       	adc	r19, r19
 48a:	66 0f       	add	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	66 0f       	add	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	62 0f       	add	r22, r18
 498:	73 1f       	adc	r23, r19
}
 49a:	86 0f       	add	r24, r22
 49c:	97 1f       	adc	r25, r23
 49e:	08 95       	ret

000004a0 <__vector_18>:

ISR ( USART_RX_vect )
{
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	2f 93       	push	r18
 4b0:	3f 93       	push	r19
 4b2:	4f 93       	push	r20
 4b4:	5f 93       	push	r21
 4b6:	6f 93       	push	r22
 4b8:	7f 93       	push	r23
 4ba:	8f 93       	push	r24
 4bc:	9f 93       	push	r25
 4be:	af 93       	push	r26
 4c0:	bf 93       	push	r27
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	ef 93       	push	r30
 4c8:	ff 93       	push	r31
	unsigned char ReceivedByte;
	ReceivedByte = UDR0 ;						// Set ReceivedByte to the received byte from the controller (GUI)
 4ca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	switch(ReceivedByte)
 4ce:	83 33       	cpi	r24, 0x33	; 51
 4d0:	39 f1       	breq	.+78     	; 0x520 <__vector_18+0x80>
 4d2:	28 f4       	brcc	.+10     	; 0x4de <__vector_18+0x3e>
 4d4:	81 33       	cpi	r24, 0x31	; 49
 4d6:	51 f0       	breq	.+20     	; 0x4ec <__vector_18+0x4c>
 4d8:	82 33       	cpi	r24, 0x32	; 50
 4da:	a9 f0       	breq	.+42     	; 0x506 <__vector_18+0x66>
 4dc:	b5 c0       	rjmp	.+362    	; 0x648 <__vector_18+0x1a8>
 4de:	87 33       	cpi	r24, 0x37	; 55
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <__vector_18+0x44>
 4e2:	8b c0       	rjmp	.+278    	; 0x5fa <__vector_18+0x15a>
 4e4:	88 33       	cpi	r24, 0x38	; 56
 4e6:	09 f4       	brne	.+2      	; 0x4ea <__vector_18+0x4a>
 4e8:	9f c0       	rjmp	.+318    	; 0x628 <__vector_18+0x188>
 4ea:	ae c0       	rjmp	.+348    	; 0x648 <__vector_18+0x1a8>
	{
		case '1':								// 1 = Shut the sunshade // Red
			manual = 1;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 4f4:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			distance_manual = 5;
 4f8:	85 e0       	ldi	r24, 0x05	; 5
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 500:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 504:	a1 c0       	rjmp	.+322    	; 0x648 <__vector_18+0x1a8>
			
		case '2':								// 2 = Open the sunshade // Green
			manual = 1;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 50e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			distance_manual = 10;
 512:	8a e0       	ldi	r24, 0x0A	; 10
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 51a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 51e:	94 c0       	rjmp	.+296    	; 0x648 <__vector_18+0x1a8>
			
		case '3':								// 3 = set
			manual = 0;
 520:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__data_end+0x1>
 524:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
			temp_down = combine((int) USART_receive(), (int) USART_receive());
 528:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 52c:	ec 01       	movw	r28, r24
 52e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 532:	9e 01       	movw	r18, r28
 534:	20 53       	subi	r18, 0x30	; 48
 536:	31 09       	sbc	r19, r1
 538:	a9 01       	movw	r20, r18
 53a:	44 0f       	add	r20, r20
 53c:	55 1f       	adc	r21, r21
 53e:	22 0f       	add	r18, r18
 540:	33 1f       	adc	r19, r19
 542:	22 0f       	add	r18, r18
 544:	33 1f       	adc	r19, r19
 546:	22 0f       	add	r18, r18
 548:	33 1f       	adc	r19, r19
 54a:	24 0f       	add	r18, r20
 54c:	35 1f       	adc	r19, r21
 54e:	c0 97       	sbiw	r24, 0x30	; 48
 550:	28 0f       	add	r18, r24
 552:	39 1f       	adc	r19, r25
 554:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <temp_down+0x1>
 558:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <temp_down>
			temp_up = combine((int) USART_receive(), (int) USART_receive());
 55c:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 560:	ec 01       	movw	r28, r24
 562:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 566:	9e 01       	movw	r18, r28
 568:	20 53       	subi	r18, 0x30	; 48
 56a:	31 09       	sbc	r19, r1
 56c:	a9 01       	movw	r20, r18
 56e:	44 0f       	add	r20, r20
 570:	55 1f       	adc	r21, r21
 572:	22 0f       	add	r18, r18
 574:	33 1f       	adc	r19, r19
 576:	22 0f       	add	r18, r18
 578:	33 1f       	adc	r19, r19
 57a:	22 0f       	add	r18, r18
 57c:	33 1f       	adc	r19, r19
 57e:	24 0f       	add	r18, r20
 580:	35 1f       	adc	r19, r21
 582:	c0 97       	sbiw	r24, 0x30	; 48
 584:	28 0f       	add	r18, r24
 586:	39 1f       	adc	r19, r25
 588:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <temp_up+0x1>
 58c:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <temp_up>
			LDR_down = combine((int) USART_receive(), (int) USART_receive());
 590:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 594:	ec 01       	movw	r28, r24
 596:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 59a:	9e 01       	movw	r18, r28
 59c:	20 53       	subi	r18, 0x30	; 48
 59e:	31 09       	sbc	r19, r1
 5a0:	a9 01       	movw	r20, r18
 5a2:	44 0f       	add	r20, r20
 5a4:	55 1f       	adc	r21, r21
 5a6:	22 0f       	add	r18, r18
 5a8:	33 1f       	adc	r19, r19
 5aa:	22 0f       	add	r18, r18
 5ac:	33 1f       	adc	r19, r19
 5ae:	22 0f       	add	r18, r18
 5b0:	33 1f       	adc	r19, r19
 5b2:	24 0f       	add	r18, r20
 5b4:	35 1f       	adc	r19, r21
 5b6:	c0 97       	sbiw	r24, 0x30	; 48
 5b8:	28 0f       	add	r18, r24
 5ba:	39 1f       	adc	r19, r25
 5bc:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <LDR_down+0x1>
 5c0:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <LDR_down>
			LDR_up = combine((int) USART_receive(), (int) USART_receive());
 5c4:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5c8:	ec 01       	movw	r28, r24
 5ca:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5ce:	9e 01       	movw	r18, r28
 5d0:	20 53       	subi	r18, 0x30	; 48
 5d2:	31 09       	sbc	r19, r1
 5d4:	a9 01       	movw	r20, r18
 5d6:	44 0f       	add	r20, r20
 5d8:	55 1f       	adc	r21, r21
 5da:	22 0f       	add	r18, r18
 5dc:	33 1f       	adc	r19, r19
 5de:	22 0f       	add	r18, r18
 5e0:	33 1f       	adc	r19, r19
 5e2:	22 0f       	add	r18, r18
 5e4:	33 1f       	adc	r19, r19
 5e6:	24 0f       	add	r18, r20
 5e8:	35 1f       	adc	r19, r21
 5ea:	c0 97       	sbiw	r24, 0x30	; 48
 5ec:	28 0f       	add	r18, r24
 5ee:	39 1f       	adc	r19, r25
 5f0:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <LDR_up+0x1>
 5f4:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <LDR_up>
			return;
 5f8:	27 c0       	rjmp	.+78     	; 0x648 <__vector_18+0x1a8>
			
		case '7':								// 7 = open/closing distance
			manual = 1;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 602:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			int closeopen = combine3((int) USART_receive(), (int) USART_receive(), (int) USART_receive());
 606:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 60a:	8c 01       	movw	r16, r24
 60c:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 610:	ec 01       	movw	r28, r24
 612:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 616:	a8 01       	movw	r20, r16
 618:	be 01       	movw	r22, r28
 61a:	0e 94 35 02 	call	0x46a	; 0x46a <combine3>
			distance_manual = closeopen;
 61e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 622:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 626:	10 c0       	rjmp	.+32     	; 0x648 <__vector_18+0x1a8>
			
		case '8':								// 8 = set manual
			manual = (int) USART_receive();
 628:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 62c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 630:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			if (manual == 1)
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	41 f4       	brne	.+16     	; 0x648 <__vector_18+0x1a8>
			{
				distance_manual = (int) atoi(distance_sensor);
 638:	8a e5       	ldi	r24, 0x5A	; 90
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <atoi>
 640:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 644:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
			}
		default:
			return;
	}
 648:	ff 91       	pop	r31
 64a:	ef 91       	pop	r30
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	bf 91       	pop	r27
 652:	af 91       	pop	r26
 654:	9f 91       	pop	r25
 656:	8f 91       	pop	r24
 658:	7f 91       	pop	r23
 65a:	6f 91       	pop	r22
 65c:	5f 91       	pop	r21
 65e:	4f 91       	pop	r20
 660:	3f 91       	pop	r19
 662:	2f 91       	pop	r18
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <init_connectie>:
#define BAUDRATE 9600
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)

void init_connectie()
{
	UCSR0A = 0;							// disable U2X mode
 672:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);	// Set frame format: 8data, 2stop bit 
 676:	8e e0       	ldi	r24, 0x0E	; 14
 678:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 67c:	08 95       	ret

0000067e <init_USART>:
}

void init_USART()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 67e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 682:	87 e6       	ldi	r24, 0x67	; 103
 684:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);		// Enable receiver and transmitter
 688:	e1 ec       	ldi	r30, 0xC1	; 193
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	88 e1       	ldi	r24, 0x18	; 24
 68e:	80 83       	st	Z, r24
	UCSR0C = (3<<UCSZ00);
 690:	86 e0       	ldi	r24, 0x06	; 6
 692:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << RXCIE0 );			// Enable the USART Receive Complete interrupt ( USART_RXC )
 696:	80 81       	ld	r24, Z
 698:	80 68       	ori	r24, 0x80	; 128
 69a:	80 83       	st	Z, r24
	sei ();								// Enable the Global Interrupt Enable flag so that interrupts can be processed
 69c:	78 94       	sei
 69e:	08 95       	ret

000006a0 <init_scheduler>:
}

void init_scheduler()
{
	SCH_Init_T1();
 6a0:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temperature,1,100);
 6a4:	44 e6       	ldi	r20, 0x64	; 100
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	61 e0       	ldi	r22, 0x01	; 1
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	88 ea       	ldi	r24, 0xA8	; 168
 6ae:	93 e0       	ldi	r25, 0x03	; 3
 6b0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(ldr,2,100);
 6b4:	44 e6       	ldi	r20, 0x64	; 100
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	62 e0       	ldi	r22, 0x02	; 2
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	82 ee       	ldi	r24, 0xE2	; 226
 6be:	93 e0       	ldi	r25, 0x03	; 3
 6c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(distance,3,100);
 6c4:	44 e6       	ldi	r20, 0x64	; 100
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	63 e0       	ldi	r22, 0x03	; 3
 6ca:	70 e0       	ldi	r23, 0x00	; 0
 6cc:	86 e1       	ldi	r24, 0x16	; 22
 6ce:	94 e0       	ldi	r25, 0x04	; 4
 6d0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(newLine,6,100);
 6d4:	44 e6       	ldi	r20, 0x64	; 100
 6d6:	50 e0       	ldi	r21, 0x00	; 0
 6d8:	66 e0       	ldi	r22, 0x06	; 6
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	8b e2       	ldi	r24, 0x2B	; 43
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(upDown,8,20);
 6e4:	44 e1       	ldi	r20, 0x14	; 20
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	68 e0       	ldi	r22, 0x08	; 8
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	8d e6       	ldi	r24, 0x6D	; 109
 6ee:	91 e0       	ldi	r25, 0x01	; 1
 6f0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 6f4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 6f8:	08 95       	ret

000006fa <init_adc>:
}

void init_adc()
{
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
 6fa:	ea e7       	ldi	r30, 0x7A	; 122
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	87 60       	ori	r24, 0x07	; 7
 702:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);							 //Voltage reference from AVCC (5v)
 704:	ac e7       	ldi	r26, 0x7C	; 124
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	8c 91       	ld	r24, X
 70a:	80 64       	ori	r24, 0x40	; 64
 70c:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);							 //Turn on ADC
 70e:	80 81       	ld	r24, Z
 710:	80 68       	ori	r24, 0x80	; 128
 712:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							 //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 714:	80 81       	ld	r24, Z
 716:	80 64       	ori	r24, 0x40	; 64
 718:	80 83       	st	Z, r24
 71a:	08 95       	ret

0000071c <init_dist>:
}

void init_dist()
{
	DDRD |= _BV(PD3);			// Pin 3 Trigger Output
 71c:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~_BV(PD2);			// Pin 2 Echo Input
 71e:	52 98       	cbi	0x0a, 2	; 10
 720:	08 95       	ret

00000722 <init_LEDS>:
}

void init_LEDS()
{ 
	DDRB |= _BV(PB0);			// pin0 B = output
 722:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1);			// pin1 B = output
 724:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(PB2);			// pin2 B = output
 726:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << PB2);		// Green LED on
 728:	2a 9a       	sbi	0x05, 2	; 5
 72a:	08 95       	ret

0000072c <setup>:
	}
}

void setup()
{
	init_connectie();
 72c:	0e 94 39 03 	call	0x672	; 0x672 <init_connectie>
	init_adc();				// Setup the ADC
 730:	0e 94 7d 03 	call	0x6fa	; 0x6fa <init_adc>
	init_USART();			// Setup the USART
 734:	0e 94 3f 03 	call	0x67e	; 0x67e <init_USART>
	init_dist();			// Setup distance sensor
 738:	0e 94 8e 03 	call	0x71c	; 0x71c <init_dist>
	init_scheduler();		// Setup scheduler
 73c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <init_scheduler>
	init_LEDS();			// Setup LED
 740:	0e 94 91 03 	call	0x722	; 0x722 <init_LEDS>
 744:	08 95       	ret

00000746 <main>:
int main(void);
void setup();

int main(void)
{
	setup();
 746:	0e 94 96 03 	call	0x72c	; 0x72c <setup>
	while(1) {
		SCH_Dispatch_Tasks();
 74a:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 74e:	fd cf       	rjmp	.-6      	; 0x74a <main+0x4>

00000750 <temperature>:
#include "sensors.h"
#include "serial.h"

void temperature()
{
	USART_putstring("Temp : ");
 750:	8e e0       	ldi	r24, 0x0E	; 14
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
	adc_value = read_adc(0);
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	0e 94 32 01 	call	0x264	; 0x264 <read_adc>
	adc_value = (((((double)adc_value / 1024) * 5) - 0.5) * 100); // Calculate temperature
 75e:	bc 01       	movw	r22, r24
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__floatunsisf>
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	40 e8       	ldi	r20, 0x80	; 128
 76e:	5a e3       	ldi	r21, 0x3A	; 58
 770:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__mulsf3>
 774:	20 e0       	ldi	r18, 0x00	; 0
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	40 ea       	ldi	r20, 0xA0	; 160
 77a:	50 e4       	ldi	r21, 0x40	; 64
 77c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__mulsf3>
 780:	20 e0       	ldi	r18, 0x00	; 0
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	5f e3       	ldi	r21, 0x3F	; 63
 788:	0e 94 48 04 	call	0x890	; 0x890 <__subsf3>
 78c:	20 e0       	ldi	r18, 0x00	; 0
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	48 ec       	ldi	r20, 0xC8	; 200
 792:	52 e4       	ldi	r21, 0x42	; 66
 794:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__mulsf3>
 798:	0e 94 bc 04 	call	0x978	; 0x978 <__fixunssfsi>
 79c:	dc 01       	movw	r26, r24
 79e:	cb 01       	movw	r24, r22
 7a0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <adc_value+0x1>
 7a4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <adc_value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7a8:	4a e0       	ldi	r20, 0x0A	; 10
 7aa:	6f e5       	ldi	r22, 0x5F	; 95
 7ac:	71 e0       	ldi	r23, 0x01	; 1
 7ae:	0e 94 04 06 	call	0xc08	; 0xc08 <__itoa_ncheck>
	itoa(adc_value, temp_sensor, 10);							  //Convert the read value to an ascii string
	USART_putstring(temp_sensor);								  //Send the converted value to the terminal
 7b2:	8f e5       	ldi	r24, 0x5F	; 95
 7b4:	91 e0       	ldi	r25, 0x01	; 1
 7b6:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
	USART_putstring("  ");
 7ba:	86 e1       	ldi	r24, 0x16	; 22
 7bc:	91 e0       	ldi	r25, 0x01	; 1
 7be:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 7c2:	08 95       	ret

000007c4 <ldr>:
}

void ldr()
{
	USART_putstring("LDR : ");
 7c4:	89 e1       	ldi	r24, 0x19	; 25
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
	adc_value = read_adc(1);
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	0e 94 32 01 	call	0x264	; 0x264 <read_adc>
	adc_value = ((((double)adc_value)/1024)*100 *1.5);			  // Calculate the amount of light
 7d2:	bc 01       	movw	r22, r24
 7d4:	80 e0       	ldi	r24, 0x00	; 0
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__floatunsisf>
 7dc:	20 e0       	ldi	r18, 0x00	; 0
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	40 e8       	ldi	r20, 0x80	; 128
 7e2:	5a e3       	ldi	r21, 0x3A	; 58
 7e4:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__mulsf3>
 7e8:	20 e0       	ldi	r18, 0x00	; 0
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	48 ec       	ldi	r20, 0xC8	; 200
 7ee:	52 e4       	ldi	r21, 0x42	; 66
 7f0:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__mulsf3>
 7f4:	20 e0       	ldi	r18, 0x00	; 0
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	40 ec       	ldi	r20, 0xC0	; 192
 7fa:	5f e3       	ldi	r21, 0x3F	; 63
 7fc:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__mulsf3>
 800:	0e 94 bc 04 	call	0x978	; 0x978 <__fixunssfsi>
 804:	dc 01       	movw	r26, r24
 806:	cb 01       	movw	r24, r22
 808:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <adc_value+0x1>
 80c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <adc_value>
 810:	4a e0       	ldi	r20, 0x0A	; 10
 812:	61 e5       	ldi	r22, 0x51	; 81
 814:	71 e0       	ldi	r23, 0x01	; 1
 816:	0e 94 04 06 	call	0xc08	; 0xc08 <__itoa_ncheck>
	itoa(adc_value, LDR_sensor, 10);							  // Convert the read value to an ascii string
	USART_putstring(LDR_sensor);								  // Send the converted value to the terminal
 81a:	81 e5       	ldi	r24, 0x51	; 81
 81c:	91 e0       	ldi	r25, 0x01	; 1
 81e:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
	USART_putstring("  ");
 822:	86 e1       	ldi	r24, 0x16	; 22
 824:	91 e0       	ldi	r25, 0x01	; 1
 826:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 82a:	08 95       	ret

0000082c <distance>:
}

void distance()
{
	USART_putstring("distance : ");
 82c:	80 e2       	ldi	r24, 0x20	; 32
 82e:	91 e0       	ldi	r25, 0x01	; 1
 830:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
	PORTD |= _BV(PD3);
 834:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 836:	85 e3       	ldi	r24, 0x35	; 53
 838:	8a 95       	dec	r24
 83a:	f1 f7       	brne	.-4      	; 0x838 <distance+0xc>
 83c:	00 00       	nop
	_delay_us(10);
	PORTD &= ~_BV(PD3);
 83e:	5b 98       	cbi	0x0b, 3	; 11
	
	loop_until_bit_is_set(PIND, PD2);
 840:	4a 9b       	sbis	0x09, 2	; 9
 842:	fe cf       	rjmp	.-4      	; 0x840 <distance+0x14>
	TCNT1 = 0;
 844:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 848:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	loop_until_bit_is_clear(PIND, PD2);
 84c:	4a 99       	sbic	0x09, 2	; 9
 84e:	fe cf       	rjmp	.-4      	; 0x84c <distance+0x20>
	uint16_t count = TCNT1;
 850:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 854:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__floatunsisf>
 860:	20 e0       	ldi	r18, 0x00	; 0
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	40 e8       	ldi	r20, 0x80	; 128
 866:	5e e3       	ldi	r21, 0x3E	; 62
 868:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__mulsf3>
 86c:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
 870:	dc 01       	movw	r26, r24
 872:	cb 01       	movw	r24, r22
 874:	4a e0       	ldi	r20, 0x0A	; 10
 876:	6a e5       	ldi	r22, 0x5A	; 90
 878:	71 e0       	ldi	r23, 0x01	; 1
 87a:	0e 94 04 06 	call	0xc08	; 0xc08 <__itoa_ncheck>
	float distance = ((float)count / 4);		// Calculate the distance

	itoa(distance, distance_sensor, 10);        // Convert the read value to an ascii string
	USART_putstring(distance_sensor);			// Send the converted value to the terminal
 87e:	8a e5       	ldi	r24, 0x5A	; 90
 880:	91 e0       	ldi	r25, 0x01	; 1
 882:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
	USART_putstring("  ");
 886:	86 e1       	ldi	r24, 0x16	; 22
 888:	91 e0       	ldi	r25, 0x01	; 1
 88a:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 88e:	08 95       	ret

00000890 <__subsf3>:
 890:	50 58       	subi	r21, 0x80	; 128

00000892 <__addsf3>:
 892:	bb 27       	eor	r27, r27
 894:	aa 27       	eor	r26, r26
 896:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__addsf3x>
 89a:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_round>
 89e:	0e 94 31 05 	call	0xa62	; 0xa62 <__fp_pscA>
 8a2:	38 f0       	brcs	.+14     	; 0x8b2 <__addsf3+0x20>
 8a4:	0e 94 38 05 	call	0xa70	; 0xa70 <__fp_pscB>
 8a8:	20 f0       	brcs	.+8      	; 0x8b2 <__addsf3+0x20>
 8aa:	39 f4       	brne	.+14     	; 0x8ba <__addsf3+0x28>
 8ac:	9f 3f       	cpi	r25, 0xFF	; 255
 8ae:	19 f4       	brne	.+6      	; 0x8b6 <__addsf3+0x24>
 8b0:	26 f4       	brtc	.+8      	; 0x8ba <__addsf3+0x28>
 8b2:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__fp_nan>
 8b6:	0e f4       	brtc	.+2      	; 0x8ba <__addsf3+0x28>
 8b8:	e0 95       	com	r30
 8ba:	e7 fb       	bst	r30, 7
 8bc:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_inf>

000008c0 <__addsf3x>:
 8c0:	e9 2f       	mov	r30, r25
 8c2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fp_split3>
 8c6:	58 f3       	brcs	.-42     	; 0x89e <__addsf3+0xc>
 8c8:	ba 17       	cp	r27, r26
 8ca:	62 07       	cpc	r22, r18
 8cc:	73 07       	cpc	r23, r19
 8ce:	84 07       	cpc	r24, r20
 8d0:	95 07       	cpc	r25, r21
 8d2:	20 f0       	brcs	.+8      	; 0x8dc <__addsf3x+0x1c>
 8d4:	79 f4       	brne	.+30     	; 0x8f4 <__addsf3x+0x34>
 8d6:	a6 f5       	brtc	.+104    	; 0x940 <__stack+0x41>
 8d8:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_zero>
 8dc:	0e f4       	brtc	.+2      	; 0x8e0 <__addsf3x+0x20>
 8de:	e0 95       	com	r30
 8e0:	0b 2e       	mov	r0, r27
 8e2:	ba 2f       	mov	r27, r26
 8e4:	a0 2d       	mov	r26, r0
 8e6:	0b 01       	movw	r0, r22
 8e8:	b9 01       	movw	r22, r18
 8ea:	90 01       	movw	r18, r0
 8ec:	0c 01       	movw	r0, r24
 8ee:	ca 01       	movw	r24, r20
 8f0:	a0 01       	movw	r20, r0
 8f2:	11 24       	eor	r1, r1
 8f4:	ff 27       	eor	r31, r31
 8f6:	59 1b       	sub	r21, r25
 8f8:	99 f0       	breq	.+38     	; 0x920 <__stack+0x21>
 8fa:	59 3f       	cpi	r21, 0xF9	; 249
 8fc:	50 f4       	brcc	.+20     	; 0x912 <__stack+0x13>
 8fe:	50 3e       	cpi	r21, 0xE0	; 224
 900:	68 f1       	brcs	.+90     	; 0x95c <__stack+0x5d>
 902:	1a 16       	cp	r1, r26
 904:	f0 40       	sbci	r31, 0x00	; 0
 906:	a2 2f       	mov	r26, r18
 908:	23 2f       	mov	r18, r19
 90a:	34 2f       	mov	r19, r20
 90c:	44 27       	eor	r20, r20
 90e:	58 5f       	subi	r21, 0xF8	; 248
 910:	f3 cf       	rjmp	.-26     	; 0x8f8 <__addsf3x+0x38>
 912:	46 95       	lsr	r20
 914:	37 95       	ror	r19
 916:	27 95       	ror	r18
 918:	a7 95       	ror	r26
 91a:	f0 40       	sbci	r31, 0x00	; 0
 91c:	53 95       	inc	r21
 91e:	c9 f7       	brne	.-14     	; 0x912 <__stack+0x13>
 920:	7e f4       	brtc	.+30     	; 0x940 <__stack+0x41>
 922:	1f 16       	cp	r1, r31
 924:	ba 0b       	sbc	r27, r26
 926:	62 0b       	sbc	r22, r18
 928:	73 0b       	sbc	r23, r19
 92a:	84 0b       	sbc	r24, r20
 92c:	ba f0       	brmi	.+46     	; 0x95c <__stack+0x5d>
 92e:	91 50       	subi	r25, 0x01	; 1
 930:	a1 f0       	breq	.+40     	; 0x95a <__stack+0x5b>
 932:	ff 0f       	add	r31, r31
 934:	bb 1f       	adc	r27, r27
 936:	66 1f       	adc	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	c2 f7       	brpl	.-16     	; 0x92e <__stack+0x2f>
 93e:	0e c0       	rjmp	.+28     	; 0x95c <__stack+0x5d>
 940:	ba 0f       	add	r27, r26
 942:	62 1f       	adc	r22, r18
 944:	73 1f       	adc	r23, r19
 946:	84 1f       	adc	r24, r20
 948:	48 f4       	brcc	.+18     	; 0x95c <__stack+0x5d>
 94a:	87 95       	ror	r24
 94c:	77 95       	ror	r23
 94e:	67 95       	ror	r22
 950:	b7 95       	ror	r27
 952:	f7 95       	ror	r31
 954:	9e 3f       	cpi	r25, 0xFE	; 254
 956:	08 f0       	brcs	.+2      	; 0x95a <__stack+0x5b>
 958:	b0 cf       	rjmp	.-160    	; 0x8ba <__addsf3+0x28>
 95a:	93 95       	inc	r25
 95c:	88 0f       	add	r24, r24
 95e:	08 f0       	brcs	.+2      	; 0x962 <__stack+0x63>
 960:	99 27       	eor	r25, r25
 962:	ee 0f       	add	r30, r30
 964:	97 95       	ror	r25
 966:	87 95       	ror	r24
 968:	08 95       	ret

0000096a <__fixsfsi>:
 96a:	0e 94 bc 04 	call	0x978	; 0x978 <__fixunssfsi>
 96e:	68 94       	set
 970:	b1 11       	cpse	r27, r1
 972:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_szero>
 976:	08 95       	ret

00000978 <__fixunssfsi>:
 978:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_splitA>
 97c:	88 f0       	brcs	.+34     	; 0x9a0 <__fixunssfsi+0x28>
 97e:	9f 57       	subi	r25, 0x7F	; 127
 980:	98 f0       	brcs	.+38     	; 0x9a8 <__fixunssfsi+0x30>
 982:	b9 2f       	mov	r27, r25
 984:	99 27       	eor	r25, r25
 986:	b7 51       	subi	r27, 0x17	; 23
 988:	b0 f0       	brcs	.+44     	; 0x9b6 <__fixunssfsi+0x3e>
 98a:	e1 f0       	breq	.+56     	; 0x9c4 <__fixunssfsi+0x4c>
 98c:	66 0f       	add	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	99 1f       	adc	r25, r25
 994:	1a f0       	brmi	.+6      	; 0x99c <__fixunssfsi+0x24>
 996:	ba 95       	dec	r27
 998:	c9 f7       	brne	.-14     	; 0x98c <__fixunssfsi+0x14>
 99a:	14 c0       	rjmp	.+40     	; 0x9c4 <__fixunssfsi+0x4c>
 99c:	b1 30       	cpi	r27, 0x01	; 1
 99e:	91 f0       	breq	.+36     	; 0x9c4 <__fixunssfsi+0x4c>
 9a0:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_zero>
 9a4:	b1 e0       	ldi	r27, 0x01	; 1
 9a6:	08 95       	ret
 9a8:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_zero>
 9ac:	67 2f       	mov	r22, r23
 9ae:	78 2f       	mov	r23, r24
 9b0:	88 27       	eor	r24, r24
 9b2:	b8 5f       	subi	r27, 0xF8	; 248
 9b4:	39 f0       	breq	.+14     	; 0x9c4 <__fixunssfsi+0x4c>
 9b6:	b9 3f       	cpi	r27, 0xF9	; 249
 9b8:	cc f3       	brlt	.-14     	; 0x9ac <__fixunssfsi+0x34>
 9ba:	86 95       	lsr	r24
 9bc:	77 95       	ror	r23
 9be:	67 95       	ror	r22
 9c0:	b3 95       	inc	r27
 9c2:	d9 f7       	brne	.-10     	; 0x9ba <__fixunssfsi+0x42>
 9c4:	3e f4       	brtc	.+14     	; 0x9d4 <__fixunssfsi+0x5c>
 9c6:	90 95       	com	r25
 9c8:	80 95       	com	r24
 9ca:	70 95       	com	r23
 9cc:	61 95       	neg	r22
 9ce:	7f 4f       	sbci	r23, 0xFF	; 255
 9d0:	8f 4f       	sbci	r24, 0xFF	; 255
 9d2:	9f 4f       	sbci	r25, 0xFF	; 255
 9d4:	08 95       	ret

000009d6 <__floatunsisf>:
 9d6:	e8 94       	clt
 9d8:	09 c0       	rjmp	.+18     	; 0x9ec <__floatsisf+0x12>

000009da <__floatsisf>:
 9da:	97 fb       	bst	r25, 7
 9dc:	3e f4       	brtc	.+14     	; 0x9ec <__floatsisf+0x12>
 9de:	90 95       	com	r25
 9e0:	80 95       	com	r24
 9e2:	70 95       	com	r23
 9e4:	61 95       	neg	r22
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ea:	9f 4f       	sbci	r25, 0xFF	; 255
 9ec:	99 23       	and	r25, r25
 9ee:	a9 f0       	breq	.+42     	; 0xa1a <__floatsisf+0x40>
 9f0:	f9 2f       	mov	r31, r25
 9f2:	96 e9       	ldi	r25, 0x96	; 150
 9f4:	bb 27       	eor	r27, r27
 9f6:	93 95       	inc	r25
 9f8:	f6 95       	lsr	r31
 9fa:	87 95       	ror	r24
 9fc:	77 95       	ror	r23
 9fe:	67 95       	ror	r22
 a00:	b7 95       	ror	r27
 a02:	f1 11       	cpse	r31, r1
 a04:	f8 cf       	rjmp	.-16     	; 0x9f6 <__floatsisf+0x1c>
 a06:	fa f4       	brpl	.+62     	; 0xa46 <__floatsisf+0x6c>
 a08:	bb 0f       	add	r27, r27
 a0a:	11 f4       	brne	.+4      	; 0xa10 <__floatsisf+0x36>
 a0c:	60 ff       	sbrs	r22, 0
 a0e:	1b c0       	rjmp	.+54     	; 0xa46 <__floatsisf+0x6c>
 a10:	6f 5f       	subi	r22, 0xFF	; 255
 a12:	7f 4f       	sbci	r23, 0xFF	; 255
 a14:	8f 4f       	sbci	r24, 0xFF	; 255
 a16:	9f 4f       	sbci	r25, 0xFF	; 255
 a18:	16 c0       	rjmp	.+44     	; 0xa46 <__floatsisf+0x6c>
 a1a:	88 23       	and	r24, r24
 a1c:	11 f0       	breq	.+4      	; 0xa22 <__floatsisf+0x48>
 a1e:	96 e9       	ldi	r25, 0x96	; 150
 a20:	11 c0       	rjmp	.+34     	; 0xa44 <__floatsisf+0x6a>
 a22:	77 23       	and	r23, r23
 a24:	21 f0       	breq	.+8      	; 0xa2e <__floatsisf+0x54>
 a26:	9e e8       	ldi	r25, 0x8E	; 142
 a28:	87 2f       	mov	r24, r23
 a2a:	76 2f       	mov	r23, r22
 a2c:	05 c0       	rjmp	.+10     	; 0xa38 <__floatsisf+0x5e>
 a2e:	66 23       	and	r22, r22
 a30:	71 f0       	breq	.+28     	; 0xa4e <__floatsisf+0x74>
 a32:	96 e8       	ldi	r25, 0x86	; 134
 a34:	86 2f       	mov	r24, r22
 a36:	70 e0       	ldi	r23, 0x00	; 0
 a38:	60 e0       	ldi	r22, 0x00	; 0
 a3a:	2a f0       	brmi	.+10     	; 0xa46 <__floatsisf+0x6c>
 a3c:	9a 95       	dec	r25
 a3e:	66 0f       	add	r22, r22
 a40:	77 1f       	adc	r23, r23
 a42:	88 1f       	adc	r24, r24
 a44:	da f7       	brpl	.-10     	; 0xa3c <__floatsisf+0x62>
 a46:	88 0f       	add	r24, r24
 a48:	96 95       	lsr	r25
 a4a:	87 95       	ror	r24
 a4c:	97 f9       	bld	r25, 7
 a4e:	08 95       	ret

00000a50 <__fp_inf>:
 a50:	97 f9       	bld	r25, 7
 a52:	9f 67       	ori	r25, 0x7F	; 127
 a54:	80 e8       	ldi	r24, 0x80	; 128
 a56:	70 e0       	ldi	r23, 0x00	; 0
 a58:	60 e0       	ldi	r22, 0x00	; 0
 a5a:	08 95       	ret

00000a5c <__fp_nan>:
 a5c:	9f ef       	ldi	r25, 0xFF	; 255
 a5e:	80 ec       	ldi	r24, 0xC0	; 192
 a60:	08 95       	ret

00000a62 <__fp_pscA>:
 a62:	00 24       	eor	r0, r0
 a64:	0a 94       	dec	r0
 a66:	16 16       	cp	r1, r22
 a68:	17 06       	cpc	r1, r23
 a6a:	18 06       	cpc	r1, r24
 a6c:	09 06       	cpc	r0, r25
 a6e:	08 95       	ret

00000a70 <__fp_pscB>:
 a70:	00 24       	eor	r0, r0
 a72:	0a 94       	dec	r0
 a74:	12 16       	cp	r1, r18
 a76:	13 06       	cpc	r1, r19
 a78:	14 06       	cpc	r1, r20
 a7a:	05 06       	cpc	r0, r21
 a7c:	08 95       	ret

00000a7e <__fp_round>:
 a7e:	09 2e       	mov	r0, r25
 a80:	03 94       	inc	r0
 a82:	00 0c       	add	r0, r0
 a84:	11 f4       	brne	.+4      	; 0xa8a <__fp_round+0xc>
 a86:	88 23       	and	r24, r24
 a88:	52 f0       	brmi	.+20     	; 0xa9e <__fp_round+0x20>
 a8a:	bb 0f       	add	r27, r27
 a8c:	40 f4       	brcc	.+16     	; 0xa9e <__fp_round+0x20>
 a8e:	bf 2b       	or	r27, r31
 a90:	11 f4       	brne	.+4      	; 0xa96 <__fp_round+0x18>
 a92:	60 ff       	sbrs	r22, 0
 a94:	04 c0       	rjmp	.+8      	; 0xa9e <__fp_round+0x20>
 a96:	6f 5f       	subi	r22, 0xFF	; 255
 a98:	7f 4f       	sbci	r23, 0xFF	; 255
 a9a:	8f 4f       	sbci	r24, 0xFF	; 255
 a9c:	9f 4f       	sbci	r25, 0xFF	; 255
 a9e:	08 95       	ret

00000aa0 <__fp_split3>:
 aa0:	57 fd       	sbrc	r21, 7
 aa2:	90 58       	subi	r25, 0x80	; 128
 aa4:	44 0f       	add	r20, r20
 aa6:	55 1f       	adc	r21, r21
 aa8:	59 f0       	breq	.+22     	; 0xac0 <__fp_splitA+0x10>
 aaa:	5f 3f       	cpi	r21, 0xFF	; 255
 aac:	71 f0       	breq	.+28     	; 0xaca <__fp_splitA+0x1a>
 aae:	47 95       	ror	r20

00000ab0 <__fp_splitA>:
 ab0:	88 0f       	add	r24, r24
 ab2:	97 fb       	bst	r25, 7
 ab4:	99 1f       	adc	r25, r25
 ab6:	61 f0       	breq	.+24     	; 0xad0 <__fp_splitA+0x20>
 ab8:	9f 3f       	cpi	r25, 0xFF	; 255
 aba:	79 f0       	breq	.+30     	; 0xada <__fp_splitA+0x2a>
 abc:	87 95       	ror	r24
 abe:	08 95       	ret
 ac0:	12 16       	cp	r1, r18
 ac2:	13 06       	cpc	r1, r19
 ac4:	14 06       	cpc	r1, r20
 ac6:	55 1f       	adc	r21, r21
 ac8:	f2 cf       	rjmp	.-28     	; 0xaae <__fp_split3+0xe>
 aca:	46 95       	lsr	r20
 acc:	f1 df       	rcall	.-30     	; 0xab0 <__fp_splitA>
 ace:	08 c0       	rjmp	.+16     	; 0xae0 <__fp_splitA+0x30>
 ad0:	16 16       	cp	r1, r22
 ad2:	17 06       	cpc	r1, r23
 ad4:	18 06       	cpc	r1, r24
 ad6:	99 1f       	adc	r25, r25
 ad8:	f1 cf       	rjmp	.-30     	; 0xabc <__fp_splitA+0xc>
 ada:	86 95       	lsr	r24
 adc:	71 05       	cpc	r23, r1
 ade:	61 05       	cpc	r22, r1
 ae0:	08 94       	sec
 ae2:	08 95       	ret

00000ae4 <__fp_zero>:
 ae4:	e8 94       	clt

00000ae6 <__fp_szero>:
 ae6:	bb 27       	eor	r27, r27
 ae8:	66 27       	eor	r22, r22
 aea:	77 27       	eor	r23, r23
 aec:	cb 01       	movw	r24, r22
 aee:	97 f9       	bld	r25, 7
 af0:	08 95       	ret

00000af2 <__mulsf3>:
 af2:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3x>
 af6:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_round>
 afa:	0e 94 31 05 	call	0xa62	; 0xa62 <__fp_pscA>
 afe:	38 f0       	brcs	.+14     	; 0xb0e <__mulsf3+0x1c>
 b00:	0e 94 38 05 	call	0xa70	; 0xa70 <__fp_pscB>
 b04:	20 f0       	brcs	.+8      	; 0xb0e <__mulsf3+0x1c>
 b06:	95 23       	and	r25, r21
 b08:	11 f0       	breq	.+4      	; 0xb0e <__mulsf3+0x1c>
 b0a:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_inf>
 b0e:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__fp_nan>
 b12:	11 24       	eor	r1, r1
 b14:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_szero>

00000b18 <__mulsf3x>:
 b18:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fp_split3>
 b1c:	70 f3       	brcs	.-36     	; 0xafa <__mulsf3+0x8>

00000b1e <__mulsf3_pse>:
 b1e:	95 9f       	mul	r25, r21
 b20:	c1 f3       	breq	.-16     	; 0xb12 <__mulsf3+0x20>
 b22:	95 0f       	add	r25, r21
 b24:	50 e0       	ldi	r21, 0x00	; 0
 b26:	55 1f       	adc	r21, r21
 b28:	62 9f       	mul	r22, r18
 b2a:	f0 01       	movw	r30, r0
 b2c:	72 9f       	mul	r23, r18
 b2e:	bb 27       	eor	r27, r27
 b30:	f0 0d       	add	r31, r0
 b32:	b1 1d       	adc	r27, r1
 b34:	63 9f       	mul	r22, r19
 b36:	aa 27       	eor	r26, r26
 b38:	f0 0d       	add	r31, r0
 b3a:	b1 1d       	adc	r27, r1
 b3c:	aa 1f       	adc	r26, r26
 b3e:	64 9f       	mul	r22, r20
 b40:	66 27       	eor	r22, r22
 b42:	b0 0d       	add	r27, r0
 b44:	a1 1d       	adc	r26, r1
 b46:	66 1f       	adc	r22, r22
 b48:	82 9f       	mul	r24, r18
 b4a:	22 27       	eor	r18, r18
 b4c:	b0 0d       	add	r27, r0
 b4e:	a1 1d       	adc	r26, r1
 b50:	62 1f       	adc	r22, r18
 b52:	73 9f       	mul	r23, r19
 b54:	b0 0d       	add	r27, r0
 b56:	a1 1d       	adc	r26, r1
 b58:	62 1f       	adc	r22, r18
 b5a:	83 9f       	mul	r24, r19
 b5c:	a0 0d       	add	r26, r0
 b5e:	61 1d       	adc	r22, r1
 b60:	22 1f       	adc	r18, r18
 b62:	74 9f       	mul	r23, r20
 b64:	33 27       	eor	r19, r19
 b66:	a0 0d       	add	r26, r0
 b68:	61 1d       	adc	r22, r1
 b6a:	23 1f       	adc	r18, r19
 b6c:	84 9f       	mul	r24, r20
 b6e:	60 0d       	add	r22, r0
 b70:	21 1d       	adc	r18, r1
 b72:	82 2f       	mov	r24, r18
 b74:	76 2f       	mov	r23, r22
 b76:	6a 2f       	mov	r22, r26
 b78:	11 24       	eor	r1, r1
 b7a:	9f 57       	subi	r25, 0x7F	; 127
 b7c:	50 40       	sbci	r21, 0x00	; 0
 b7e:	9a f0       	brmi	.+38     	; 0xba6 <__mulsf3_pse+0x88>
 b80:	f1 f0       	breq	.+60     	; 0xbbe <__mulsf3_pse+0xa0>
 b82:	88 23       	and	r24, r24
 b84:	4a f0       	brmi	.+18     	; 0xb98 <__mulsf3_pse+0x7a>
 b86:	ee 0f       	add	r30, r30
 b88:	ff 1f       	adc	r31, r31
 b8a:	bb 1f       	adc	r27, r27
 b8c:	66 1f       	adc	r22, r22
 b8e:	77 1f       	adc	r23, r23
 b90:	88 1f       	adc	r24, r24
 b92:	91 50       	subi	r25, 0x01	; 1
 b94:	50 40       	sbci	r21, 0x00	; 0
 b96:	a9 f7       	brne	.-22     	; 0xb82 <__mulsf3_pse+0x64>
 b98:	9e 3f       	cpi	r25, 0xFE	; 254
 b9a:	51 05       	cpc	r21, r1
 b9c:	80 f0       	brcs	.+32     	; 0xbbe <__mulsf3_pse+0xa0>
 b9e:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_inf>
 ba2:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_szero>
 ba6:	5f 3f       	cpi	r21, 0xFF	; 255
 ba8:	e4 f3       	brlt	.-8      	; 0xba2 <__mulsf3_pse+0x84>
 baa:	98 3e       	cpi	r25, 0xE8	; 232
 bac:	d4 f3       	brlt	.-12     	; 0xba2 <__mulsf3_pse+0x84>
 bae:	86 95       	lsr	r24
 bb0:	77 95       	ror	r23
 bb2:	67 95       	ror	r22
 bb4:	b7 95       	ror	r27
 bb6:	f7 95       	ror	r31
 bb8:	e7 95       	ror	r30
 bba:	9f 5f       	subi	r25, 0xFF	; 255
 bbc:	c1 f7       	brne	.-16     	; 0xbae <__mulsf3_pse+0x90>
 bbe:	fe 2b       	or	r31, r30
 bc0:	88 0f       	add	r24, r24
 bc2:	91 1d       	adc	r25, r1
 bc4:	96 95       	lsr	r25
 bc6:	87 95       	ror	r24
 bc8:	97 f9       	bld	r25, 7
 bca:	08 95       	ret

00000bcc <atoi>:
 bcc:	fc 01       	movw	r30, r24
 bce:	88 27       	eor	r24, r24
 bd0:	99 27       	eor	r25, r25
 bd2:	e8 94       	clt
 bd4:	21 91       	ld	r18, Z+
 bd6:	20 32       	cpi	r18, 0x20	; 32
 bd8:	e9 f3       	breq	.-6      	; 0xbd4 <atoi+0x8>
 bda:	29 30       	cpi	r18, 0x09	; 9
 bdc:	10 f0       	brcs	.+4      	; 0xbe2 <atoi+0x16>
 bde:	2e 30       	cpi	r18, 0x0E	; 14
 be0:	c8 f3       	brcs	.-14     	; 0xbd4 <atoi+0x8>
 be2:	2b 32       	cpi	r18, 0x2B	; 43
 be4:	41 f0       	breq	.+16     	; 0xbf6 <atoi+0x2a>
 be6:	2d 32       	cpi	r18, 0x2D	; 45
 be8:	39 f4       	brne	.+14     	; 0xbf8 <atoi+0x2c>
 bea:	68 94       	set
 bec:	04 c0       	rjmp	.+8      	; 0xbf6 <atoi+0x2a>
 bee:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__mulhi_const_10>
 bf2:	82 0f       	add	r24, r18
 bf4:	91 1d       	adc	r25, r1
 bf6:	21 91       	ld	r18, Z+
 bf8:	20 53       	subi	r18, 0x30	; 48
 bfa:	2a 30       	cpi	r18, 0x0A	; 10
 bfc:	c0 f3       	brcs	.-16     	; 0xbee <atoi+0x22>
 bfe:	1e f4       	brtc	.+6      	; 0xc06 <atoi+0x3a>
 c00:	90 95       	com	r25
 c02:	81 95       	neg	r24
 c04:	9f 4f       	sbci	r25, 0xFF	; 255
 c06:	08 95       	ret

00000c08 <__itoa_ncheck>:
 c08:	bb 27       	eor	r27, r27
 c0a:	4a 30       	cpi	r20, 0x0A	; 10
 c0c:	31 f4       	brne	.+12     	; 0xc1a <__itoa_ncheck+0x12>
 c0e:	99 23       	and	r25, r25
 c10:	22 f4       	brpl	.+8      	; 0xc1a <__itoa_ncheck+0x12>
 c12:	bd e2       	ldi	r27, 0x2D	; 45
 c14:	90 95       	com	r25
 c16:	81 95       	neg	r24
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__utoa_common>

00000c1e <__mulhi_const_10>:
 c1e:	7a e0       	ldi	r23, 0x0A	; 10
 c20:	97 9f       	mul	r25, r23
 c22:	90 2d       	mov	r25, r0
 c24:	87 9f       	mul	r24, r23
 c26:	80 2d       	mov	r24, r0
 c28:	91 0d       	add	r25, r1
 c2a:	11 24       	eor	r1, r1
 c2c:	08 95       	ret

00000c2e <__utoa_ncheck>:
 c2e:	bb 27       	eor	r27, r27

00000c30 <__utoa_common>:
 c30:	fb 01       	movw	r30, r22
 c32:	55 27       	eor	r21, r21
 c34:	aa 27       	eor	r26, r26
 c36:	88 0f       	add	r24, r24
 c38:	99 1f       	adc	r25, r25
 c3a:	aa 1f       	adc	r26, r26
 c3c:	a4 17       	cp	r26, r20
 c3e:	10 f0       	brcs	.+4      	; 0xc44 <__utoa_common+0x14>
 c40:	a4 1b       	sub	r26, r20
 c42:	83 95       	inc	r24
 c44:	50 51       	subi	r21, 0x10	; 16
 c46:	b9 f7       	brne	.-18     	; 0xc36 <__utoa_common+0x6>
 c48:	a0 5d       	subi	r26, 0xD0	; 208
 c4a:	aa 33       	cpi	r26, 0x3A	; 58
 c4c:	08 f0       	brcs	.+2      	; 0xc50 <__utoa_common+0x20>
 c4e:	a9 5d       	subi	r26, 0xD9	; 217
 c50:	a1 93       	st	Z+, r26
 c52:	00 97       	sbiw	r24, 0x00	; 0
 c54:	79 f7       	brne	.-34     	; 0xc34 <__utoa_common+0x4>
 c56:	b1 11       	cpse	r27, r1
 c58:	b1 93       	st	Z+, r27
 c5a:	11 92       	st	Z+, r1
 c5c:	cb 01       	movw	r24, r22
 c5e:	0c 94 31 06 	jmp	0xc62	; 0xc62 <strrev>

00000c62 <strrev>:
 c62:	dc 01       	movw	r26, r24
 c64:	fc 01       	movw	r30, r24
 c66:	67 2f       	mov	r22, r23
 c68:	71 91       	ld	r23, Z+
 c6a:	77 23       	and	r23, r23
 c6c:	e1 f7       	brne	.-8      	; 0xc66 <strrev+0x4>
 c6e:	32 97       	sbiw	r30, 0x02	; 2
 c70:	04 c0       	rjmp	.+8      	; 0xc7a <strrev+0x18>
 c72:	7c 91       	ld	r23, X
 c74:	6d 93       	st	X+, r22
 c76:	70 83       	st	Z, r23
 c78:	62 91       	ld	r22, -Z
 c7a:	ae 17       	cp	r26, r30
 c7c:	bf 07       	cpc	r27, r31
 c7e:	c8 f3       	brcs	.-14     	; 0xc72 <strrev+0x10>
 c80:	08 95       	ret

00000c82 <_exit>:
 c82:	f8 94       	cli

00000c84 <__stop_program>:
 c84:	ff cf       	rjmp	.-2      	; 0xc84 <__stop_program>
