
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000c98  00000d2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  0080012c  0080012c  00000d58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001570  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b58  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a67  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00003a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065e  00000000  00000000  00003d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000926  00000000  00000000  0000436a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 36       	cpi	r26, 0x64	; 100
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4c 04 	call	0x898	; 0x898 <main>
  9e:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <SCH_tasks_G>
  b4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	ee e2       	ldi	r30, 0x2E	; 46
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e2 5d       	subi	r30, 0xD2	; 210
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e2 5d       	subi	r30, 0xD2	; 210
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ce e2       	ldi	r28, 0x2E	; 46
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	ee e2       	ldi	r30, 0x2E	; 46
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	21 e5       	ldi	r18, 0x51	; 81
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_receive>:
int unsigned combine(unsigned x, unsigned y){
	x -= 48;
	y -= 48;
	unsigned pow = 10;
	return (y * pow) + x;
}
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <USART_receive+0x4>
 222:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 226:	08 95       	ret

00000228 <USART_send>:
 228:	e0 ec       	ldi	r30, 0xC0	; 192
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	90 81       	ld	r25, Z
 22e:	95 ff       	sbrs	r25, 5
 230:	fd cf       	rjmp	.-6      	; 0x22c <USART_send+0x4>
 232:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 236:	08 95       	ret

00000238 <USART_putstring>:
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <USART_putstring+0x18>
 244:	21 96       	adiw	r28, 0x01	; 1
 246:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 24a:	89 91       	ld	r24, Y+
 24c:	81 11       	cpse	r24, r1
 24e:	fb cf       	rjmp	.-10     	; 0x246 <USART_putstring+0xe>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <read_adc>:
 256:	ec e7       	ldi	r30, 0x7C	; 124
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	90 81       	ld	r25, Z
 25c:	90 7f       	andi	r25, 0xF0	; 240
 25e:	90 83       	st	Z, r25
 260:	90 81       	ld	r25, Z
 262:	89 2b       	or	r24, r25
 264:	80 83       	st	Z, r24
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	80 83       	st	Z, r24
 270:	80 81       	ld	r24, Z
 272:	86 fd       	sbrc	r24, 6
 274:	fd cf       	rjmp	.-6      	; 0x270 <read_adc+0x1a>
 276:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 27a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 27e:	08 95       	ret

00000280 <temperatuur>:
 280:	8e e0       	ldi	r24, 0x0E	; 14
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 2b 01 	call	0x256	; 0x256 <read_adc>
 28e:	bc 01       	movw	r22, r24
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__floatunsisf>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e8       	ldi	r20, 0x80	; 128
 29e:	5a e3       	ldi	r21, 0x3A	; 58
 2a0:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 ea       	ldi	r20, 0xA0	; 160
 2aa:	50 e4       	ldi	r21, 0x40	; 64
 2ac:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	5f e3       	ldi	r21, 0x3F	; 63
 2b8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__subsf3>
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	48 ec       	ldi	r20, 0xC8	; 200
 2c2:	52 e4       	ldi	r21, 0x42	; 66
 2c4:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 2c8:	0e 94 c5 04 	call	0x98a	; 0x98a <__fixunssfsi>
 2cc:	dc 01       	movw	r26, r24
 2ce:	cb 01       	movw	r24, r22
 2d0:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <adc_value+0x1>
 2d4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <adc_value>
 2d8:	4a e0       	ldi	r20, 0x0A	; 10
 2da:	6f e5       	ldi	r22, 0x5F	; 95
 2dc:	71 e0       	ldi	r23, 0x01	; 1
 2de:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>
 2e2:	8f e5       	ldi	r24, 0x5F	; 95
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 2ea:	86 e1       	ldi	r24, 0x16	; 22
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 2f2:	08 95       	ret

000002f4 <ldr>:
 2f4:	89 e1       	ldi	r24, 0x19	; 25
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 2b 01 	call	0x256	; 0x256 <read_adc>
 302:	bc 01       	movw	r22, r24
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__floatunsisf>
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	40 e8       	ldi	r20, 0x80	; 128
 312:	5a e3       	ldi	r21, 0x3A	; 58
 314:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	48 ec       	ldi	r20, 0xC8	; 200
 31e:	52 e4       	ldi	r21, 0x42	; 66
 320:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 ec       	ldi	r20, 0xC0	; 192
 32a:	5f e3       	ldi	r21, 0x3F	; 63
 32c:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 330:	0e 94 c5 04 	call	0x98a	; 0x98a <__fixunssfsi>
 334:	dc 01       	movw	r26, r24
 336:	cb 01       	movw	r24, r22
 338:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <adc_value+0x1>
 33c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <adc_value>
 340:	4a e0       	ldi	r20, 0x0A	; 10
 342:	6a e5       	ldi	r22, 0x5A	; 90
 344:	71 e0       	ldi	r23, 0x01	; 1
 346:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>
 34a:	8a e5       	ldi	r24, 0x5A	; 90
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 352:	86 e1       	ldi	r24, 0x16	; 22
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 35a:	08 95       	ret

0000035c <afstand>:
 35c:	80 e2       	ldi	r24, 0x20	; 32
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 364:	5b 9a       	sbi	0x0b, 3	; 11
 366:	85 e3       	ldi	r24, 0x35	; 53
 368:	8a 95       	dec	r24
 36a:	f1 f7       	brne	.-4      	; 0x368 <afstand+0xc>
 36c:	00 00       	nop
 36e:	5b 98       	cbi	0x0b, 3	; 11
 370:	4a 9b       	sbis	0x09, 2	; 9
 372:	fe cf       	rjmp	.-4      	; 0x370 <afstand+0x14>
 374:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 378:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 37c:	4a 99       	sbic	0x09, 2	; 9
 37e:	fe cf       	rjmp	.-4      	; 0x37c <afstand+0x20>
 380:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 384:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__floatunsisf>
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	40 e8       	ldi	r20, 0x80	; 128
 396:	5e e3       	ldi	r21, 0x3E	; 62
 398:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 39c:	0e 94 be 04 	call	0x97c	; 0x97c <__fixsfsi>
 3a0:	dc 01       	movw	r26, r24
 3a2:	cb 01       	movw	r24, r22
 3a4:	4a e0       	ldi	r20, 0x0A	; 10
 3a6:	63 e5       	ldi	r22, 0x53	; 83
 3a8:	71 e0       	ldi	r23, 0x01	; 1
 3aa:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>
 3ae:	83 e5       	ldi	r24, 0x53	; 83
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 3b6:	86 e1       	ldi	r24, 0x16	; 22
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 3be:	08 95       	ret

000003c0 <afstandStil>:
 3c0:	5b 9a       	sbi	0x0b, 3	; 11
 3c2:	85 e3       	ldi	r24, 0x35	; 53
 3c4:	8a 95       	dec	r24
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <afstandStil+0x4>
 3c8:	00 00       	nop
 3ca:	5b 98       	cbi	0x0b, 3	; 11
 3cc:	4a 9b       	sbis	0x09, 2	; 9
 3ce:	fe cf       	rjmp	.-4      	; 0x3cc <afstandStil+0xc>
 3d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3d8:	4a 99       	sbic	0x09, 2	; 9
 3da:	fe cf       	rjmp	.-4      	; 0x3d8 <afstandStil+0x18>
 3dc:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3e0:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__floatunsisf>
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	40 e8       	ldi	r20, 0x80	; 128
 3f2:	5e e3       	ldi	r21, 0x3E	; 62
 3f4:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 3f8:	0e 94 be 04 	call	0x97c	; 0x97c <__fixsfsi>
 3fc:	dc 01       	movw	r26, r24
 3fe:	cb 01       	movw	r24, r22
 400:	4a e0       	ldi	r20, 0x0A	; 10
 402:	63 e5       	ldi	r22, 0x53	; 83
 404:	71 e0       	ldi	r23, 0x01	; 1
 406:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>
 40a:	08 95       	ret

0000040c <upDown>:
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	8a e5       	ldi	r24, 0x5A	; 90
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 ef 05 	call	0xbde	; 0xbde <atoi>
 41c:	ec 01       	movw	r28, r24
 41e:	8f e5       	ldi	r24, 0x5F	; 95
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 ef 05 	call	0xbde	; 0xbde <atoi>
 426:	8c 01       	movw	r16, r24
 428:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <afstandStil>
 42c:	83 e5       	ldi	r24, 0x53	; 83
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	0e 94 ef 05 	call	0xbde	; 0xbde <atoi>
 434:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 438:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 43c:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <afstand_up+0x1>
 440:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <afstand_up>
 444:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <licht_down>
 448:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <licht_down+0x1>
 44c:	c4 17       	cp	r28, r20
 44e:	d5 07       	cpc	r29, r21
 450:	3c f4       	brge	.+14     	; 0x460 <upDown+0x54>
 452:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_down>
 456:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_down+0x1>
 45a:	04 17       	cp	r16, r20
 45c:	15 07       	cpc	r17, r21
 45e:	3c f0       	brlt	.+14     	; 0x46e <upDown+0x62>
 460:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 464:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 468:	45 2b       	or	r20, r21
 46a:	71 f0       	breq	.+28     	; 0x488 <upDown+0x7c>
 46c:	6c c0       	rjmp	.+216    	; 0x546 <upDown+0x13a>
 46e:	a9 01       	movw	r20, r18
 470:	4f 5f       	subi	r20, 0xFF	; 255
 472:	5f 4f       	sbci	r21, 0xFF	; 255
 474:	48 17       	cp	r20, r24
 476:	59 07       	cpc	r21, r25
 478:	34 f5       	brge	.+76     	; 0x4c6 <upDown+0xba>
 47a:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 47e:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 482:	45 2b       	or	r20, r21
 484:	09 f4       	brne	.+2      	; 0x488 <upDown+0x7c>
 486:	66 c0       	rjmp	.+204    	; 0x554 <upDown+0x148>
 488:	2a 98       	cbi	0x05, 2	; 5
 48a:	28 9a       	sbi	0x05, 0	; 5
 48c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <afstand_down>
 490:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <afstand_down+0x1>
 494:	28 17       	cp	r18, r24
 496:	39 07       	cpc	r19, r25
 498:	0c f0       	brlt	.+2      	; 0x49c <upDown+0x90>
 49a:	7b c0       	rjmp	.+246    	; 0x592 <upDown+0x186>
 49c:	29 9a       	sbi	0x05, 1	; 5
 49e:	2f ef       	ldi	r18, 0xFF	; 255
 4a0:	81 ee       	ldi	r24, 0xE1	; 225
 4a2:	94 e0       	ldi	r25, 0x04	; 4
 4a4:	21 50       	subi	r18, 0x01	; 1
 4a6:	80 40       	sbci	r24, 0x00	; 0
 4a8:	90 40       	sbci	r25, 0x00	; 0
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <upDown+0x98>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <upDown+0xa2>
 4ae:	00 00       	nop
 4b0:	29 98       	cbi	0x05, 1	; 5
 4b2:	2f ef       	ldi	r18, 0xFF	; 255
 4b4:	81 ee       	ldi	r24, 0xE1	; 225
 4b6:	94 e0       	ldi	r25, 0x04	; 4
 4b8:	21 50       	subi	r18, 0x01	; 1
 4ba:	80 40       	sbci	r24, 0x00	; 0
 4bc:	90 40       	sbci	r25, 0x00	; 0
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <upDown+0xac>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <upDown+0xb6>
 4c2:	00 00       	nop
 4c4:	66 c0       	rjmp	.+204    	; 0x592 <upDown+0x186>
 4c6:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <licht_up>
 4ca:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <licht_up+0x1>
 4ce:	4c 17       	cp	r20, r28
 4d0:	5d 07       	cpc	r21, r29
 4d2:	3c f4       	brge	.+14     	; 0x4e2 <upDown+0xd6>
 4d4:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_up>
 4d8:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_up+0x1>
 4dc:	40 17       	cp	r20, r16
 4de:	51 07       	cpc	r21, r17
 4e0:	3c f0       	brlt	.+14     	; 0x4f0 <upDown+0xe4>
 4e2:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 4e6:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 4ea:	45 2b       	or	r20, r21
 4ec:	d9 f5       	brne	.+118    	; 0x564 <upDown+0x158>
 4ee:	0d c0       	rjmp	.+26     	; 0x50a <upDown+0xfe>
 4f0:	21 50       	subi	r18, 0x01	; 1
 4f2:	31 09       	sbc	r19, r1
 4f4:	82 17       	cp	r24, r18
 4f6:	93 07       	cpc	r25, r19
 4f8:	0c f0       	brlt	.+2      	; 0x4fc <upDown+0xf0>
 4fa:	4b c0       	rjmp	.+150    	; 0x592 <upDown+0x186>
 4fc:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <__data_end>
 500:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <__data_end+0x1>
 504:	23 2b       	or	r18, r19
 506:	09 f4       	brne	.+2      	; 0x50a <upDown+0xfe>
 508:	44 c0       	rjmp	.+136    	; 0x592 <upDown+0x186>
 50a:	28 98       	cbi	0x05, 0	; 5
 50c:	2a 9a       	sbi	0x05, 2	; 5
 50e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <afstand_up>
 512:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <afstand_up+0x1>
 516:	82 17       	cp	r24, r18
 518:	93 07       	cpc	r25, r19
 51a:	dc f5       	brge	.+118    	; 0x592 <upDown+0x186>
 51c:	29 9a       	sbi	0x05, 1	; 5
 51e:	2f ef       	ldi	r18, 0xFF	; 255
 520:	81 ee       	ldi	r24, 0xE1	; 225
 522:	94 e0       	ldi	r25, 0x04	; 4
 524:	21 50       	subi	r18, 0x01	; 1
 526:	80 40       	sbci	r24, 0x00	; 0
 528:	90 40       	sbci	r25, 0x00	; 0
 52a:	e1 f7       	brne	.-8      	; 0x524 <upDown+0x118>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <upDown+0x122>
 52e:	00 00       	nop
 530:	29 98       	cbi	0x05, 1	; 5
 532:	2f ef       	ldi	r18, 0xFF	; 255
 534:	81 ee       	ldi	r24, 0xE1	; 225
 536:	94 e0       	ldi	r25, 0x04	; 4
 538:	21 50       	subi	r18, 0x01	; 1
 53a:	80 40       	sbci	r24, 0x00	; 0
 53c:	90 40       	sbci	r25, 0x00	; 0
 53e:	e1 f7       	brne	.-8      	; 0x538 <upDown+0x12c>
 540:	00 c0       	rjmp	.+0      	; 0x542 <upDown+0x136>
 542:	00 00       	nop
 544:	26 c0       	rjmp	.+76     	; 0x592 <upDown+0x186>
 546:	a9 01       	movw	r20, r18
 548:	4f 5f       	subi	r20, 0xFF	; 255
 54a:	5f 4f       	sbci	r21, 0xFF	; 255
 54c:	48 17       	cp	r20, r24
 54e:	59 07       	cpc	r21, r25
 550:	7c f4       	brge	.+30     	; 0x570 <upDown+0x164>
 552:	9a cf       	rjmp	.-204    	; 0x488 <upDown+0x7c>
 554:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <licht_up>
 558:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <licht_up+0x1>
 55c:	4c 17       	cp	r20, r28
 55e:	5d 07       	cpc	r21, r29
 560:	a4 f6       	brge	.-88     	; 0x50a <upDown+0xfe>
 562:	0e c0       	rjmp	.+28     	; 0x580 <upDown+0x174>
 564:	21 50       	subi	r18, 0x01	; 1
 566:	31 09       	sbc	r19, r1
 568:	82 17       	cp	r24, r18
 56a:	93 07       	cpc	r25, r19
 56c:	74 f2       	brlt	.-100    	; 0x50a <upDown+0xfe>
 56e:	11 c0       	rjmp	.+34     	; 0x592 <upDown+0x186>
 570:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <licht_up>
 574:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <licht_up+0x1>
 578:	4c 17       	cp	r20, r28
 57a:	5d 07       	cpc	r21, r29
 57c:	9c f7       	brge	.-26     	; 0x564 <upDown+0x158>
 57e:	aa cf       	rjmp	.-172    	; 0x4d4 <upDown+0xc8>
 580:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_up>
 584:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_up+0x1>
 588:	40 17       	cp	r20, r16
 58a:	51 07       	cpc	r21, r17
 58c:	0c f0       	brlt	.+2      	; 0x590 <upDown+0x184>
 58e:	bd cf       	rjmp	.-134    	; 0x50a <upDown+0xfe>
 590:	af cf       	rjmp	.-162    	; 0x4f0 <upDown+0xe4>
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	08 95       	ret

0000059c <newRegel>:
 59c:	8d e0       	ldi	r24, 0x0D	; 13
 59e:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 5a2:	8a e0       	ldi	r24, 0x0A	; 10
 5a4:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 5a8:	08 95       	ret

000005aa <combine3>:
	x -= 48;
	y -= 48;
	z -= 48;
	unsigned pow1 = 10;
	unsigned pow2 = 100;
	return (z * pow2) + (y * pow1) + x;
 5aa:	40 53       	subi	r20, 0x30	; 48
 5ac:	51 09       	sbc	r21, r1
 5ae:	e4 e6       	ldi	r30, 0x64	; 100
 5b0:	e4 9f       	mul	r30, r20
 5b2:	90 01       	movw	r18, r0
 5b4:	e5 9f       	mul	r30, r21
 5b6:	30 0d       	add	r19, r0
 5b8:	11 24       	eor	r1, r1
 5ba:	82 0f       	add	r24, r18
 5bc:	93 1f       	adc	r25, r19
 5be:	c0 97       	sbiw	r24, 0x30	; 48
 5c0:	60 53       	subi	r22, 0x30	; 48
 5c2:	71 09       	sbc	r23, r1
 5c4:	9b 01       	movw	r18, r22
 5c6:	22 0f       	add	r18, r18
 5c8:	33 1f       	adc	r19, r19
 5ca:	66 0f       	add	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	62 0f       	add	r22, r18
 5d8:	73 1f       	adc	r23, r19
}
 5da:	86 0f       	add	r24, r22
 5dc:	97 1f       	adc	r25, r23
 5de:	08 95       	ret

000005e0 <__vector_18>:

ISR ( USART_RX_vect ){
 5e0:	1f 92       	push	r1
 5e2:	0f 92       	push	r0
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	0f 92       	push	r0
 5e8:	11 24       	eor	r1, r1
 5ea:	2f 93       	push	r18
 5ec:	3f 93       	push	r19
 5ee:	4f 93       	push	r20
 5f0:	5f 93       	push	r21
 5f2:	6f 93       	push	r22
 5f4:	7f 93       	push	r23
 5f6:	8f 93       	push	r24
 5f8:	9f 93       	push	r25
 5fa:	af 93       	push	r26
 5fc:	bf 93       	push	r27
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	ef 93       	push	r30
 604:	ff 93       	push	r31
	unsigned char ReceivedByte;
	ReceivedByte = UDR0 ; // Fetch the received byte value into the variable " ByteReceived "
 606:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	switch(ReceivedByte){
 60a:	83 33       	cpi	r24, 0x33	; 51
 60c:	39 f1       	breq	.+78     	; 0x65c <__vector_18+0x7c>
 60e:	28 f4       	brcc	.+10     	; 0x61a <__vector_18+0x3a>
 610:	81 33       	cpi	r24, 0x31	; 49
 612:	51 f0       	breq	.+20     	; 0x628 <__vector_18+0x48>
 614:	82 33       	cpi	r24, 0x32	; 50
 616:	a9 f0       	breq	.+42     	; 0x642 <__vector_18+0x62>
 618:	c2 c0       	rjmp	.+388    	; 0x79e <__vector_18+0x1be>
 61a:	87 33       	cpi	r24, 0x37	; 55
 61c:	09 f4       	brne	.+2      	; 0x620 <__vector_18+0x40>
 61e:	93 c0       	rjmp	.+294    	; 0x746 <__vector_18+0x166>
 620:	88 33       	cpi	r24, 0x38	; 56
 622:	09 f4       	brne	.+2      	; 0x626 <__vector_18+0x46>
 624:	aa c0       	rjmp	.+340    	; 0x77a <__vector_18+0x19a>
 626:	bb c0       	rjmp	.+374    	; 0x79e <__vector_18+0x1be>
		// 1 = rolluik UITrollen // Rood
		case '1':
			manual = 1;
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 630:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			afstand_manual = 5;
 634:	85 e0       	ldi	r24, 0x05	; 5
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 63c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 640:	ae c0       	rjmp	.+348    	; 0x79e <__vector_18+0x1be>
			
		// 2 = rolluik OProllen // Groen
		case '2':
			manual = 1;
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 64a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			afstand_manual = 10;
 64e:	8a e0       	ldi	r24, 0x0A	; 10
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 656:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 65a:	a1 c0       	rjmp	.+322    	; 0x79e <__vector_18+0x1be>
			
		// 3 = set
		case '3':
			manual = 0;
 65c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__data_end+0x1>
 660:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
			temp_down = combine((int) USART_receive(), (int) USART_receive());
 664:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 668:	c8 2f       	mov	r28, r24
 66a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 66e:	2c 2f       	mov	r18, r28
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	20 53       	subi	r18, 0x30	; 48
 674:	31 09       	sbc	r19, r1
 676:	a9 01       	movw	r20, r18
 678:	44 0f       	add	r20, r20
 67a:	55 1f       	adc	r21, r21
 67c:	22 0f       	add	r18, r18
 67e:	33 1f       	adc	r19, r19
 680:	22 0f       	add	r18, r18
 682:	33 1f       	adc	r19, r19
 684:	22 0f       	add	r18, r18
 686:	33 1f       	adc	r19, r19
 688:	24 0f       	add	r18, r20
 68a:	35 1f       	adc	r19, r21
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	c0 97       	sbiw	r24, 0x30	; 48
 690:	28 0f       	add	r18, r24
 692:	39 1f       	adc	r19, r25
 694:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <temp_down+0x1>
 698:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <temp_down>
			temp_up = combine((int) USART_receive(), (int) USART_receive());
 69c:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 6a0:	c8 2f       	mov	r28, r24
 6a2:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 6a6:	2c 2f       	mov	r18, r28
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	20 53       	subi	r18, 0x30	; 48
 6ac:	31 09       	sbc	r19, r1
 6ae:	a9 01       	movw	r20, r18
 6b0:	44 0f       	add	r20, r20
 6b2:	55 1f       	adc	r21, r21
 6b4:	22 0f       	add	r18, r18
 6b6:	33 1f       	adc	r19, r19
 6b8:	22 0f       	add	r18, r18
 6ba:	33 1f       	adc	r19, r19
 6bc:	22 0f       	add	r18, r18
 6be:	33 1f       	adc	r19, r19
 6c0:	24 0f       	add	r18, r20
 6c2:	35 1f       	adc	r19, r21
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	c0 97       	sbiw	r24, 0x30	; 48
 6c8:	28 0f       	add	r18, r24
 6ca:	39 1f       	adc	r19, r25
 6cc:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <temp_up+0x1>
 6d0:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <temp_up>
			licht_down = combine((int) USART_receive(), (int) USART_receive());
 6d4:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 6d8:	c8 2f       	mov	r28, r24
 6da:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 6de:	2c 2f       	mov	r18, r28
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	20 53       	subi	r18, 0x30	; 48
 6e4:	31 09       	sbc	r19, r1
 6e6:	a9 01       	movw	r20, r18
 6e8:	44 0f       	add	r20, r20
 6ea:	55 1f       	adc	r21, r21
 6ec:	22 0f       	add	r18, r18
 6ee:	33 1f       	adc	r19, r19
 6f0:	22 0f       	add	r18, r18
 6f2:	33 1f       	adc	r19, r19
 6f4:	22 0f       	add	r18, r18
 6f6:	33 1f       	adc	r19, r19
 6f8:	24 0f       	add	r18, r20
 6fa:	35 1f       	adc	r19, r21
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	c0 97       	sbiw	r24, 0x30	; 48
 700:	28 0f       	add	r18, r24
 702:	39 1f       	adc	r19, r25
 704:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <licht_down+0x1>
 708:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <licht_down>
			licht_up = combine((int) USART_receive(), (int) USART_receive());
 70c:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 710:	c8 2f       	mov	r28, r24
 712:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 716:	2c 2f       	mov	r18, r28
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	20 53       	subi	r18, 0x30	; 48
 71c:	31 09       	sbc	r19, r1
 71e:	a9 01       	movw	r20, r18
 720:	44 0f       	add	r20, r20
 722:	55 1f       	adc	r21, r21
 724:	22 0f       	add	r18, r18
 726:	33 1f       	adc	r19, r19
 728:	22 0f       	add	r18, r18
 72a:	33 1f       	adc	r19, r19
 72c:	22 0f       	add	r18, r18
 72e:	33 1f       	adc	r19, r19
 730:	24 0f       	add	r18, r20
 732:	35 1f       	adc	r19, r21
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	c0 97       	sbiw	r24, 0x30	; 48
 738:	28 0f       	add	r18, r24
 73a:	39 1f       	adc	r19, r25
 73c:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <licht_up+0x1>
 740:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <licht_up>
			return;
 744:	2c c0       	rjmp	.+88     	; 0x79e <__vector_18+0x1be>
			
		// 7 = uit-/oprol afstand
		case '7':
			manual = 1;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 74e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			int uitoprol = combine3((int) USART_receive(), (int) USART_receive(), (int) USART_receive());
 752:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 756:	d8 2f       	mov	r29, r24
 758:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 75c:	c8 2f       	mov	r28, r24
 75e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 762:	4d 2f       	mov	r20, r29
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	6c 2f       	mov	r22, r28
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <combine3>
			
			afstand_manual = uitoprol;
 770:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 774:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 778:	12 c0       	rjmp	.+36     	; 0x79e <__vector_18+0x1be>
			
		// 8 = set manual
		case '8':
			manual = (int) USART_receive() - 48;
 77a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	c0 97       	sbiw	r24, 0x30	; 48
 782:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 786:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			if (manual == 1){
 78a:	01 97       	sbiw	r24, 0x01	; 1
 78c:	41 f4       	brne	.+16     	; 0x79e <__vector_18+0x1be>
				afstand_manual = (int) atoi(afstand_sensor);
 78e:	83 e5       	ldi	r24, 0x53	; 83
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	0e 94 ef 05 	call	0xbde	; 0xbde <atoi>
 796:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 79a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
			
		default:
			return;
	}
 79e:	ff 91       	pop	r31
 7a0:	ef 91       	pop	r30
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	bf 91       	pop	r27
 7a8:	af 91       	pop	r26
 7aa:	9f 91       	pop	r25
 7ac:	8f 91       	pop	r24
 7ae:	7f 91       	pop	r23
 7b0:	6f 91       	pop	r22
 7b2:	5f 91       	pop	r21
 7b4:	4f 91       	pop	r20
 7b6:	3f 91       	pop	r19
 7b8:	2f 91       	pop	r18
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <init_connectie>:
void init_scheduler();
void init_lampjes();

void init_connectie(){
	// disable U2X mode
	UCSR0A = 0;
 7c4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// Set frame format: 8data, 2stop bit 
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 7c8:	8e e0       	ldi	r24, 0x0E	; 14
 7ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 7ce:	08 95       	ret

000007d0 <init_USART>:
}

void init_USART(){
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 7d0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 7d4:	87 e6       	ldi	r24, 0x67	; 103
 7d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 7da:	e1 ec       	ldi	r30, 0xC1	; 193
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	88 e1       	ldi	r24, 0x18	; 24
 7e0:	80 83       	st	Z, r24
	
	UCSR0C = (3<<UCSZ00);
 7e2:	86 e0       	ldi	r24, 0x06	; 6
 7e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	UCSR0B |= (1 << RXCIE0 ); // Enable the USART Recieve Complete interrupt ( USART_RXC )
 7e8:	80 81       	ld	r24, Z
 7ea:	80 68       	ori	r24, 0x80	; 128
 7ec:	80 83       	st	Z, r24
	sei (); // Enable the Global Interrupt Enable flag so that interrupts can be processed
 7ee:	78 94       	sei
 7f0:	08 95       	ret

000007f2 <init_scheduler>:
}

void init_scheduler()
{
	SCH_Init_T1();
 7f2:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temperatuur,1,100);
 7f6:	44 e6       	ldi	r20, 0x64	; 100
 7f8:	50 e0       	ldi	r21, 0x00	; 0
 7fa:	61 e0       	ldi	r22, 0x01	; 1
 7fc:	70 e0       	ldi	r23, 0x00	; 0
 7fe:	80 e4       	ldi	r24, 0x40	; 64
 800:	91 e0       	ldi	r25, 0x01	; 1
 802:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(ldr,2,100);
 806:	44 e6       	ldi	r20, 0x64	; 100
 808:	50 e0       	ldi	r21, 0x00	; 0
 80a:	62 e0       	ldi	r22, 0x02	; 2
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	8a e7       	ldi	r24, 0x7A	; 122
 810:	91 e0       	ldi	r25, 0x01	; 1
 812:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(afstand,3,100);
 816:	44 e6       	ldi	r20, 0x64	; 100
 818:	50 e0       	ldi	r21, 0x00	; 0
 81a:	63 e0       	ldi	r22, 0x03	; 3
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	8e ea       	ldi	r24, 0xAE	; 174
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(newRegel,6,100);
 826:	44 e6       	ldi	r20, 0x64	; 100
 828:	50 e0       	ldi	r21, 0x00	; 0
 82a:	66 e0       	ldi	r22, 0x06	; 6
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	8e ec       	ldi	r24, 0xCE	; 206
 830:	92 e0       	ldi	r25, 0x02	; 2
 832:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(upDown,8,20);
 836:	44 e1       	ldi	r20, 0x14	; 20
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	68 e0       	ldi	r22, 0x08	; 8
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	86 e0       	ldi	r24, 0x06	; 6
 840:	92 e0       	ldi	r25, 0x02	; 2
 842:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 846:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 84a:	08 95       	ret

0000084c <init_adc>:
}

void init_adc(){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
 84c:	ea e7       	ldi	r30, 0x7A	; 122
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 81       	ld	r24, Z
 852:	87 60       	ori	r24, 0x07	; 7
 854:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
 856:	ac e7       	ldi	r26, 0x7C	; 124
 858:	b0 e0       	ldi	r27, 0x00	; 0
 85a:	8c 91       	ld	r24, X
 85c:	80 64       	ori	r24, 0x40	; 64
 85e:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
 860:	80 81       	ld	r24, Z
 862:	80 68       	ori	r24, 0x80	; 128
 864:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 866:	80 81       	ld	r24, Z
 868:	80 64       	ori	r24, 0x40	; 64
 86a:	80 83       	st	Z, r24
 86c:	08 95       	ret

0000086e <init_dist>:
}

void init_dist(){
	DDRD |= _BV(PD3); // Pin 3 Trigger Output
 86e:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~_BV(PD2); // Pin 2 Echo Input
 870:	52 98       	cbi	0x0a, 2	; 10
 872:	08 95       	ret

00000874 <init_lampjes>:
}

void init_lampjes(){
	DDRB |= _BV(PB0);	// pin0 B = output
 874:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1);	// pin1 B = output
 876:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(PB2);	// pin2 B = output
 878:	22 9a       	sbi	0x04, 2	; 4
	
	PORTB |= (1 << PB2); // groen lampje aan
 87a:	2a 9a       	sbi	0x05, 2	; 5
 87c:	08 95       	ret

0000087e <setup>:
		SCH_Dispatch_Tasks();
	}
}

void setup(){
	init_connectie();
 87e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <init_connectie>
	init_adc();			// Setup the ADC
 882:	0e 94 26 04 	call	0x84c	; 0x84c <init_adc>
	init_USART();			// Setup the USART
 886:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <init_USART>
	init_dist();
 88a:	0e 94 37 04 	call	0x86e	; 0x86e <init_dist>
	init_scheduler();
 88e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <init_scheduler>
	init_lampjes();
 892:	0e 94 3a 04 	call	0x874	; 0x874 <init_lampjes>
 896:	08 95       	ret

00000898 <main>:

int main(void);
void setup();

int main(void){
	setup();
 898:	0e 94 3f 04 	call	0x87e	; 0x87e <setup>
	while(1) {
		SCH_Dispatch_Tasks();
 89c:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 8a0:	fd cf       	rjmp	.-6      	; 0x89c <main+0x4>

000008a2 <__subsf3>:
 8a2:	50 58       	subi	r21, 0x80	; 128

000008a4 <__addsf3>:
 8a4:	bb 27       	eor	r27, r27
 8a6:	aa 27       	eor	r26, r26
 8a8:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__addsf3x>
 8ac:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_round>
 8b0:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fp_pscA>
 8b4:	38 f0       	brcs	.+14     	; 0x8c4 <__addsf3+0x20>
 8b6:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_pscB>
 8ba:	20 f0       	brcs	.+8      	; 0x8c4 <__addsf3+0x20>
 8bc:	39 f4       	brne	.+14     	; 0x8cc <__addsf3+0x28>
 8be:	9f 3f       	cpi	r25, 0xFF	; 255
 8c0:	19 f4       	brne	.+6      	; 0x8c8 <__addsf3+0x24>
 8c2:	26 f4       	brtc	.+8      	; 0x8cc <__addsf3+0x28>
 8c4:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_nan>
 8c8:	0e f4       	brtc	.+2      	; 0x8cc <__addsf3+0x28>
 8ca:	e0 95       	com	r30
 8cc:	e7 fb       	bst	r30, 7
 8ce:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__fp_inf>

000008d2 <__addsf3x>:
 8d2:	e9 2f       	mov	r30, r25
 8d4:	0e 94 59 05 	call	0xab2	; 0xab2 <__fp_split3>
 8d8:	58 f3       	brcs	.-42     	; 0x8b0 <__addsf3+0xc>
 8da:	ba 17       	cp	r27, r26
 8dc:	62 07       	cpc	r22, r18
 8de:	73 07       	cpc	r23, r19
 8e0:	84 07       	cpc	r24, r20
 8e2:	95 07       	cpc	r25, r21
 8e4:	20 f0       	brcs	.+8      	; 0x8ee <__addsf3x+0x1c>
 8e6:	79 f4       	brne	.+30     	; 0x906 <__stack+0x7>
 8e8:	a6 f5       	brtc	.+104    	; 0x952 <__stack+0x53>
 8ea:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_zero>
 8ee:	0e f4       	brtc	.+2      	; 0x8f2 <__addsf3x+0x20>
 8f0:	e0 95       	com	r30
 8f2:	0b 2e       	mov	r0, r27
 8f4:	ba 2f       	mov	r27, r26
 8f6:	a0 2d       	mov	r26, r0
 8f8:	0b 01       	movw	r0, r22
 8fa:	b9 01       	movw	r22, r18
 8fc:	90 01       	movw	r18, r0
 8fe:	0c 01       	movw	r0, r24
 900:	ca 01       	movw	r24, r20
 902:	a0 01       	movw	r20, r0
 904:	11 24       	eor	r1, r1
 906:	ff 27       	eor	r31, r31
 908:	59 1b       	sub	r21, r25
 90a:	99 f0       	breq	.+38     	; 0x932 <__stack+0x33>
 90c:	59 3f       	cpi	r21, 0xF9	; 249
 90e:	50 f4       	brcc	.+20     	; 0x924 <__stack+0x25>
 910:	50 3e       	cpi	r21, 0xE0	; 224
 912:	68 f1       	brcs	.+90     	; 0x96e <__stack+0x6f>
 914:	1a 16       	cp	r1, r26
 916:	f0 40       	sbci	r31, 0x00	; 0
 918:	a2 2f       	mov	r26, r18
 91a:	23 2f       	mov	r18, r19
 91c:	34 2f       	mov	r19, r20
 91e:	44 27       	eor	r20, r20
 920:	58 5f       	subi	r21, 0xF8	; 248
 922:	f3 cf       	rjmp	.-26     	; 0x90a <__stack+0xb>
 924:	46 95       	lsr	r20
 926:	37 95       	ror	r19
 928:	27 95       	ror	r18
 92a:	a7 95       	ror	r26
 92c:	f0 40       	sbci	r31, 0x00	; 0
 92e:	53 95       	inc	r21
 930:	c9 f7       	brne	.-14     	; 0x924 <__stack+0x25>
 932:	7e f4       	brtc	.+30     	; 0x952 <__stack+0x53>
 934:	1f 16       	cp	r1, r31
 936:	ba 0b       	sbc	r27, r26
 938:	62 0b       	sbc	r22, r18
 93a:	73 0b       	sbc	r23, r19
 93c:	84 0b       	sbc	r24, r20
 93e:	ba f0       	brmi	.+46     	; 0x96e <__stack+0x6f>
 940:	91 50       	subi	r25, 0x01	; 1
 942:	a1 f0       	breq	.+40     	; 0x96c <__stack+0x6d>
 944:	ff 0f       	add	r31, r31
 946:	bb 1f       	adc	r27, r27
 948:	66 1f       	adc	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	c2 f7       	brpl	.-16     	; 0x940 <__stack+0x41>
 950:	0e c0       	rjmp	.+28     	; 0x96e <__stack+0x6f>
 952:	ba 0f       	add	r27, r26
 954:	62 1f       	adc	r22, r18
 956:	73 1f       	adc	r23, r19
 958:	84 1f       	adc	r24, r20
 95a:	48 f4       	brcc	.+18     	; 0x96e <__stack+0x6f>
 95c:	87 95       	ror	r24
 95e:	77 95       	ror	r23
 960:	67 95       	ror	r22
 962:	b7 95       	ror	r27
 964:	f7 95       	ror	r31
 966:	9e 3f       	cpi	r25, 0xFE	; 254
 968:	08 f0       	brcs	.+2      	; 0x96c <__stack+0x6d>
 96a:	b0 cf       	rjmp	.-160    	; 0x8cc <__addsf3+0x28>
 96c:	93 95       	inc	r25
 96e:	88 0f       	add	r24, r24
 970:	08 f0       	brcs	.+2      	; 0x974 <__stack+0x75>
 972:	99 27       	eor	r25, r25
 974:	ee 0f       	add	r30, r30
 976:	97 95       	ror	r25
 978:	87 95       	ror	r24
 97a:	08 95       	ret

0000097c <__fixsfsi>:
 97c:	0e 94 c5 04 	call	0x98a	; 0x98a <__fixunssfsi>
 980:	68 94       	set
 982:	b1 11       	cpse	r27, r1
 984:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_szero>
 988:	08 95       	ret

0000098a <__fixunssfsi>:
 98a:	0e 94 61 05 	call	0xac2	; 0xac2 <__fp_splitA>
 98e:	88 f0       	brcs	.+34     	; 0x9b2 <__fixunssfsi+0x28>
 990:	9f 57       	subi	r25, 0x7F	; 127
 992:	98 f0       	brcs	.+38     	; 0x9ba <__fixunssfsi+0x30>
 994:	b9 2f       	mov	r27, r25
 996:	99 27       	eor	r25, r25
 998:	b7 51       	subi	r27, 0x17	; 23
 99a:	b0 f0       	brcs	.+44     	; 0x9c8 <__fixunssfsi+0x3e>
 99c:	e1 f0       	breq	.+56     	; 0x9d6 <__fixunssfsi+0x4c>
 99e:	66 0f       	add	r22, r22
 9a0:	77 1f       	adc	r23, r23
 9a2:	88 1f       	adc	r24, r24
 9a4:	99 1f       	adc	r25, r25
 9a6:	1a f0       	brmi	.+6      	; 0x9ae <__fixunssfsi+0x24>
 9a8:	ba 95       	dec	r27
 9aa:	c9 f7       	brne	.-14     	; 0x99e <__fixunssfsi+0x14>
 9ac:	14 c0       	rjmp	.+40     	; 0x9d6 <__fixunssfsi+0x4c>
 9ae:	b1 30       	cpi	r27, 0x01	; 1
 9b0:	91 f0       	breq	.+36     	; 0x9d6 <__fixunssfsi+0x4c>
 9b2:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__fp_zero>
 9b6:	b1 e0       	ldi	r27, 0x01	; 1
 9b8:	08 95       	ret
 9ba:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_zero>
 9be:	67 2f       	mov	r22, r23
 9c0:	78 2f       	mov	r23, r24
 9c2:	88 27       	eor	r24, r24
 9c4:	b8 5f       	subi	r27, 0xF8	; 248
 9c6:	39 f0       	breq	.+14     	; 0x9d6 <__fixunssfsi+0x4c>
 9c8:	b9 3f       	cpi	r27, 0xF9	; 249
 9ca:	cc f3       	brlt	.-14     	; 0x9be <__fixunssfsi+0x34>
 9cc:	86 95       	lsr	r24
 9ce:	77 95       	ror	r23
 9d0:	67 95       	ror	r22
 9d2:	b3 95       	inc	r27
 9d4:	d9 f7       	brne	.-10     	; 0x9cc <__fixunssfsi+0x42>
 9d6:	3e f4       	brtc	.+14     	; 0x9e6 <__fixunssfsi+0x5c>
 9d8:	90 95       	com	r25
 9da:	80 95       	com	r24
 9dc:	70 95       	com	r23
 9de:	61 95       	neg	r22
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	8f 4f       	sbci	r24, 0xFF	; 255
 9e4:	9f 4f       	sbci	r25, 0xFF	; 255
 9e6:	08 95       	ret

000009e8 <__floatunsisf>:
 9e8:	e8 94       	clt
 9ea:	09 c0       	rjmp	.+18     	; 0x9fe <__floatsisf+0x12>

000009ec <__floatsisf>:
 9ec:	97 fb       	bst	r25, 7
 9ee:	3e f4       	brtc	.+14     	; 0x9fe <__floatsisf+0x12>
 9f0:	90 95       	com	r25
 9f2:	80 95       	com	r24
 9f4:	70 95       	com	r23
 9f6:	61 95       	neg	r22
 9f8:	7f 4f       	sbci	r23, 0xFF	; 255
 9fa:	8f 4f       	sbci	r24, 0xFF	; 255
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	99 23       	and	r25, r25
 a00:	a9 f0       	breq	.+42     	; 0xa2c <__floatsisf+0x40>
 a02:	f9 2f       	mov	r31, r25
 a04:	96 e9       	ldi	r25, 0x96	; 150
 a06:	bb 27       	eor	r27, r27
 a08:	93 95       	inc	r25
 a0a:	f6 95       	lsr	r31
 a0c:	87 95       	ror	r24
 a0e:	77 95       	ror	r23
 a10:	67 95       	ror	r22
 a12:	b7 95       	ror	r27
 a14:	f1 11       	cpse	r31, r1
 a16:	f8 cf       	rjmp	.-16     	; 0xa08 <__floatsisf+0x1c>
 a18:	fa f4       	brpl	.+62     	; 0xa58 <__floatsisf+0x6c>
 a1a:	bb 0f       	add	r27, r27
 a1c:	11 f4       	brne	.+4      	; 0xa22 <__floatsisf+0x36>
 a1e:	60 ff       	sbrs	r22, 0
 a20:	1b c0       	rjmp	.+54     	; 0xa58 <__floatsisf+0x6c>
 a22:	6f 5f       	subi	r22, 0xFF	; 255
 a24:	7f 4f       	sbci	r23, 0xFF	; 255
 a26:	8f 4f       	sbci	r24, 0xFF	; 255
 a28:	9f 4f       	sbci	r25, 0xFF	; 255
 a2a:	16 c0       	rjmp	.+44     	; 0xa58 <__floatsisf+0x6c>
 a2c:	88 23       	and	r24, r24
 a2e:	11 f0       	breq	.+4      	; 0xa34 <__floatsisf+0x48>
 a30:	96 e9       	ldi	r25, 0x96	; 150
 a32:	11 c0       	rjmp	.+34     	; 0xa56 <__floatsisf+0x6a>
 a34:	77 23       	and	r23, r23
 a36:	21 f0       	breq	.+8      	; 0xa40 <__floatsisf+0x54>
 a38:	9e e8       	ldi	r25, 0x8E	; 142
 a3a:	87 2f       	mov	r24, r23
 a3c:	76 2f       	mov	r23, r22
 a3e:	05 c0       	rjmp	.+10     	; 0xa4a <__floatsisf+0x5e>
 a40:	66 23       	and	r22, r22
 a42:	71 f0       	breq	.+28     	; 0xa60 <__floatsisf+0x74>
 a44:	96 e8       	ldi	r25, 0x86	; 134
 a46:	86 2f       	mov	r24, r22
 a48:	70 e0       	ldi	r23, 0x00	; 0
 a4a:	60 e0       	ldi	r22, 0x00	; 0
 a4c:	2a f0       	brmi	.+10     	; 0xa58 <__floatsisf+0x6c>
 a4e:	9a 95       	dec	r25
 a50:	66 0f       	add	r22, r22
 a52:	77 1f       	adc	r23, r23
 a54:	88 1f       	adc	r24, r24
 a56:	da f7       	brpl	.-10     	; 0xa4e <__floatsisf+0x62>
 a58:	88 0f       	add	r24, r24
 a5a:	96 95       	lsr	r25
 a5c:	87 95       	ror	r24
 a5e:	97 f9       	bld	r25, 7
 a60:	08 95       	ret

00000a62 <__fp_inf>:
 a62:	97 f9       	bld	r25, 7
 a64:	9f 67       	ori	r25, 0x7F	; 127
 a66:	80 e8       	ldi	r24, 0x80	; 128
 a68:	70 e0       	ldi	r23, 0x00	; 0
 a6a:	60 e0       	ldi	r22, 0x00	; 0
 a6c:	08 95       	ret

00000a6e <__fp_nan>:
 a6e:	9f ef       	ldi	r25, 0xFF	; 255
 a70:	80 ec       	ldi	r24, 0xC0	; 192
 a72:	08 95       	ret

00000a74 <__fp_pscA>:
 a74:	00 24       	eor	r0, r0
 a76:	0a 94       	dec	r0
 a78:	16 16       	cp	r1, r22
 a7a:	17 06       	cpc	r1, r23
 a7c:	18 06       	cpc	r1, r24
 a7e:	09 06       	cpc	r0, r25
 a80:	08 95       	ret

00000a82 <__fp_pscB>:
 a82:	00 24       	eor	r0, r0
 a84:	0a 94       	dec	r0
 a86:	12 16       	cp	r1, r18
 a88:	13 06       	cpc	r1, r19
 a8a:	14 06       	cpc	r1, r20
 a8c:	05 06       	cpc	r0, r21
 a8e:	08 95       	ret

00000a90 <__fp_round>:
 a90:	09 2e       	mov	r0, r25
 a92:	03 94       	inc	r0
 a94:	00 0c       	add	r0, r0
 a96:	11 f4       	brne	.+4      	; 0xa9c <__fp_round+0xc>
 a98:	88 23       	and	r24, r24
 a9a:	52 f0       	brmi	.+20     	; 0xab0 <__fp_round+0x20>
 a9c:	bb 0f       	add	r27, r27
 a9e:	40 f4       	brcc	.+16     	; 0xab0 <__fp_round+0x20>
 aa0:	bf 2b       	or	r27, r31
 aa2:	11 f4       	brne	.+4      	; 0xaa8 <__fp_round+0x18>
 aa4:	60 ff       	sbrs	r22, 0
 aa6:	04 c0       	rjmp	.+8      	; 0xab0 <__fp_round+0x20>
 aa8:	6f 5f       	subi	r22, 0xFF	; 255
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	8f 4f       	sbci	r24, 0xFF	; 255
 aae:	9f 4f       	sbci	r25, 0xFF	; 255
 ab0:	08 95       	ret

00000ab2 <__fp_split3>:
 ab2:	57 fd       	sbrc	r21, 7
 ab4:	90 58       	subi	r25, 0x80	; 128
 ab6:	44 0f       	add	r20, r20
 ab8:	55 1f       	adc	r21, r21
 aba:	59 f0       	breq	.+22     	; 0xad2 <__fp_splitA+0x10>
 abc:	5f 3f       	cpi	r21, 0xFF	; 255
 abe:	71 f0       	breq	.+28     	; 0xadc <__fp_splitA+0x1a>
 ac0:	47 95       	ror	r20

00000ac2 <__fp_splitA>:
 ac2:	88 0f       	add	r24, r24
 ac4:	97 fb       	bst	r25, 7
 ac6:	99 1f       	adc	r25, r25
 ac8:	61 f0       	breq	.+24     	; 0xae2 <__fp_splitA+0x20>
 aca:	9f 3f       	cpi	r25, 0xFF	; 255
 acc:	79 f0       	breq	.+30     	; 0xaec <__fp_splitA+0x2a>
 ace:	87 95       	ror	r24
 ad0:	08 95       	ret
 ad2:	12 16       	cp	r1, r18
 ad4:	13 06       	cpc	r1, r19
 ad6:	14 06       	cpc	r1, r20
 ad8:	55 1f       	adc	r21, r21
 ada:	f2 cf       	rjmp	.-28     	; 0xac0 <__fp_split3+0xe>
 adc:	46 95       	lsr	r20
 ade:	f1 df       	rcall	.-30     	; 0xac2 <__fp_splitA>
 ae0:	08 c0       	rjmp	.+16     	; 0xaf2 <__fp_splitA+0x30>
 ae2:	16 16       	cp	r1, r22
 ae4:	17 06       	cpc	r1, r23
 ae6:	18 06       	cpc	r1, r24
 ae8:	99 1f       	adc	r25, r25
 aea:	f1 cf       	rjmp	.-30     	; 0xace <__fp_splitA+0xc>
 aec:	86 95       	lsr	r24
 aee:	71 05       	cpc	r23, r1
 af0:	61 05       	cpc	r22, r1
 af2:	08 94       	sec
 af4:	08 95       	ret

00000af6 <__fp_zero>:
 af6:	e8 94       	clt

00000af8 <__fp_szero>:
 af8:	bb 27       	eor	r27, r27
 afa:	66 27       	eor	r22, r22
 afc:	77 27       	eor	r23, r23
 afe:	cb 01       	movw	r24, r22
 b00:	97 f9       	bld	r25, 7
 b02:	08 95       	ret

00000b04 <__mulsf3>:
 b04:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3x>
 b08:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_round>
 b0c:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fp_pscA>
 b10:	38 f0       	brcs	.+14     	; 0xb20 <__mulsf3+0x1c>
 b12:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_pscB>
 b16:	20 f0       	brcs	.+8      	; 0xb20 <__mulsf3+0x1c>
 b18:	95 23       	and	r25, r21
 b1a:	11 f0       	breq	.+4      	; 0xb20 <__mulsf3+0x1c>
 b1c:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__fp_inf>
 b20:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_nan>
 b24:	11 24       	eor	r1, r1
 b26:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_szero>

00000b2a <__mulsf3x>:
 b2a:	0e 94 59 05 	call	0xab2	; 0xab2 <__fp_split3>
 b2e:	70 f3       	brcs	.-36     	; 0xb0c <__mulsf3+0x8>

00000b30 <__mulsf3_pse>:
 b30:	95 9f       	mul	r25, r21
 b32:	c1 f3       	breq	.-16     	; 0xb24 <__mulsf3+0x20>
 b34:	95 0f       	add	r25, r21
 b36:	50 e0       	ldi	r21, 0x00	; 0
 b38:	55 1f       	adc	r21, r21
 b3a:	62 9f       	mul	r22, r18
 b3c:	f0 01       	movw	r30, r0
 b3e:	72 9f       	mul	r23, r18
 b40:	bb 27       	eor	r27, r27
 b42:	f0 0d       	add	r31, r0
 b44:	b1 1d       	adc	r27, r1
 b46:	63 9f       	mul	r22, r19
 b48:	aa 27       	eor	r26, r26
 b4a:	f0 0d       	add	r31, r0
 b4c:	b1 1d       	adc	r27, r1
 b4e:	aa 1f       	adc	r26, r26
 b50:	64 9f       	mul	r22, r20
 b52:	66 27       	eor	r22, r22
 b54:	b0 0d       	add	r27, r0
 b56:	a1 1d       	adc	r26, r1
 b58:	66 1f       	adc	r22, r22
 b5a:	82 9f       	mul	r24, r18
 b5c:	22 27       	eor	r18, r18
 b5e:	b0 0d       	add	r27, r0
 b60:	a1 1d       	adc	r26, r1
 b62:	62 1f       	adc	r22, r18
 b64:	73 9f       	mul	r23, r19
 b66:	b0 0d       	add	r27, r0
 b68:	a1 1d       	adc	r26, r1
 b6a:	62 1f       	adc	r22, r18
 b6c:	83 9f       	mul	r24, r19
 b6e:	a0 0d       	add	r26, r0
 b70:	61 1d       	adc	r22, r1
 b72:	22 1f       	adc	r18, r18
 b74:	74 9f       	mul	r23, r20
 b76:	33 27       	eor	r19, r19
 b78:	a0 0d       	add	r26, r0
 b7a:	61 1d       	adc	r22, r1
 b7c:	23 1f       	adc	r18, r19
 b7e:	84 9f       	mul	r24, r20
 b80:	60 0d       	add	r22, r0
 b82:	21 1d       	adc	r18, r1
 b84:	82 2f       	mov	r24, r18
 b86:	76 2f       	mov	r23, r22
 b88:	6a 2f       	mov	r22, r26
 b8a:	11 24       	eor	r1, r1
 b8c:	9f 57       	subi	r25, 0x7F	; 127
 b8e:	50 40       	sbci	r21, 0x00	; 0
 b90:	9a f0       	brmi	.+38     	; 0xbb8 <__mulsf3_pse+0x88>
 b92:	f1 f0       	breq	.+60     	; 0xbd0 <__mulsf3_pse+0xa0>
 b94:	88 23       	and	r24, r24
 b96:	4a f0       	brmi	.+18     	; 0xbaa <__mulsf3_pse+0x7a>
 b98:	ee 0f       	add	r30, r30
 b9a:	ff 1f       	adc	r31, r31
 b9c:	bb 1f       	adc	r27, r27
 b9e:	66 1f       	adc	r22, r22
 ba0:	77 1f       	adc	r23, r23
 ba2:	88 1f       	adc	r24, r24
 ba4:	91 50       	subi	r25, 0x01	; 1
 ba6:	50 40       	sbci	r21, 0x00	; 0
 ba8:	a9 f7       	brne	.-22     	; 0xb94 <__mulsf3_pse+0x64>
 baa:	9e 3f       	cpi	r25, 0xFE	; 254
 bac:	51 05       	cpc	r21, r1
 bae:	80 f0       	brcs	.+32     	; 0xbd0 <__mulsf3_pse+0xa0>
 bb0:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__fp_inf>
 bb4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_szero>
 bb8:	5f 3f       	cpi	r21, 0xFF	; 255
 bba:	e4 f3       	brlt	.-8      	; 0xbb4 <__mulsf3_pse+0x84>
 bbc:	98 3e       	cpi	r25, 0xE8	; 232
 bbe:	d4 f3       	brlt	.-12     	; 0xbb4 <__mulsf3_pse+0x84>
 bc0:	86 95       	lsr	r24
 bc2:	77 95       	ror	r23
 bc4:	67 95       	ror	r22
 bc6:	b7 95       	ror	r27
 bc8:	f7 95       	ror	r31
 bca:	e7 95       	ror	r30
 bcc:	9f 5f       	subi	r25, 0xFF	; 255
 bce:	c1 f7       	brne	.-16     	; 0xbc0 <__mulsf3_pse+0x90>
 bd0:	fe 2b       	or	r31, r30
 bd2:	88 0f       	add	r24, r24
 bd4:	91 1d       	adc	r25, r1
 bd6:	96 95       	lsr	r25
 bd8:	87 95       	ror	r24
 bda:	97 f9       	bld	r25, 7
 bdc:	08 95       	ret

00000bde <atoi>:
 bde:	fc 01       	movw	r30, r24
 be0:	88 27       	eor	r24, r24
 be2:	99 27       	eor	r25, r25
 be4:	e8 94       	clt
 be6:	21 91       	ld	r18, Z+
 be8:	20 32       	cpi	r18, 0x20	; 32
 bea:	e9 f3       	breq	.-6      	; 0xbe6 <atoi+0x8>
 bec:	29 30       	cpi	r18, 0x09	; 9
 bee:	10 f0       	brcs	.+4      	; 0xbf4 <atoi+0x16>
 bf0:	2e 30       	cpi	r18, 0x0E	; 14
 bf2:	c8 f3       	brcs	.-14     	; 0xbe6 <atoi+0x8>
 bf4:	2b 32       	cpi	r18, 0x2B	; 43
 bf6:	41 f0       	breq	.+16     	; 0xc08 <atoi+0x2a>
 bf8:	2d 32       	cpi	r18, 0x2D	; 45
 bfa:	39 f4       	brne	.+14     	; 0xc0a <atoi+0x2c>
 bfc:	68 94       	set
 bfe:	04 c0       	rjmp	.+8      	; 0xc08 <atoi+0x2a>
 c00:	0e 94 18 06 	call	0xc30	; 0xc30 <__mulhi_const_10>
 c04:	82 0f       	add	r24, r18
 c06:	91 1d       	adc	r25, r1
 c08:	21 91       	ld	r18, Z+
 c0a:	20 53       	subi	r18, 0x30	; 48
 c0c:	2a 30       	cpi	r18, 0x0A	; 10
 c0e:	c0 f3       	brcs	.-16     	; 0xc00 <atoi+0x22>
 c10:	1e f4       	brtc	.+6      	; 0xc18 <atoi+0x3a>
 c12:	90 95       	com	r25
 c14:	81 95       	neg	r24
 c16:	9f 4f       	sbci	r25, 0xFF	; 255
 c18:	08 95       	ret

00000c1a <__itoa_ncheck>:
 c1a:	bb 27       	eor	r27, r27
 c1c:	4a 30       	cpi	r20, 0x0A	; 10
 c1e:	31 f4       	brne	.+12     	; 0xc2c <__itoa_ncheck+0x12>
 c20:	99 23       	and	r25, r25
 c22:	22 f4       	brpl	.+8      	; 0xc2c <__itoa_ncheck+0x12>
 c24:	bd e2       	ldi	r27, 0x2D	; 45
 c26:	90 95       	com	r25
 c28:	81 95       	neg	r24
 c2a:	9f 4f       	sbci	r25, 0xFF	; 255
 c2c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__utoa_common>

00000c30 <__mulhi_const_10>:
 c30:	7a e0       	ldi	r23, 0x0A	; 10
 c32:	97 9f       	mul	r25, r23
 c34:	90 2d       	mov	r25, r0
 c36:	87 9f       	mul	r24, r23
 c38:	80 2d       	mov	r24, r0
 c3a:	91 0d       	add	r25, r1
 c3c:	11 24       	eor	r1, r1
 c3e:	08 95       	ret

00000c40 <__utoa_ncheck>:
 c40:	bb 27       	eor	r27, r27

00000c42 <__utoa_common>:
 c42:	fb 01       	movw	r30, r22
 c44:	55 27       	eor	r21, r21
 c46:	aa 27       	eor	r26, r26
 c48:	88 0f       	add	r24, r24
 c4a:	99 1f       	adc	r25, r25
 c4c:	aa 1f       	adc	r26, r26
 c4e:	a4 17       	cp	r26, r20
 c50:	10 f0       	brcs	.+4      	; 0xc56 <__utoa_common+0x14>
 c52:	a4 1b       	sub	r26, r20
 c54:	83 95       	inc	r24
 c56:	50 51       	subi	r21, 0x10	; 16
 c58:	b9 f7       	brne	.-18     	; 0xc48 <__utoa_common+0x6>
 c5a:	a0 5d       	subi	r26, 0xD0	; 208
 c5c:	aa 33       	cpi	r26, 0x3A	; 58
 c5e:	08 f0       	brcs	.+2      	; 0xc62 <__utoa_common+0x20>
 c60:	a9 5d       	subi	r26, 0xD9	; 217
 c62:	a1 93       	st	Z+, r26
 c64:	00 97       	sbiw	r24, 0x00	; 0
 c66:	79 f7       	brne	.-34     	; 0xc46 <__utoa_common+0x4>
 c68:	b1 11       	cpse	r27, r1
 c6a:	b1 93       	st	Z+, r27
 c6c:	11 92       	st	Z+, r1
 c6e:	cb 01       	movw	r24, r22
 c70:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <strrev>

00000c74 <strrev>:
 c74:	dc 01       	movw	r26, r24
 c76:	fc 01       	movw	r30, r24
 c78:	67 2f       	mov	r22, r23
 c7a:	71 91       	ld	r23, Z+
 c7c:	77 23       	and	r23, r23
 c7e:	e1 f7       	brne	.-8      	; 0xc78 <strrev+0x4>
 c80:	32 97       	sbiw	r30, 0x02	; 2
 c82:	04 c0       	rjmp	.+8      	; 0xc8c <strrev+0x18>
 c84:	7c 91       	ld	r23, X
 c86:	6d 93       	st	X+, r22
 c88:	70 83       	st	Z, r23
 c8a:	62 91       	ld	r22, -Z
 c8c:	ae 17       	cp	r26, r30
 c8e:	bf 07       	cpc	r27, r31
 c90:	c8 f3       	brcs	.-14     	; 0xc84 <strrev+0x10>
 c92:	08 95       	ret

00000c94 <_exit>:
 c94:	f8 94       	cli

00000c96 <__stop_program>:
 c96:	ff cf       	rjmp	.-2      	; 0xc96 <__stop_program>
