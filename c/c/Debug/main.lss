
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000c96  00000d2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  0080012c  0080012c  00000d56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a3d  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d56  00000000  00000000  00002955  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf6  00000000  00000000  000036ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  000042a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000662  00000000  00000000  00004594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000926  00000000  00000000  00004bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000551c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 36       	cpi	r26, 0x64	; 100
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ab 03 	call	0x756	; 0x756 <main>
  9e:	0c 94 49 06 	jmp	0xc92	; 0xc92 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <SCH_tasks_G>
  b4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	ee e2       	ldi	r30, 0x2E	; 46
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e2 5d       	subi	r30, 0xD2	; 210
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e2 5d       	subi	r30, 0xD2	; 210
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ce e2       	ldi	r28, 0x2E	; 46
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	ee e2       	ldi	r30, 0x2E	; 46
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	21 e5       	ldi	r18, 0x51	; 81
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_receive>:
{
	x -= 48;
	y -= 48;
	unsigned pow = 10;
	return (y * pow) + x;
}
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <USART_receive+0x4>
 222:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 226:	08 95       	ret

00000228 <USART_send>:
 228:	e0 ec       	ldi	r30, 0xC0	; 192
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	90 81       	ld	r25, Z
 22e:	95 ff       	sbrs	r25, 5
 230:	fd cf       	rjmp	.-6      	; 0x22c <USART_send+0x4>
 232:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 236:	08 95       	ret

00000238 <USART_putstring>:
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <USART_putstring+0x18>
 244:	21 96       	adiw	r28, 0x01	; 1
 246:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 24a:	89 91       	ld	r24, Y+
 24c:	81 11       	cpse	r24, r1
 24e:	fb cf       	rjmp	.-10     	; 0x246 <USART_putstring+0xe>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <read_adc>:
 256:	ec e7       	ldi	r30, 0x7C	; 124
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	90 81       	ld	r25, Z
 25c:	90 7f       	andi	r25, 0xF0	; 240
 25e:	90 83       	st	Z, r25
 260:	90 81       	ld	r25, Z
 262:	89 2b       	or	r24, r25
 264:	80 83       	st	Z, r24
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	80 83       	st	Z, r24
 270:	80 81       	ld	r24, Z
 272:	86 fd       	sbrc	r24, 6
 274:	fd cf       	rjmp	.-6      	; 0x270 <read_adc+0x1a>
 276:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 27a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 27e:	08 95       	ret

00000280 <distanceStill>:
 280:	5b 9a       	sbi	0x0b, 3	; 11
 282:	85 e3       	ldi	r24, 0x35	; 53
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <distanceStill+0x4>
 288:	00 00       	nop
 28a:	5b 98       	cbi	0x0b, 3	; 11
 28c:	4a 9b       	sbis	0x09, 2	; 9
 28e:	fe cf       	rjmp	.-4      	; 0x28c <distanceStill+0xc>
 290:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 294:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 298:	4a 99       	sbic	0x09, 2	; 9
 29a:	fe cf       	rjmp	.-4      	; 0x298 <distanceStill+0x18>
 29c:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2a0:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__floatunsisf>
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	40 e8       	ldi	r20, 0x80	; 128
 2b2:	5e e3       	ldi	r21, 0x3E	; 62
 2b4:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
 2b8:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
 2bc:	dc 01       	movw	r26, r24
 2be:	cb 01       	movw	r24, r22
 2c0:	4a e0       	ldi	r20, 0x0A	; 10
 2c2:	6a e5       	ldi	r22, 0x5A	; 90
 2c4:	71 e0       	ldi	r23, 0x01	; 1
 2c6:	0e 94 0c 06 	call	0xc18	; 0xc18 <__itoa_ncheck>
 2ca:	08 95       	ret

000002cc <upDown>:
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	81 e5       	ldi	r24, 0x51	; 81
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <atoi>
 2dc:	ec 01       	movw	r28, r24
 2de:	8f e5       	ldi	r24, 0x5F	; 95
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <atoi>
 2e6:	8c 01       	movw	r16, r24
 2e8:	0e 94 40 01 	call	0x280	; 0x280 <distanceStill>
 2ec:	8a e5       	ldi	r24, 0x5A	; 90
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <atoi>
 2f4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 2f8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 2fc:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <distance_up+0x1>
 300:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <distance_up>
 304:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <LDR_down>
 308:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <LDR_down+0x1>
 30c:	c4 17       	cp	r28, r20
 30e:	d5 07       	cpc	r29, r21
 310:	3c f4       	brge	.+14     	; 0x320 <upDown+0x54>
 312:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_down>
 316:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_down+0x1>
 31a:	04 17       	cp	r16, r20
 31c:	15 07       	cpc	r17, r21
 31e:	3c f0       	brlt	.+14     	; 0x32e <upDown+0x62>
 320:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 324:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 328:	45 2b       	or	r20, r21
 32a:	71 f0       	breq	.+28     	; 0x348 <upDown+0x7c>
 32c:	6c c0       	rjmp	.+216    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 32e:	a9 01       	movw	r20, r18
 330:	4f 5f       	subi	r20, 0xFF	; 255
 332:	5f 4f       	sbci	r21, 0xFF	; 255
 334:	48 17       	cp	r20, r24
 336:	59 07       	cpc	r21, r25
 338:	34 f5       	brge	.+76     	; 0x386 <upDown+0xba>
 33a:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 33e:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 342:	45 2b       	or	r20, r21
 344:	09 f4       	brne	.+2      	; 0x348 <upDown+0x7c>
 346:	66 c0       	rjmp	.+204    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 348:	2a 98       	cbi	0x05, 2	; 5
 34a:	28 9a       	sbi	0x05, 0	; 5
 34c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <distance_down>
 350:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <distance_down+0x1>
 354:	28 17       	cp	r18, r24
 356:	39 07       	cpc	r19, r25
 358:	0c f0       	brlt	.+2      	; 0x35c <upDown+0x90>
 35a:	7b c0       	rjmp	.+246    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 35c:	29 9a       	sbi	0x05, 1	; 5
 35e:	2f ef       	ldi	r18, 0xFF	; 255
 360:	81 ee       	ldi	r24, 0xE1	; 225
 362:	94 e0       	ldi	r25, 0x04	; 4
 364:	21 50       	subi	r18, 0x01	; 1
 366:	80 40       	sbci	r24, 0x00	; 0
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <upDown+0x98>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <upDown+0xa2>
 36e:	00 00       	nop
 370:	29 98       	cbi	0x05, 1	; 5
 372:	2f ef       	ldi	r18, 0xFF	; 255
 374:	81 ee       	ldi	r24, 0xE1	; 225
 376:	94 e0       	ldi	r25, 0x04	; 4
 378:	21 50       	subi	r18, 0x01	; 1
 37a:	80 40       	sbci	r24, 0x00	; 0
 37c:	90 40       	sbci	r25, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <upDown+0xac>
 380:	00 c0       	rjmp	.+0      	; 0x382 <upDown+0xb6>
 382:	00 00       	nop
 384:	66 c0       	rjmp	.+204    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 386:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <LDR_up>
 38a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <LDR_up+0x1>
 38e:	4c 17       	cp	r20, r28
 390:	5d 07       	cpc	r21, r29
 392:	3c f4       	brge	.+14     	; 0x3a2 <upDown+0xd6>
 394:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_up>
 398:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_up+0x1>
 39c:	40 17       	cp	r20, r16
 39e:	51 07       	cpc	r21, r17
 3a0:	3c f0       	brlt	.+14     	; 0x3b0 <upDown+0xe4>
 3a2:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end>
 3a6:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x1>
 3aa:	45 2b       	or	r20, r21
 3ac:	d9 f5       	brne	.+118    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3ae:	0d c0       	rjmp	.+26     	; 0x3ca <upDown+0xfe>
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	31 09       	sbc	r19, r1
 3b4:	82 17       	cp	r24, r18
 3b6:	93 07       	cpc	r25, r19
 3b8:	0c f0       	brlt	.+2      	; 0x3bc <upDown+0xf0>
 3ba:	4b c0       	rjmp	.+150    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3bc:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <__data_end>
 3c0:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <__data_end+0x1>
 3c4:	23 2b       	or	r18, r19
 3c6:	09 f4       	brne	.+2      	; 0x3ca <upDown+0xfe>
 3c8:	44 c0       	rjmp	.+136    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3ca:	28 98       	cbi	0x05, 0	; 5
 3cc:	2a 9a       	sbi	0x05, 2	; 5
 3ce:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <distance_up>
 3d2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <distance_up+0x1>
 3d6:	82 17       	cp	r24, r18
 3d8:	93 07       	cpc	r25, r19
 3da:	dc f5       	brge	.+118    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3dc:	29 9a       	sbi	0x05, 1	; 5
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	81 ee       	ldi	r24, 0xE1	; 225
 3e2:	94 e0       	ldi	r25, 0x04	; 4
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <upDown+0x118>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <upDown+0x122>
 3ee:	00 00       	nop
 3f0:	29 98       	cbi	0x05, 1	; 5
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	81 ee       	ldi	r24, 0xE1	; 225
 3f6:	94 e0       	ldi	r25, 0x04	; 4
 3f8:	21 50       	subi	r18, 0x01	; 1
 3fa:	80 40       	sbci	r24, 0x00	; 0
 3fc:	90 40       	sbci	r25, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <upDown+0x12c>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	26 c0       	rjmp	.+76     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 406:	a9 01       	movw	r20, r18
 408:	4f 5f       	subi	r20, 0xFF	; 255
 40a:	5f 4f       	sbci	r21, 0xFF	; 255
 40c:	48 17       	cp	r20, r24
 40e:	59 07       	cpc	r21, r25
 410:	7c f4       	brge	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 412:	9a cf       	rjmp	.-204    	; 0x348 <upDown+0x7c>
 414:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <LDR_up>
 418:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <LDR_up+0x1>
 41c:	4c 17       	cp	r20, r28
 41e:	5d 07       	cpc	r21, r29
 420:	a4 f6       	brge	.-88     	; 0x3ca <upDown+0xfe>
 422:	0e c0       	rjmp	.+28     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 424:	21 50       	subi	r18, 0x01	; 1
 426:	31 09       	sbc	r19, r1
 428:	82 17       	cp	r24, r18
 42a:	93 07       	cpc	r25, r19
 42c:	74 f2       	brlt	.-100    	; 0x3ca <upDown+0xfe>
 42e:	11 c0       	rjmp	.+34     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 430:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <LDR_up>
 434:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <LDR_up+0x1>
 438:	4c 17       	cp	r20, r28
 43a:	5d 07       	cpc	r21, r29
 43c:	9c f7       	brge	.-26     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 43e:	aa cf       	rjmp	.-172    	; 0x394 <upDown+0xc8>
 440:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_up>
 444:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_up+0x1>
 448:	40 17       	cp	r20, r16
 44a:	51 07       	cpc	r21, r17
 44c:	0c f0       	brlt	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44e:	bd cf       	rjmp	.-134    	; 0x3ca <upDown+0xfe>
 450:	af cf       	rjmp	.-162    	; 0x3b0 <upDown+0xe4>
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	08 95       	ret

0000045c <newLine>:
 45c:	8d e0       	ldi	r24, 0x0D	; 13
 45e:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 462:	8a e0       	ldi	r24, 0x0A	; 10
 464:	0e 94 14 01 	call	0x228	; 0x228 <USART_send>
 468:	08 95       	ret

0000046a <combine3>:
	x -= 48;
	y -= 48;
	z -= 48;
	unsigned pow1 = 10;
	unsigned pow2 = 100;
	return (z * pow2) + (y * pow1) + x;
 46a:	40 53       	subi	r20, 0x30	; 48
 46c:	51 09       	sbc	r21, r1
 46e:	e4 e6       	ldi	r30, 0x64	; 100
 470:	e4 9f       	mul	r30, r20
 472:	90 01       	movw	r18, r0
 474:	e5 9f       	mul	r30, r21
 476:	30 0d       	add	r19, r0
 478:	11 24       	eor	r1, r1
 47a:	82 0f       	add	r24, r18
 47c:	93 1f       	adc	r25, r19
 47e:	c0 97       	sbiw	r24, 0x30	; 48
 480:	60 53       	subi	r22, 0x30	; 48
 482:	71 09       	sbc	r23, r1
 484:	9b 01       	movw	r18, r22
 486:	22 0f       	add	r18, r18
 488:	33 1f       	adc	r19, r19
 48a:	66 0f       	add	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	66 0f       	add	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	62 0f       	add	r22, r18
 498:	73 1f       	adc	r23, r19
}
 49a:	86 0f       	add	r24, r22
 49c:	97 1f       	adc	r25, r23
 49e:	08 95       	ret

000004a0 <__vector_18>:

ISR ( USART_RX_vect )
{
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	ef 93       	push	r30
 4c4:	ff 93       	push	r31
	unsigned char ReceivedByte;
	ReceivedByte = UDR0 ;						// Set ReceivedByte to the received byte from the controller (GUI)
 4c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	switch(ReceivedByte)
 4ca:	83 33       	cpi	r24, 0x33	; 51
 4cc:	39 f1       	breq	.+78     	; 0x51c <__vector_18+0x7c>
 4ce:	28 f4       	brcc	.+10     	; 0x4da <__vector_18+0x3a>
 4d0:	81 33       	cpi	r24, 0x31	; 49
 4d2:	51 f0       	breq	.+20     	; 0x4e8 <__vector_18+0x48>
 4d4:	82 33       	cpi	r24, 0x32	; 50
 4d6:	a9 f0       	breq	.+42     	; 0x502 <__vector_18+0x62>
 4d8:	c1 c0       	rjmp	.+386    	; 0x65c <__vector_18+0x1bc>
 4da:	87 33       	cpi	r24, 0x37	; 55
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <__vector_18+0x40>
 4de:	93 c0       	rjmp	.+294    	; 0x606 <__vector_18+0x166>
 4e0:	88 33       	cpi	r24, 0x38	; 56
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <__vector_18+0x46>
 4e4:	aa c0       	rjmp	.+340    	; 0x63a <__vector_18+0x19a>
 4e6:	ba c0       	rjmp	.+372    	; 0x65c <__vector_18+0x1bc>
	{
		case '1':								// 1 = Shut the sunshade // Red
			manual = 1;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 4f0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			distance_manual = 5;
 4f4:	85 e0       	ldi	r24, 0x05	; 5
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 500:	ad c0       	rjmp	.+346    	; 0x65c <__vector_18+0x1bc>
			
		case '2':								// 2 = Open the sunshade // Green
			manual = 1;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 50a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			distance_manual = 10;
 50e:	8a e0       	ldi	r24, 0x0A	; 10
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 516:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 51a:	a0 c0       	rjmp	.+320    	; 0x65c <__vector_18+0x1bc>
			
		case '3':								// 3 = set
			manual = 0;
 51c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__data_end+0x1>
 520:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
			temp_down = combine((int) USART_receive(), (int) USART_receive());
 524:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 528:	c8 2f       	mov	r28, r24
 52a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 52e:	2c 2f       	mov	r18, r28
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	20 53       	subi	r18, 0x30	; 48
 534:	31 09       	sbc	r19, r1
 536:	a9 01       	movw	r20, r18
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	22 0f       	add	r18, r18
 53e:	33 1f       	adc	r19, r19
 540:	22 0f       	add	r18, r18
 542:	33 1f       	adc	r19, r19
 544:	22 0f       	add	r18, r18
 546:	33 1f       	adc	r19, r19
 548:	24 0f       	add	r18, r20
 54a:	35 1f       	adc	r19, r21
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	c0 97       	sbiw	r24, 0x30	; 48
 550:	28 0f       	add	r18, r24
 552:	39 1f       	adc	r19, r25
 554:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <temp_down+0x1>
 558:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <temp_down>
			temp_up = combine((int) USART_receive(), (int) USART_receive());
 55c:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 560:	c8 2f       	mov	r28, r24
 562:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 566:	2c 2f       	mov	r18, r28
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	20 53       	subi	r18, 0x30	; 48
 56c:	31 09       	sbc	r19, r1
 56e:	a9 01       	movw	r20, r18
 570:	44 0f       	add	r20, r20
 572:	55 1f       	adc	r21, r21
 574:	22 0f       	add	r18, r18
 576:	33 1f       	adc	r19, r19
 578:	22 0f       	add	r18, r18
 57a:	33 1f       	adc	r19, r19
 57c:	22 0f       	add	r18, r18
 57e:	33 1f       	adc	r19, r19
 580:	24 0f       	add	r18, r20
 582:	35 1f       	adc	r19, r21
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	c0 97       	sbiw	r24, 0x30	; 48
 588:	28 0f       	add	r18, r24
 58a:	39 1f       	adc	r19, r25
 58c:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <temp_up+0x1>
 590:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <temp_up>
			LDR_down = combine((int) USART_receive(), (int) USART_receive());
 594:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 598:	c8 2f       	mov	r28, r24
 59a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 59e:	2c 2f       	mov	r18, r28
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	20 53       	subi	r18, 0x30	; 48
 5a4:	31 09       	sbc	r19, r1
 5a6:	a9 01       	movw	r20, r18
 5a8:	44 0f       	add	r20, r20
 5aa:	55 1f       	adc	r21, r21
 5ac:	22 0f       	add	r18, r18
 5ae:	33 1f       	adc	r19, r19
 5b0:	22 0f       	add	r18, r18
 5b2:	33 1f       	adc	r19, r19
 5b4:	22 0f       	add	r18, r18
 5b6:	33 1f       	adc	r19, r19
 5b8:	24 0f       	add	r18, r20
 5ba:	35 1f       	adc	r19, r21
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	c0 97       	sbiw	r24, 0x30	; 48
 5c0:	28 0f       	add	r18, r24
 5c2:	39 1f       	adc	r19, r25
 5c4:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <LDR_down+0x1>
 5c8:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <LDR_down>
			LDR_up = combine((int) USART_receive(), (int) USART_receive());
 5cc:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5d0:	c8 2f       	mov	r28, r24
 5d2:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 5d6:	2c 2f       	mov	r18, r28
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	20 53       	subi	r18, 0x30	; 48
 5dc:	31 09       	sbc	r19, r1
 5de:	a9 01       	movw	r20, r18
 5e0:	44 0f       	add	r20, r20
 5e2:	55 1f       	adc	r21, r21
 5e4:	22 0f       	add	r18, r18
 5e6:	33 1f       	adc	r19, r19
 5e8:	22 0f       	add	r18, r18
 5ea:	33 1f       	adc	r19, r19
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	24 0f       	add	r18, r20
 5f2:	35 1f       	adc	r19, r21
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	c0 97       	sbiw	r24, 0x30	; 48
 5f8:	28 0f       	add	r18, r24
 5fa:	39 1f       	adc	r19, r25
 5fc:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <LDR_up+0x1>
 600:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <LDR_up>
			return;
 604:	2b c0       	rjmp	.+86     	; 0x65c <__vector_18+0x1bc>
			
		case '7':								// 7 = open/closing distance
			manual = 1;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 60e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			int closeopen = combine3((int) USART_receive(), (int) USART_receive(), (int) USART_receive());
 612:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 616:	d8 2f       	mov	r29, r24
 618:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 61c:	c8 2f       	mov	r28, r24
 61e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 622:	4d 2f       	mov	r20, r29
 624:	50 e0       	ldi	r21, 0x00	; 0
 626:	6c 2f       	mov	r22, r28
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 35 02 	call	0x46a	; 0x46a <combine3>
			distance_manual = closeopen;
 630:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 634:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
 638:	11 c0       	rjmp	.+34     	; 0x65c <__vector_18+0x1bc>
			
		case '8':								// 8 = set manual
			manual = (int) USART_receive();
 63a:	0e 94 0c 01 	call	0x218	; 0x218 <USART_receive>
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 644:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
			if (manual == 1)
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	41 f4       	brne	.+16     	; 0x65c <__vector_18+0x1bc>
			{
				distance_manual = (int) atoi(distance_sensor);
 64c:	8a e5       	ldi	r24, 0x5A	; 90
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 ee 05 	call	0xbdc	; 0xbdc <atoi>
 654:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 658:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			return;
			}
		default:
			return;
	}
 65c:	ff 91       	pop	r31
 65e:	ef 91       	pop	r30
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	bf 91       	pop	r27
 666:	af 91       	pop	r26
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	7f 91       	pop	r23
 66e:	6f 91       	pop	r22
 670:	5f 91       	pop	r21
 672:	4f 91       	pop	r20
 674:	3f 91       	pop	r19
 676:	2f 91       	pop	r18
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <init_connectie>:
#define BAUDRATE 9600
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)

void init_connectie()
{
	UCSR0A = 0;							// disable U2X mode
 682:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);	// Set frame format: 8data, 2stop bit 
 686:	8e e0       	ldi	r24, 0x0E	; 14
 688:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 68c:	08 95       	ret

0000068e <init_USART>:
}

void init_USART()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 68e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 692:	87 e6       	ldi	r24, 0x67	; 103
 694:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);		// Enable receiver and transmitter
 698:	e1 ec       	ldi	r30, 0xC1	; 193
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	88 e1       	ldi	r24, 0x18	; 24
 69e:	80 83       	st	Z, r24
	UCSR0C = (3<<UCSZ00);
 6a0:	86 e0       	ldi	r24, 0x06	; 6
 6a2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << RXCIE0 );			// Enable the USART Receive Complete interrupt ( USART_RXC )
 6a6:	80 81       	ld	r24, Z
 6a8:	80 68       	ori	r24, 0x80	; 128
 6aa:	80 83       	st	Z, r24
	sei ();								// Enable the Global Interrupt Enable flag so that interrupts can be processed
 6ac:	78 94       	sei
 6ae:	08 95       	ret

000006b0 <init_scheduler>:
}

void init_scheduler()
{
	SCH_Init_T1();
 6b0:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temperature,1,100);
 6b4:	44 e6       	ldi	r20, 0x64	; 100
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	61 e0       	ldi	r22, 0x01	; 1
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	80 eb       	ldi	r24, 0xB0	; 176
 6be:	93 e0       	ldi	r25, 0x03	; 3
 6c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(ldr,2,100);
 6c4:	44 e6       	ldi	r20, 0x64	; 100
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	62 e0       	ldi	r22, 0x02	; 2
 6ca:	70 e0       	ldi	r23, 0x00	; 0
 6cc:	8a ee       	ldi	r24, 0xEA	; 234
 6ce:	93 e0       	ldi	r25, 0x03	; 3
 6d0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(distance,3,100);
 6d4:	44 e6       	ldi	r20, 0x64	; 100
 6d6:	50 e0       	ldi	r21, 0x00	; 0
 6d8:	63 e0       	ldi	r22, 0x03	; 3
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	8e e1       	ldi	r24, 0x1E	; 30
 6de:	94 e0       	ldi	r25, 0x04	; 4
 6e0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(newLine,6,100);
 6e4:	44 e6       	ldi	r20, 0x64	; 100
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	66 e0       	ldi	r22, 0x06	; 6
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	8e e2       	ldi	r24, 0x2E	; 46
 6ee:	92 e0       	ldi	r25, 0x02	; 2
 6f0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(upDown,8,20);
 6f4:	44 e1       	ldi	r20, 0x14	; 20
 6f6:	50 e0       	ldi	r21, 0x00	; 0
 6f8:	68 e0       	ldi	r22, 0x08	; 8
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	86 e6       	ldi	r24, 0x66	; 102
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 704:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 708:	08 95       	ret

0000070a <init_adc>:
}

void init_adc()
{
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
 70a:	ea e7       	ldi	r30, 0x7A	; 122
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	87 60       	ori	r24, 0x07	; 7
 712:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);							 //Voltage reference from AVCC (5v)
 714:	ac e7       	ldi	r26, 0x7C	; 124
 716:	b0 e0       	ldi	r27, 0x00	; 0
 718:	8c 91       	ld	r24, X
 71a:	80 64       	ori	r24, 0x40	; 64
 71c:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);							 //Turn on ADC
 71e:	80 81       	ld	r24, Z
 720:	80 68       	ori	r24, 0x80	; 128
 722:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							 //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 724:	80 81       	ld	r24, Z
 726:	80 64       	ori	r24, 0x40	; 64
 728:	80 83       	st	Z, r24
 72a:	08 95       	ret

0000072c <init_dist>:
}

void init_dist()
{
	DDRD |= _BV(PD3);			// Pin 3 Trigger Output
 72c:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~_BV(PD2);			// Pin 2 Echo Input
 72e:	52 98       	cbi	0x0a, 2	; 10
 730:	08 95       	ret

00000732 <init_LEDS>:
}

void init_LEDS()
{ 
	DDRB |= _BV(PB0);			// pin0 B = output
 732:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(PB1);			// pin1 B = output
 734:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(PB2);			// pin2 B = output
 736:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << PB2);		// Green LED on
 738:	2a 9a       	sbi	0x05, 2	; 5
 73a:	08 95       	ret

0000073c <setup>:
	}
}

void setup()
{
	init_connectie();
 73c:	0e 94 41 03 	call	0x682	; 0x682 <init_connectie>
	init_adc();				// Setup the ADC
 740:	0e 94 85 03 	call	0x70a	; 0x70a <init_adc>
	init_USART();			// Setup the USART
 744:	0e 94 47 03 	call	0x68e	; 0x68e <init_USART>
	init_dist();			// Setup distance sensor
 748:	0e 94 96 03 	call	0x72c	; 0x72c <init_dist>
	init_scheduler();		// Setup scheduler
 74c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <init_scheduler>
	init_LEDS();			// Setup LED
 750:	0e 94 99 03 	call	0x732	; 0x732 <init_LEDS>
 754:	08 95       	ret

00000756 <main>:
int main(void);
void setup();

int main(void)
{
	setup();
 756:	0e 94 9e 03 	call	0x73c	; 0x73c <setup>
	while(1) {
		SCH_Dispatch_Tasks();
 75a:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 75e:	fd cf       	rjmp	.-6      	; 0x75a <main+0x4>

00000760 <temperature>:
#include "init.h"
#include "sensors.h"

void temperature()
{
	USART_putstring("Temp : ");
 760:	8e e0       	ldi	r24, 0x0E	; 14
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
	adc_value = read_adc(0);
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	0e 94 2b 01 	call	0x256	; 0x256 <read_adc>
	adc_value = (((((double)adc_value / 1024) * 5) - 0.5) * 100); // Calculate temperature
 76e:	bc 01       	movw	r22, r24
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__floatunsisf>
 778:	20 e0       	ldi	r18, 0x00	; 0
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	40 e8       	ldi	r20, 0x80	; 128
 77e:	5a e3       	ldi	r21, 0x3A	; 58
 780:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
 784:	20 e0       	ldi	r18, 0x00	; 0
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	40 ea       	ldi	r20, 0xA0	; 160
 78a:	50 e4       	ldi	r21, 0x40	; 64
 78c:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	40 e0       	ldi	r20, 0x00	; 0
 796:	5f e3       	ldi	r21, 0x3F	; 63
 798:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__subsf3>
 79c:	20 e0       	ldi	r18, 0x00	; 0
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	48 ec       	ldi	r20, 0xC8	; 200
 7a2:	52 e4       	ldi	r21, 0x42	; 66
 7a4:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
 7a8:	0e 94 c4 04 	call	0x988	; 0x988 <__fixunssfsi>
 7ac:	dc 01       	movw	r26, r24
 7ae:	cb 01       	movw	r24, r22
 7b0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <adc_value+0x1>
 7b4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <adc_value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7b8:	4a e0       	ldi	r20, 0x0A	; 10
 7ba:	6f e5       	ldi	r22, 0x5F	; 95
 7bc:	71 e0       	ldi	r23, 0x01	; 1
 7be:	0e 94 0c 06 	call	0xc18	; 0xc18 <__itoa_ncheck>
	itoa(adc_value, temp_sensor, 10);							  //Convert the read value to an ascii string
	USART_putstring(temp_sensor);								  //Send the converted value to the terminal
 7c2:	8f e5       	ldi	r24, 0x5F	; 95
 7c4:	91 e0       	ldi	r25, 0x01	; 1
 7c6:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
	USART_putstring("  ");
 7ca:	86 e1       	ldi	r24, 0x16	; 22
 7cc:	91 e0       	ldi	r25, 0x01	; 1
 7ce:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 7d2:	08 95       	ret

000007d4 <ldr>:
}

void ldr()
{
	USART_putstring("LDR : ");
 7d4:	89 e1       	ldi	r24, 0x19	; 25
 7d6:	91 e0       	ldi	r25, 0x01	; 1
 7d8:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
	adc_value = read_adc(1);
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	0e 94 2b 01 	call	0x256	; 0x256 <read_adc>
	adc_value = ((((double)adc_value)/1024)*100 *1.5);			  // Calculate the amount of light
 7e2:	bc 01       	movw	r22, r24
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__floatunsisf>
 7ec:	20 e0       	ldi	r18, 0x00	; 0
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	40 e8       	ldi	r20, 0x80	; 128
 7f2:	5a e3       	ldi	r21, 0x3A	; 58
 7f4:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
 7f8:	20 e0       	ldi	r18, 0x00	; 0
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	48 ec       	ldi	r20, 0xC8	; 200
 7fe:	52 e4       	ldi	r21, 0x42	; 66
 800:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	40 ec       	ldi	r20, 0xC0	; 192
 80a:	5f e3       	ldi	r21, 0x3F	; 63
 80c:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
 810:	0e 94 c4 04 	call	0x988	; 0x988 <__fixunssfsi>
 814:	dc 01       	movw	r26, r24
 816:	cb 01       	movw	r24, r22
 818:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <adc_value+0x1>
 81c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <adc_value>
 820:	4a e0       	ldi	r20, 0x0A	; 10
 822:	61 e5       	ldi	r22, 0x51	; 81
 824:	71 e0       	ldi	r23, 0x01	; 1
 826:	0e 94 0c 06 	call	0xc18	; 0xc18 <__itoa_ncheck>
	itoa(adc_value, LDR_sensor, 10);							  // Convert the read value to an ascii string
	USART_putstring(LDR_sensor);								  // Send the converted value to the terminal
 82a:	81 e5       	ldi	r24, 0x51	; 81
 82c:	91 e0       	ldi	r25, 0x01	; 1
 82e:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
	USART_putstring("  ");
 832:	86 e1       	ldi	r24, 0x16	; 22
 834:	91 e0       	ldi	r25, 0x01	; 1
 836:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 83a:	08 95       	ret

0000083c <distance>:
}

void distance()
{
	USART_putstring("distance : ");
 83c:	80 e2       	ldi	r24, 0x20	; 32
 83e:	91 e0       	ldi	r25, 0x01	; 1
 840:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
	PORTD |= _BV(PD3);
 844:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 846:	85 e3       	ldi	r24, 0x35	; 53
 848:	8a 95       	dec	r24
 84a:	f1 f7       	brne	.-4      	; 0x848 <distance+0xc>
 84c:	00 00       	nop
	_delay_us(10);
	PORTD &= ~_BV(PD3);
 84e:	5b 98       	cbi	0x0b, 3	; 11
	
	loop_until_bit_is_set(PIND, PD2);
 850:	4a 9b       	sbis	0x09, 2	; 9
 852:	fe cf       	rjmp	.-4      	; 0x850 <distance+0x14>
	TCNT1 = 0;
 854:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 858:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	loop_until_bit_is_clear(PIND, PD2);
 85c:	4a 99       	sbic	0x09, 2	; 9
 85e:	fe cf       	rjmp	.-4      	; 0x85c <distance+0x20>
	uint16_t count = TCNT1;
 860:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 864:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__floatunsisf>
 870:	20 e0       	ldi	r18, 0x00	; 0
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	40 e8       	ldi	r20, 0x80	; 128
 876:	5e e3       	ldi	r21, 0x3E	; 62
 878:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
 87c:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
 880:	dc 01       	movw	r26, r24
 882:	cb 01       	movw	r24, r22
 884:	4a e0       	ldi	r20, 0x0A	; 10
 886:	6a e5       	ldi	r22, 0x5A	; 90
 888:	71 e0       	ldi	r23, 0x01	; 1
 88a:	0e 94 0c 06 	call	0xc18	; 0xc18 <__itoa_ncheck>
	float distance = ((float)count / 4);		// Calculate the distance

	itoa(distance, distance_sensor, 10);        // Convert the read value to an ascii string
	USART_putstring(distance_sensor);			// Send the converted value to the terminal
 88e:	8a e5       	ldi	r24, 0x5A	; 90
 890:	91 e0       	ldi	r25, 0x01	; 1
 892:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
	USART_putstring("  ");
 896:	86 e1       	ldi	r24, 0x16	; 22
 898:	91 e0       	ldi	r25, 0x01	; 1
 89a:	0e 94 1c 01 	call	0x238	; 0x238 <USART_putstring>
 89e:	08 95       	ret

000008a0 <__subsf3>:
 8a0:	50 58       	subi	r21, 0x80	; 128

000008a2 <__addsf3>:
 8a2:	bb 27       	eor	r27, r27
 8a4:	aa 27       	eor	r26, r26
 8a6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__addsf3x>
 8aa:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_round>
 8ae:	0e 94 39 05 	call	0xa72	; 0xa72 <__fp_pscA>
 8b2:	38 f0       	brcs	.+14     	; 0x8c2 <__addsf3+0x20>
 8b4:	0e 94 40 05 	call	0xa80	; 0xa80 <__fp_pscB>
 8b8:	20 f0       	brcs	.+8      	; 0x8c2 <__addsf3+0x20>
 8ba:	39 f4       	brne	.+14     	; 0x8ca <__addsf3+0x28>
 8bc:	9f 3f       	cpi	r25, 0xFF	; 255
 8be:	19 f4       	brne	.+6      	; 0x8c6 <__addsf3+0x24>
 8c0:	26 f4       	brtc	.+8      	; 0x8ca <__addsf3+0x28>
 8c2:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_nan>
 8c6:	0e f4       	brtc	.+2      	; 0x8ca <__addsf3+0x28>
 8c8:	e0 95       	com	r30
 8ca:	e7 fb       	bst	r30, 7
 8cc:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_inf>

000008d0 <__addsf3x>:
 8d0:	e9 2f       	mov	r30, r25
 8d2:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_split3>
 8d6:	58 f3       	brcs	.-42     	; 0x8ae <__addsf3+0xc>
 8d8:	ba 17       	cp	r27, r26
 8da:	62 07       	cpc	r22, r18
 8dc:	73 07       	cpc	r23, r19
 8de:	84 07       	cpc	r24, r20
 8e0:	95 07       	cpc	r25, r21
 8e2:	20 f0       	brcs	.+8      	; 0x8ec <__addsf3x+0x1c>
 8e4:	79 f4       	brne	.+30     	; 0x904 <__stack+0x5>
 8e6:	a6 f5       	brtc	.+104    	; 0x950 <__stack+0x51>
 8e8:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_zero>
 8ec:	0e f4       	brtc	.+2      	; 0x8f0 <__addsf3x+0x20>
 8ee:	e0 95       	com	r30
 8f0:	0b 2e       	mov	r0, r27
 8f2:	ba 2f       	mov	r27, r26
 8f4:	a0 2d       	mov	r26, r0
 8f6:	0b 01       	movw	r0, r22
 8f8:	b9 01       	movw	r22, r18
 8fa:	90 01       	movw	r18, r0
 8fc:	0c 01       	movw	r0, r24
 8fe:	ca 01       	movw	r24, r20
 900:	a0 01       	movw	r20, r0
 902:	11 24       	eor	r1, r1
 904:	ff 27       	eor	r31, r31
 906:	59 1b       	sub	r21, r25
 908:	99 f0       	breq	.+38     	; 0x930 <__stack+0x31>
 90a:	59 3f       	cpi	r21, 0xF9	; 249
 90c:	50 f4       	brcc	.+20     	; 0x922 <__stack+0x23>
 90e:	50 3e       	cpi	r21, 0xE0	; 224
 910:	68 f1       	brcs	.+90     	; 0x96c <__stack+0x6d>
 912:	1a 16       	cp	r1, r26
 914:	f0 40       	sbci	r31, 0x00	; 0
 916:	a2 2f       	mov	r26, r18
 918:	23 2f       	mov	r18, r19
 91a:	34 2f       	mov	r19, r20
 91c:	44 27       	eor	r20, r20
 91e:	58 5f       	subi	r21, 0xF8	; 248
 920:	f3 cf       	rjmp	.-26     	; 0x908 <__stack+0x9>
 922:	46 95       	lsr	r20
 924:	37 95       	ror	r19
 926:	27 95       	ror	r18
 928:	a7 95       	ror	r26
 92a:	f0 40       	sbci	r31, 0x00	; 0
 92c:	53 95       	inc	r21
 92e:	c9 f7       	brne	.-14     	; 0x922 <__stack+0x23>
 930:	7e f4       	brtc	.+30     	; 0x950 <__stack+0x51>
 932:	1f 16       	cp	r1, r31
 934:	ba 0b       	sbc	r27, r26
 936:	62 0b       	sbc	r22, r18
 938:	73 0b       	sbc	r23, r19
 93a:	84 0b       	sbc	r24, r20
 93c:	ba f0       	brmi	.+46     	; 0x96c <__stack+0x6d>
 93e:	91 50       	subi	r25, 0x01	; 1
 940:	a1 f0       	breq	.+40     	; 0x96a <__stack+0x6b>
 942:	ff 0f       	add	r31, r31
 944:	bb 1f       	adc	r27, r27
 946:	66 1f       	adc	r22, r22
 948:	77 1f       	adc	r23, r23
 94a:	88 1f       	adc	r24, r24
 94c:	c2 f7       	brpl	.-16     	; 0x93e <__stack+0x3f>
 94e:	0e c0       	rjmp	.+28     	; 0x96c <__stack+0x6d>
 950:	ba 0f       	add	r27, r26
 952:	62 1f       	adc	r22, r18
 954:	73 1f       	adc	r23, r19
 956:	84 1f       	adc	r24, r20
 958:	48 f4       	brcc	.+18     	; 0x96c <__stack+0x6d>
 95a:	87 95       	ror	r24
 95c:	77 95       	ror	r23
 95e:	67 95       	ror	r22
 960:	b7 95       	ror	r27
 962:	f7 95       	ror	r31
 964:	9e 3f       	cpi	r25, 0xFE	; 254
 966:	08 f0       	brcs	.+2      	; 0x96a <__stack+0x6b>
 968:	b0 cf       	rjmp	.-160    	; 0x8ca <__addsf3+0x28>
 96a:	93 95       	inc	r25
 96c:	88 0f       	add	r24, r24
 96e:	08 f0       	brcs	.+2      	; 0x972 <__stack+0x73>
 970:	99 27       	eor	r25, r25
 972:	ee 0f       	add	r30, r30
 974:	97 95       	ror	r25
 976:	87 95       	ror	r24
 978:	08 95       	ret

0000097a <__fixsfsi>:
 97a:	0e 94 c4 04 	call	0x988	; 0x988 <__fixunssfsi>
 97e:	68 94       	set
 980:	b1 11       	cpse	r27, r1
 982:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_szero>
 986:	08 95       	ret

00000988 <__fixunssfsi>:
 988:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_splitA>
 98c:	88 f0       	brcs	.+34     	; 0x9b0 <__fixunssfsi+0x28>
 98e:	9f 57       	subi	r25, 0x7F	; 127
 990:	98 f0       	brcs	.+38     	; 0x9b8 <__fixunssfsi+0x30>
 992:	b9 2f       	mov	r27, r25
 994:	99 27       	eor	r25, r25
 996:	b7 51       	subi	r27, 0x17	; 23
 998:	b0 f0       	brcs	.+44     	; 0x9c6 <__fixunssfsi+0x3e>
 99a:	e1 f0       	breq	.+56     	; 0x9d4 <__fixunssfsi+0x4c>
 99c:	66 0f       	add	r22, r22
 99e:	77 1f       	adc	r23, r23
 9a0:	88 1f       	adc	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	1a f0       	brmi	.+6      	; 0x9ac <__fixunssfsi+0x24>
 9a6:	ba 95       	dec	r27
 9a8:	c9 f7       	brne	.-14     	; 0x99c <__fixunssfsi+0x14>
 9aa:	14 c0       	rjmp	.+40     	; 0x9d4 <__fixunssfsi+0x4c>
 9ac:	b1 30       	cpi	r27, 0x01	; 1
 9ae:	91 f0       	breq	.+36     	; 0x9d4 <__fixunssfsi+0x4c>
 9b0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_zero>
 9b4:	b1 e0       	ldi	r27, 0x01	; 1
 9b6:	08 95       	ret
 9b8:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_zero>
 9bc:	67 2f       	mov	r22, r23
 9be:	78 2f       	mov	r23, r24
 9c0:	88 27       	eor	r24, r24
 9c2:	b8 5f       	subi	r27, 0xF8	; 248
 9c4:	39 f0       	breq	.+14     	; 0x9d4 <__fixunssfsi+0x4c>
 9c6:	b9 3f       	cpi	r27, 0xF9	; 249
 9c8:	cc f3       	brlt	.-14     	; 0x9bc <__fixunssfsi+0x34>
 9ca:	86 95       	lsr	r24
 9cc:	77 95       	ror	r23
 9ce:	67 95       	ror	r22
 9d0:	b3 95       	inc	r27
 9d2:	d9 f7       	brne	.-10     	; 0x9ca <__fixunssfsi+0x42>
 9d4:	3e f4       	brtc	.+14     	; 0x9e4 <__fixunssfsi+0x5c>
 9d6:	90 95       	com	r25
 9d8:	80 95       	com	r24
 9da:	70 95       	com	r23
 9dc:	61 95       	neg	r22
 9de:	7f 4f       	sbci	r23, 0xFF	; 255
 9e0:	8f 4f       	sbci	r24, 0xFF	; 255
 9e2:	9f 4f       	sbci	r25, 0xFF	; 255
 9e4:	08 95       	ret

000009e6 <__floatunsisf>:
 9e6:	e8 94       	clt
 9e8:	09 c0       	rjmp	.+18     	; 0x9fc <__floatsisf+0x12>

000009ea <__floatsisf>:
 9ea:	97 fb       	bst	r25, 7
 9ec:	3e f4       	brtc	.+14     	; 0x9fc <__floatsisf+0x12>
 9ee:	90 95       	com	r25
 9f0:	80 95       	com	r24
 9f2:	70 95       	com	r23
 9f4:	61 95       	neg	r22
 9f6:	7f 4f       	sbci	r23, 0xFF	; 255
 9f8:	8f 4f       	sbci	r24, 0xFF	; 255
 9fa:	9f 4f       	sbci	r25, 0xFF	; 255
 9fc:	99 23       	and	r25, r25
 9fe:	a9 f0       	breq	.+42     	; 0xa2a <__floatsisf+0x40>
 a00:	f9 2f       	mov	r31, r25
 a02:	96 e9       	ldi	r25, 0x96	; 150
 a04:	bb 27       	eor	r27, r27
 a06:	93 95       	inc	r25
 a08:	f6 95       	lsr	r31
 a0a:	87 95       	ror	r24
 a0c:	77 95       	ror	r23
 a0e:	67 95       	ror	r22
 a10:	b7 95       	ror	r27
 a12:	f1 11       	cpse	r31, r1
 a14:	f8 cf       	rjmp	.-16     	; 0xa06 <__floatsisf+0x1c>
 a16:	fa f4       	brpl	.+62     	; 0xa56 <__floatsisf+0x6c>
 a18:	bb 0f       	add	r27, r27
 a1a:	11 f4       	brne	.+4      	; 0xa20 <__floatsisf+0x36>
 a1c:	60 ff       	sbrs	r22, 0
 a1e:	1b c0       	rjmp	.+54     	; 0xa56 <__floatsisf+0x6c>
 a20:	6f 5f       	subi	r22, 0xFF	; 255
 a22:	7f 4f       	sbci	r23, 0xFF	; 255
 a24:	8f 4f       	sbci	r24, 0xFF	; 255
 a26:	9f 4f       	sbci	r25, 0xFF	; 255
 a28:	16 c0       	rjmp	.+44     	; 0xa56 <__floatsisf+0x6c>
 a2a:	88 23       	and	r24, r24
 a2c:	11 f0       	breq	.+4      	; 0xa32 <__floatsisf+0x48>
 a2e:	96 e9       	ldi	r25, 0x96	; 150
 a30:	11 c0       	rjmp	.+34     	; 0xa54 <__floatsisf+0x6a>
 a32:	77 23       	and	r23, r23
 a34:	21 f0       	breq	.+8      	; 0xa3e <__floatsisf+0x54>
 a36:	9e e8       	ldi	r25, 0x8E	; 142
 a38:	87 2f       	mov	r24, r23
 a3a:	76 2f       	mov	r23, r22
 a3c:	05 c0       	rjmp	.+10     	; 0xa48 <__floatsisf+0x5e>
 a3e:	66 23       	and	r22, r22
 a40:	71 f0       	breq	.+28     	; 0xa5e <__floatsisf+0x74>
 a42:	96 e8       	ldi	r25, 0x86	; 134
 a44:	86 2f       	mov	r24, r22
 a46:	70 e0       	ldi	r23, 0x00	; 0
 a48:	60 e0       	ldi	r22, 0x00	; 0
 a4a:	2a f0       	brmi	.+10     	; 0xa56 <__floatsisf+0x6c>
 a4c:	9a 95       	dec	r25
 a4e:	66 0f       	add	r22, r22
 a50:	77 1f       	adc	r23, r23
 a52:	88 1f       	adc	r24, r24
 a54:	da f7       	brpl	.-10     	; 0xa4c <__floatsisf+0x62>
 a56:	88 0f       	add	r24, r24
 a58:	96 95       	lsr	r25
 a5a:	87 95       	ror	r24
 a5c:	97 f9       	bld	r25, 7
 a5e:	08 95       	ret

00000a60 <__fp_inf>:
 a60:	97 f9       	bld	r25, 7
 a62:	9f 67       	ori	r25, 0x7F	; 127
 a64:	80 e8       	ldi	r24, 0x80	; 128
 a66:	70 e0       	ldi	r23, 0x00	; 0
 a68:	60 e0       	ldi	r22, 0x00	; 0
 a6a:	08 95       	ret

00000a6c <__fp_nan>:
 a6c:	9f ef       	ldi	r25, 0xFF	; 255
 a6e:	80 ec       	ldi	r24, 0xC0	; 192
 a70:	08 95       	ret

00000a72 <__fp_pscA>:
 a72:	00 24       	eor	r0, r0
 a74:	0a 94       	dec	r0
 a76:	16 16       	cp	r1, r22
 a78:	17 06       	cpc	r1, r23
 a7a:	18 06       	cpc	r1, r24
 a7c:	09 06       	cpc	r0, r25
 a7e:	08 95       	ret

00000a80 <__fp_pscB>:
 a80:	00 24       	eor	r0, r0
 a82:	0a 94       	dec	r0
 a84:	12 16       	cp	r1, r18
 a86:	13 06       	cpc	r1, r19
 a88:	14 06       	cpc	r1, r20
 a8a:	05 06       	cpc	r0, r21
 a8c:	08 95       	ret

00000a8e <__fp_round>:
 a8e:	09 2e       	mov	r0, r25
 a90:	03 94       	inc	r0
 a92:	00 0c       	add	r0, r0
 a94:	11 f4       	brne	.+4      	; 0xa9a <__fp_round+0xc>
 a96:	88 23       	and	r24, r24
 a98:	52 f0       	brmi	.+20     	; 0xaae <__fp_round+0x20>
 a9a:	bb 0f       	add	r27, r27
 a9c:	40 f4       	brcc	.+16     	; 0xaae <__fp_round+0x20>
 a9e:	bf 2b       	or	r27, r31
 aa0:	11 f4       	brne	.+4      	; 0xaa6 <__fp_round+0x18>
 aa2:	60 ff       	sbrs	r22, 0
 aa4:	04 c0       	rjmp	.+8      	; 0xaae <__fp_round+0x20>
 aa6:	6f 5f       	subi	r22, 0xFF	; 255
 aa8:	7f 4f       	sbci	r23, 0xFF	; 255
 aaa:	8f 4f       	sbci	r24, 0xFF	; 255
 aac:	9f 4f       	sbci	r25, 0xFF	; 255
 aae:	08 95       	ret

00000ab0 <__fp_split3>:
 ab0:	57 fd       	sbrc	r21, 7
 ab2:	90 58       	subi	r25, 0x80	; 128
 ab4:	44 0f       	add	r20, r20
 ab6:	55 1f       	adc	r21, r21
 ab8:	59 f0       	breq	.+22     	; 0xad0 <__fp_splitA+0x10>
 aba:	5f 3f       	cpi	r21, 0xFF	; 255
 abc:	71 f0       	breq	.+28     	; 0xada <__fp_splitA+0x1a>
 abe:	47 95       	ror	r20

00000ac0 <__fp_splitA>:
 ac0:	88 0f       	add	r24, r24
 ac2:	97 fb       	bst	r25, 7
 ac4:	99 1f       	adc	r25, r25
 ac6:	61 f0       	breq	.+24     	; 0xae0 <__fp_splitA+0x20>
 ac8:	9f 3f       	cpi	r25, 0xFF	; 255
 aca:	79 f0       	breq	.+30     	; 0xaea <__fp_splitA+0x2a>
 acc:	87 95       	ror	r24
 ace:	08 95       	ret
 ad0:	12 16       	cp	r1, r18
 ad2:	13 06       	cpc	r1, r19
 ad4:	14 06       	cpc	r1, r20
 ad6:	55 1f       	adc	r21, r21
 ad8:	f2 cf       	rjmp	.-28     	; 0xabe <__fp_split3+0xe>
 ada:	46 95       	lsr	r20
 adc:	f1 df       	rcall	.-30     	; 0xac0 <__fp_splitA>
 ade:	08 c0       	rjmp	.+16     	; 0xaf0 <__fp_splitA+0x30>
 ae0:	16 16       	cp	r1, r22
 ae2:	17 06       	cpc	r1, r23
 ae4:	18 06       	cpc	r1, r24
 ae6:	99 1f       	adc	r25, r25
 ae8:	f1 cf       	rjmp	.-30     	; 0xacc <__fp_splitA+0xc>
 aea:	86 95       	lsr	r24
 aec:	71 05       	cpc	r23, r1
 aee:	61 05       	cpc	r22, r1
 af0:	08 94       	sec
 af2:	08 95       	ret

00000af4 <__fp_zero>:
 af4:	e8 94       	clt

00000af6 <__fp_szero>:
 af6:	bb 27       	eor	r27, r27
 af8:	66 27       	eor	r22, r22
 afa:	77 27       	eor	r23, r23
 afc:	cb 01       	movw	r24, r22
 afe:	97 f9       	bld	r25, 7
 b00:	08 95       	ret

00000b02 <__mulsf3>:
 b02:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3x>
 b06:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_round>
 b0a:	0e 94 39 05 	call	0xa72	; 0xa72 <__fp_pscA>
 b0e:	38 f0       	brcs	.+14     	; 0xb1e <__mulsf3+0x1c>
 b10:	0e 94 40 05 	call	0xa80	; 0xa80 <__fp_pscB>
 b14:	20 f0       	brcs	.+8      	; 0xb1e <__mulsf3+0x1c>
 b16:	95 23       	and	r25, r21
 b18:	11 f0       	breq	.+4      	; 0xb1e <__mulsf3+0x1c>
 b1a:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_inf>
 b1e:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_nan>
 b22:	11 24       	eor	r1, r1
 b24:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_szero>

00000b28 <__mulsf3x>:
 b28:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_split3>
 b2c:	70 f3       	brcs	.-36     	; 0xb0a <__mulsf3+0x8>

00000b2e <__mulsf3_pse>:
 b2e:	95 9f       	mul	r25, r21
 b30:	c1 f3       	breq	.-16     	; 0xb22 <__mulsf3+0x20>
 b32:	95 0f       	add	r25, r21
 b34:	50 e0       	ldi	r21, 0x00	; 0
 b36:	55 1f       	adc	r21, r21
 b38:	62 9f       	mul	r22, r18
 b3a:	f0 01       	movw	r30, r0
 b3c:	72 9f       	mul	r23, r18
 b3e:	bb 27       	eor	r27, r27
 b40:	f0 0d       	add	r31, r0
 b42:	b1 1d       	adc	r27, r1
 b44:	63 9f       	mul	r22, r19
 b46:	aa 27       	eor	r26, r26
 b48:	f0 0d       	add	r31, r0
 b4a:	b1 1d       	adc	r27, r1
 b4c:	aa 1f       	adc	r26, r26
 b4e:	64 9f       	mul	r22, r20
 b50:	66 27       	eor	r22, r22
 b52:	b0 0d       	add	r27, r0
 b54:	a1 1d       	adc	r26, r1
 b56:	66 1f       	adc	r22, r22
 b58:	82 9f       	mul	r24, r18
 b5a:	22 27       	eor	r18, r18
 b5c:	b0 0d       	add	r27, r0
 b5e:	a1 1d       	adc	r26, r1
 b60:	62 1f       	adc	r22, r18
 b62:	73 9f       	mul	r23, r19
 b64:	b0 0d       	add	r27, r0
 b66:	a1 1d       	adc	r26, r1
 b68:	62 1f       	adc	r22, r18
 b6a:	83 9f       	mul	r24, r19
 b6c:	a0 0d       	add	r26, r0
 b6e:	61 1d       	adc	r22, r1
 b70:	22 1f       	adc	r18, r18
 b72:	74 9f       	mul	r23, r20
 b74:	33 27       	eor	r19, r19
 b76:	a0 0d       	add	r26, r0
 b78:	61 1d       	adc	r22, r1
 b7a:	23 1f       	adc	r18, r19
 b7c:	84 9f       	mul	r24, r20
 b7e:	60 0d       	add	r22, r0
 b80:	21 1d       	adc	r18, r1
 b82:	82 2f       	mov	r24, r18
 b84:	76 2f       	mov	r23, r22
 b86:	6a 2f       	mov	r22, r26
 b88:	11 24       	eor	r1, r1
 b8a:	9f 57       	subi	r25, 0x7F	; 127
 b8c:	50 40       	sbci	r21, 0x00	; 0
 b8e:	9a f0       	brmi	.+38     	; 0xbb6 <__mulsf3_pse+0x88>
 b90:	f1 f0       	breq	.+60     	; 0xbce <__mulsf3_pse+0xa0>
 b92:	88 23       	and	r24, r24
 b94:	4a f0       	brmi	.+18     	; 0xba8 <__mulsf3_pse+0x7a>
 b96:	ee 0f       	add	r30, r30
 b98:	ff 1f       	adc	r31, r31
 b9a:	bb 1f       	adc	r27, r27
 b9c:	66 1f       	adc	r22, r22
 b9e:	77 1f       	adc	r23, r23
 ba0:	88 1f       	adc	r24, r24
 ba2:	91 50       	subi	r25, 0x01	; 1
 ba4:	50 40       	sbci	r21, 0x00	; 0
 ba6:	a9 f7       	brne	.-22     	; 0xb92 <__mulsf3_pse+0x64>
 ba8:	9e 3f       	cpi	r25, 0xFE	; 254
 baa:	51 05       	cpc	r21, r1
 bac:	80 f0       	brcs	.+32     	; 0xbce <__mulsf3_pse+0xa0>
 bae:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_inf>
 bb2:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_szero>
 bb6:	5f 3f       	cpi	r21, 0xFF	; 255
 bb8:	e4 f3       	brlt	.-8      	; 0xbb2 <__mulsf3_pse+0x84>
 bba:	98 3e       	cpi	r25, 0xE8	; 232
 bbc:	d4 f3       	brlt	.-12     	; 0xbb2 <__mulsf3_pse+0x84>
 bbe:	86 95       	lsr	r24
 bc0:	77 95       	ror	r23
 bc2:	67 95       	ror	r22
 bc4:	b7 95       	ror	r27
 bc6:	f7 95       	ror	r31
 bc8:	e7 95       	ror	r30
 bca:	9f 5f       	subi	r25, 0xFF	; 255
 bcc:	c1 f7       	brne	.-16     	; 0xbbe <__mulsf3_pse+0x90>
 bce:	fe 2b       	or	r31, r30
 bd0:	88 0f       	add	r24, r24
 bd2:	91 1d       	adc	r25, r1
 bd4:	96 95       	lsr	r25
 bd6:	87 95       	ror	r24
 bd8:	97 f9       	bld	r25, 7
 bda:	08 95       	ret

00000bdc <atoi>:
 bdc:	fc 01       	movw	r30, r24
 bde:	88 27       	eor	r24, r24
 be0:	99 27       	eor	r25, r25
 be2:	e8 94       	clt
 be4:	21 91       	ld	r18, Z+
 be6:	20 32       	cpi	r18, 0x20	; 32
 be8:	e9 f3       	breq	.-6      	; 0xbe4 <atoi+0x8>
 bea:	29 30       	cpi	r18, 0x09	; 9
 bec:	10 f0       	brcs	.+4      	; 0xbf2 <atoi+0x16>
 bee:	2e 30       	cpi	r18, 0x0E	; 14
 bf0:	c8 f3       	brcs	.-14     	; 0xbe4 <atoi+0x8>
 bf2:	2b 32       	cpi	r18, 0x2B	; 43
 bf4:	41 f0       	breq	.+16     	; 0xc06 <atoi+0x2a>
 bf6:	2d 32       	cpi	r18, 0x2D	; 45
 bf8:	39 f4       	brne	.+14     	; 0xc08 <atoi+0x2c>
 bfa:	68 94       	set
 bfc:	04 c0       	rjmp	.+8      	; 0xc06 <atoi+0x2a>
 bfe:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulhi_const_10>
 c02:	82 0f       	add	r24, r18
 c04:	91 1d       	adc	r25, r1
 c06:	21 91       	ld	r18, Z+
 c08:	20 53       	subi	r18, 0x30	; 48
 c0a:	2a 30       	cpi	r18, 0x0A	; 10
 c0c:	c0 f3       	brcs	.-16     	; 0xbfe <atoi+0x22>
 c0e:	1e f4       	brtc	.+6      	; 0xc16 <atoi+0x3a>
 c10:	90 95       	com	r25
 c12:	81 95       	neg	r24
 c14:	9f 4f       	sbci	r25, 0xFF	; 255
 c16:	08 95       	ret

00000c18 <__itoa_ncheck>:
 c18:	bb 27       	eor	r27, r27
 c1a:	4a 30       	cpi	r20, 0x0A	; 10
 c1c:	31 f4       	brne	.+12     	; 0xc2a <__itoa_ncheck+0x12>
 c1e:	99 23       	and	r25, r25
 c20:	22 f4       	brpl	.+8      	; 0xc2a <__itoa_ncheck+0x12>
 c22:	bd e2       	ldi	r27, 0x2D	; 45
 c24:	90 95       	com	r25
 c26:	81 95       	neg	r24
 c28:	9f 4f       	sbci	r25, 0xFF	; 255
 c2a:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__utoa_common>

00000c2e <__mulhi_const_10>:
 c2e:	7a e0       	ldi	r23, 0x0A	; 10
 c30:	97 9f       	mul	r25, r23
 c32:	90 2d       	mov	r25, r0
 c34:	87 9f       	mul	r24, r23
 c36:	80 2d       	mov	r24, r0
 c38:	91 0d       	add	r25, r1
 c3a:	11 24       	eor	r1, r1
 c3c:	08 95       	ret

00000c3e <__utoa_ncheck>:
 c3e:	bb 27       	eor	r27, r27

00000c40 <__utoa_common>:
 c40:	fb 01       	movw	r30, r22
 c42:	55 27       	eor	r21, r21
 c44:	aa 27       	eor	r26, r26
 c46:	88 0f       	add	r24, r24
 c48:	99 1f       	adc	r25, r25
 c4a:	aa 1f       	adc	r26, r26
 c4c:	a4 17       	cp	r26, r20
 c4e:	10 f0       	brcs	.+4      	; 0xc54 <__utoa_common+0x14>
 c50:	a4 1b       	sub	r26, r20
 c52:	83 95       	inc	r24
 c54:	50 51       	subi	r21, 0x10	; 16
 c56:	b9 f7       	brne	.-18     	; 0xc46 <__utoa_common+0x6>
 c58:	a0 5d       	subi	r26, 0xD0	; 208
 c5a:	aa 33       	cpi	r26, 0x3A	; 58
 c5c:	08 f0       	brcs	.+2      	; 0xc60 <__utoa_common+0x20>
 c5e:	a9 5d       	subi	r26, 0xD9	; 217
 c60:	a1 93       	st	Z+, r26
 c62:	00 97       	sbiw	r24, 0x00	; 0
 c64:	79 f7       	brne	.-34     	; 0xc44 <__utoa_common+0x4>
 c66:	b1 11       	cpse	r27, r1
 c68:	b1 93       	st	Z+, r27
 c6a:	11 92       	st	Z+, r1
 c6c:	cb 01       	movw	r24, r22
 c6e:	0c 94 39 06 	jmp	0xc72	; 0xc72 <strrev>

00000c72 <strrev>:
 c72:	dc 01       	movw	r26, r24
 c74:	fc 01       	movw	r30, r24
 c76:	67 2f       	mov	r22, r23
 c78:	71 91       	ld	r23, Z+
 c7a:	77 23       	and	r23, r23
 c7c:	e1 f7       	brne	.-8      	; 0xc76 <strrev+0x4>
 c7e:	32 97       	sbiw	r30, 0x02	; 2
 c80:	04 c0       	rjmp	.+8      	; 0xc8a <strrev+0x18>
 c82:	7c 91       	ld	r23, X
 c84:	6d 93       	st	X+, r22
 c86:	70 83       	st	Z, r23
 c88:	62 91       	ld	r22, -Z
 c8a:	ae 17       	cp	r26, r30
 c8c:	bf 07       	cpc	r27, r31
 c8e:	c8 f3       	brcs	.-14     	; 0xc82 <strrev+0x10>
 c90:	08 95       	ret

00000c92 <_exit>:
 c92:	f8 94       	cli

00000c94 <__stop_program>:
 c94:	ff cf       	rjmp	.-2      	; 0xc94 <__stop_program>
